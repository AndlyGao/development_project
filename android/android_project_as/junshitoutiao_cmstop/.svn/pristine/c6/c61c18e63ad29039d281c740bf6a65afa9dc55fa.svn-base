package com.cmstop.jstt.provider;



import com.cmstop.jstt.provider.util.ColumnMetadata;



import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class dbContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + dbProvider.AUTHORITY);

    private dbContent() {
    }

    /**
     * Created in version 7
     */
    public static final class table_login extends dbContent {

        private static final String LOG_TAG = table_login.class.getSimpleName();

        public static final String TABLE_NAME = "table_login";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_login";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_login";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            USERINFO("userinfo", "text"),
            PWD("pwd", "text"),
            COOKIE("cookie", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.USERINFO.getName(),
                Columns.PWD.getName(),
                Columns.COOKIE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_login() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.USERINFO.getName() + " " + Columns.USERINFO.getType() + ", " + Columns.PWD.getName() + " " + Columns.PWD.getType() + ", " + Columns.COOKIE.getName() + " " + Columns.COOKIE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable end");
            }
        }

        // Version 7 : Creation of the table
        // Version 8 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable start");
            }

            if (oldVersion < 7) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 7 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.USERINFO.getName()).append(", ").append(Columns.PWD.getName()).append(", ").append(Columns.COOKIE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.USERINFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PWD.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COOKIE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 4
     */
    public static final class table_setting extends dbContent {

        private static final String LOG_TAG = table_setting.class.getSimpleName();

        public static final String TABLE_NAME = "table_setting";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_setting";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_setting";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            IS_PUSH("is_push", "integer"),
            FONTSIZE("fontsize", "integer"),
            LASTTIME("lasttime", "text"),
            IS_NO_PIC_MODEL("is_no_pic_model", "integer"),
            IS_NIGHT_MODEL("is_night_model", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.IS_PUSH.getName(),
                Columns.FONTSIZE.getName(),
                Columns.LASTTIME.getName(),
                Columns.IS_NO_PIC_MODEL.getName(),
                Columns.IS_NIGHT_MODEL.getName()
        };

        private table_setting() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.IS_PUSH.getName() + " " + Columns.IS_PUSH.getType() + ", " + Columns.FONTSIZE.getName() + " " + Columns.FONTSIZE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.IS_NO_PIC_MODEL.getName() + " " + Columns.IS_NO_PIC_MODEL.getType() + ", " + Columns.IS_NIGHT_MODEL.getName() + " " + Columns.IS_NIGHT_MODEL.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable end");
            }
        }

        // Version 4 : Creation of the table
        // Version 5 - 8 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable start");
            }

            if (oldVersion < 4) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                //old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]);
                newSelectColumn = oldSelectColumn;
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);                
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.IS_PUSH.getName()).append(", ").append(Columns.FONTSIZE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.IS_NO_PIC_MODEL.getName()).append(", ").append(Columns.IS_NIGHT_MODEL.getName()).append(" ) VALUES (?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.IS_PUSH.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FONTSIZE.getName()));
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NO_PIC_MODEL.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NIGHT_MODEL.getName()));
        }
    }

    /**
     * Created in version 5
     */
    public static final class table_local_state extends dbContent {

        private static final String LOG_TAG = table_local_state.class.getSimpleName();

        public static final String TABLE_NAME = "table_local_state";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_local_state";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_local_state";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            LASTTIME("lasttime", "text"),
            READ_STATE("read_state", "text"),
            FAVORITE_STATE("favorite_state", "integer"),
            LIKE_STATE("like_state", "integer"),
            DATA_ITEM("data_item", "text"),
            DATA_ITEM_ARTICLE("data_item_article", "text"),
            TREAD_STATE("tread_state", "integer"),
            COLLECT_TIME("collect_time", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.LASTTIME.getName(),
                Columns.READ_STATE.getName(),
                Columns.FAVORITE_STATE.getName(),
                Columns.LIKE_STATE.getName(),
                Columns.DATA_ITEM.getName(),
                Columns.DATA_ITEM_ARTICLE.getName(),
                Columns.TREAD_STATE.getName(),
                Columns.COLLECT_TIME.getName()
        };

        private table_local_state() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.READ_STATE.getName() + " " + Columns.READ_STATE.getType() + ", " + Columns.FAVORITE_STATE.getName() + " " + Columns.FAVORITE_STATE.getType() + ", " + Columns.LIKE_STATE.getName() + " " + Columns.LIKE_STATE.getType() + ", " + Columns.DATA_ITEM.getName() + " " + Columns.DATA_ITEM.getType() + ", " + Columns.DATA_ITEM_ARTICLE.getName() + " " + Columns.DATA_ITEM_ARTICLE.getType() + ", " + Columns.TREAD_STATE.getName() + " " + Columns.TREAD_STATE.getType() + ", " + Columns.COLLECT_TIME.getName() + " " + Columns.COLLECT_TIME.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable end");
            }
        }

        // Version 5 : Creation of the table
        // Version 6 - 8 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable start");
            }

            if (oldVersion < 4) {
            	//old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",").append(PROJECTION[6]).append(",").append(PROJECTION[7]);
                newSelectColumn = oldSelectColumn;
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);
            }
            if (oldVersion < 5) {
            	//old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",").append(PROJECTION[8]);
                newSelectColumn = oldSelectColumn;
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);
                return;
            }
            
            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.READ_STATE.getName()).append(", ").append(Columns.FAVORITE_STATE.getName()).append(", ").append(Columns.LIKE_STATE.getName()).append(", ").append(Columns.DATA_ITEM.getName()).append(", ").append(Columns.DATA_ITEM_ARTICLE.getName()).append(", ").append(Columns.TREAD_STATE.getName()).append(", ").append(Columns.COLLECT_TIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.READ_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.FAVORITE_STATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LIKE_STATE.getName()));
            value = values.getAsString(Columns.DATA_ITEM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATA_ITEM_ARTICLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TREAD_STATE.getName()));
            value = values.getAsString(Columns.COLLECT_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 9
     */
    public static final class table_channel_item extends dbContent {

        private static final String LOG_TAG = table_channel_item.class.getSimpleName();

        public static final String TABLE_NAME = "table_channel_item";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_channel_item";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_channel_item";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            TITLE("title", "text"),
            AID("aid", "text"),
            DESCRIPTION("description", "text"),
            IMAGE("image", "text"),
            PUB_DATE("pubDate", "text"),
            CATEGORY("category", "text"),
            AUTHOR("author", "text"),
            IMAGE_ARR("image_arr", "text"),
            LOCAL_CHANNEL("local_channel", "text"),
            LOCAL_PAGE("local_page", "integer"),
            CHANNEL("channel", "text"),
            DIGG("digg", "text"),
            PL("pl", "text"),
            NAV("nav", "text"),
            NEWS_SHOW_TYPE("news_show_type", "integer"),
            MORE("more", "text"),
            RED_TAG("red_tag", "text"),
            AD_PLACE_ID("ad_place_id", "text"),
            PUB_TIMESTAMP("pubTimestamp", "integer"),
            TIPS("tips", "text"),
            REDIRECTURL("redirecturl", "text"),
            TZ_NAV("tz_nav", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.TITLE.getName(),
                Columns.AID.getName(),
                Columns.DESCRIPTION.getName(),
                Columns.IMAGE.getName(),
                Columns.PUB_DATE.getName(),
                Columns.CATEGORY.getName(),
                Columns.AUTHOR.getName(),
                Columns.IMAGE_ARR.getName(),
                Columns.LOCAL_CHANNEL.getName(),
                Columns.LOCAL_PAGE.getName(),
                Columns.CHANNEL.getName(),
                Columns.DIGG.getName(),
                Columns.PL.getName(),
                Columns.NAV.getName(),
                Columns.NEWS_SHOW_TYPE.getName(),
                Columns.MORE.getName(),
                Columns.RED_TAG.getName(),
                Columns.AD_PLACE_ID.getName(),
                Columns.PUB_TIMESTAMP.getName(),
                Columns.TIPS.getName(),
                Columns.REDIRECTURL.getName(),
                Columns.TZ_NAV.getName()
        };

        private table_channel_item() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.AID.getName() + " " + Columns.AID.getType() + ", " + Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", " + Columns.IMAGE.getName() + " " + Columns.IMAGE.getType() + ", " + Columns.PUB_DATE.getName() + " " + Columns.PUB_DATE.getType() + ", " + Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " + Columns.AUTHOR.getName() + " " + Columns.AUTHOR.getType() + ", " + Columns.IMAGE_ARR.getName() + " " + Columns.IMAGE_ARR.getType() + ", " + Columns.LOCAL_CHANNEL.getName() + " " + Columns.LOCAL_CHANNEL.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.DIGG.getName() + " " + Columns.DIGG.getType() + ", " + Columns.PL.getName() + " " + Columns.PL.getType() + ", " + Columns.NAV.getName() + " " + Columns.NAV.getType() + ", " + Columns.NEWS_SHOW_TYPE.getName() + " " + Columns.NEWS_SHOW_TYPE.getType() + ", " + Columns.MORE.getName() + " " + Columns.MORE.getType() + ", " + Columns.RED_TAG.getName() + " " + Columns.RED_TAG.getType() + ", " + Columns.AD_PLACE_ID.getName() + " " + Columns.AD_PLACE_ID.getType() + ", " + Columns.PUB_TIMESTAMP.getName() + " " + Columns.PUB_TIMESTAMP.getType() + ", " + Columns.TIPS.getName() + " " + Columns.TIPS.getType() + ", " + Columns.REDIRECTURL.getName() + " " + Columns.REDIRECTURL.getType() + ", " + Columns.TZ_NAV.getName() + " " + Columns.TZ_NAV.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable end");
            }
        }

        // Version 9 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
        	if (oldVersion < 4) {
           	   //old table 
                  StringBuffer oldSelectColumn = new StringBuffer();
                  //new table
                  StringBuffer newSelectColumn = new StringBuffer();
                  //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                  oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                  .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                  .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",")
                  .append(PROJECTION[8]).append(",").append(PROJECTION[9]).append(",")
                  .append(PROJECTION[10]);
                  newSelectColumn = oldSelectColumn;
                  final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                  db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                  createTable(db);
                  db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                  db.execSQL("drop table " + TEMP_TABLE_NAME);
              }

              if (oldVersion < 7) {
           	   //old table 
                  StringBuffer oldSelectColumn = new StringBuffer();
                  //new table
                  StringBuffer newSelectColumn = new StringBuffer();
                  //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                  oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                  .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                  .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",")
                  .append(PROJECTION[8]).append(",").append(PROJECTION[9]).append(",")
                  .append(PROJECTION[10]).append(",").append(PROJECTION[11]).append(",")
                  .append(PROJECTION[12]).append(",").append(PROJECTION[13]).append(",")
                  .append(PROJECTION[14]).append(",").append(PROJECTION[15]).append(",")
                  .append(PROJECTION[16]);
                  newSelectColumn = oldSelectColumn;
                  final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                  db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                  createTable(db);
                  db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                  db.execSQL("drop table " + TEMP_TABLE_NAME);
              }
              
              if (oldVersion < 8) {
            	   //old table 
                   StringBuffer oldSelectColumn = new StringBuffer();
                   //new table
                   StringBuffer newSelectColumn = new StringBuffer();
                   //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                   oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                   .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                   .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",")
                   .append(PROJECTION[8]).append(",").append(PROJECTION[9]).append(",")
                   .append(PROJECTION[10]).append(",").append(PROJECTION[11]).append(",")
                   .append(PROJECTION[12]).append(",").append(PROJECTION[13]).append(",")
                   .append(PROJECTION[14]).append(",").append(PROJECTION[15]).append(",")
                   .append(PROJECTION[16]).append(",").append(PROJECTION[17]).append(",")
                   .append(PROJECTION[18]).append(",").append(PROJECTION[19]).append(",")
                   .append(PROJECTION[20]).append(",").append(PROJECTION[21]);
                   newSelectColumn = oldSelectColumn;
                   final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                   db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                   createTable(db);
                   db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                   db.execSQL("drop table " + TEMP_TABLE_NAME);
               }
              
              if (oldVersion < 9) {
           	   //old table 
                  StringBuffer oldSelectColumn = new StringBuffer();
                  //new table
                  StringBuffer newSelectColumn = new StringBuffer();
                  //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                  oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                  .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                  .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",")
                  .append(PROJECTION[8]).append(",").append(PROJECTION[9]).append(",")
                  .append(PROJECTION[10]).append(",").append(PROJECTION[11]).append(",")
                  .append(PROJECTION[12]).append(",").append(PROJECTION[13]).append(",")
                  .append(PROJECTION[14]).append(",").append(PROJECTION[15]).append(",")
                  .append(PROJECTION[16]).append(",").append(PROJECTION[17]).append(",")
                  .append(PROJECTION[18]);
                  newSelectColumn = oldSelectColumn;
                  final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                  db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                  createTable(db);
                  db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                  db.execSQL("drop table " + TEMP_TABLE_NAME);
              }

             if (oldVersion < newVersion) {
                 // No more changes since version 7 so jump to newVersion
                 oldVersion = newVersion;
             }

             if (oldVersion != newVersion) {
                 throw new IllegalStateException("Error upgrading the database to version "
                         + newVersion);
             }

             if (dbProvider.ACTIVATE_ALL_LOGS) {
                 Log.d(LOG_TAG, "table_channel_item | upgradeTable end");
             }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.TITLE.getName()).append(", ").append(Columns.AID.getName()).append(", ").append(Columns.DESCRIPTION.getName()).append(", ").append(Columns.IMAGE.getName()).append(", ").append(Columns.PUB_DATE.getName()).append(", ").append(Columns.CATEGORY.getName()).append(", ").append(Columns.AUTHOR.getName()).append(", ").append(Columns.IMAGE_ARR.getName()).append(", ").append(Columns.LOCAL_CHANNEL.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.DIGG.getName()).append(", ").append(Columns.PL.getName()).append(", ").append(Columns.NAV.getName()).append(", ").append(Columns.NEWS_SHOW_TYPE.getName()).append(", ").append(Columns.MORE.getName()).append(", ").append(Columns.RED_TAG.getName()).append(", ").append(Columns.AD_PLACE_ID.getName()).append(", ").append(Columns.PUB_TIMESTAMP.getName()).append(", ").append(Columns.TIPS.getName()).append(", ").append(Columns.REDIRECTURL.getName()).append(", ").append(Columns.TZ_NAV.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PUB_DATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AUTHOR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_ARR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DIGG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAV.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.NEWS_SHOW_TYPE.getName()));
            value = values.getAsString(Columns.MORE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.RED_TAG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AD_PLACE_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PUB_TIMESTAMP.getName()));
            value = values.getAsString(Columns.TIPS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.REDIRECTURL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TZ_NAV.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}


package com.ikantech.military.provider.impl;

import java.util.HashMap;

import android.content.ContentUris;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.provider.BaseColumns;
import android.provider.LiveFolders;
import android.text.TextUtils;

import com.ikantech.military.provider.AbsManager;
import com.ikantech.military.provider.DataProvider;
import com.ikantech.military.provider.UriType;

public class WeaponDetailsManager implements AbsManager {
	public static final String TABLE_NAME = "a04";
	public static final String CREATE_SQL;

	private static HashMap<String, String> mProjectionMap;
	private static HashMap<String, String> mLiveFolderProjectionMap;

	public static final class WeaponDetailsColumns implements BaseColumns {
		private WeaponDetailsColumns() {
		}

		public static final Uri CONTENT_URI = Uri.parse("content://"
				+ DataProvider.AUTHORITY + "/" + TABLE_NAME);

		public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/vnd.ikantech.military."
				+ TABLE_NAME;
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.ikantech.military."
				+ TABLE_NAME;

		// 武器简述ID
		public static final String WEAPON_ID = TABLE_NAME + "01";
		// 大图片地址
		public static final String BIG_IMG_URL = TABLE_NAME + "02";
		// 类型
		public static final String SUB_TYPE = TABLE_NAME + "03";
		// 描述
		public static final String DESC = TABLE_NAME + "04";
		// 概观
		public static final String OVERVIEW = TABLE_NAME + "05";
		// 技术数据
		public static final String TECH_DATA = TABLE_NAME + "06";
		// 武器装备
		public static final String WEAPONRY = TABLE_NAME + "07";
		// 研发历程
		public static final String DEV_COURSE = TABLE_NAME + "08";
		// 装备配置
		public static final String EQUI_DEV = TABLE_NAME + "09";
		// 服役部队
		public static final String SERVE_ARMY = TABLE_NAME + "10";
		// 媒体评述
		public static final String COMMENT_OF_MEDIA = TABLE_NAME + "11";
		// 英文名
		public static final String ENGLISH_NAME = TABLE_NAME + "12";
		// 研发单位
		public static final String CRO = TABLE_NAME + "13";
		// 专家点评
		public static final String COMMENT_OF_PRO = TABLE_NAME + "14";

		public static final String DEFAULT_SORT_ORDER = _ID + " ASC";
	}

	static {
		StringBuilder builder = new StringBuilder();
		builder.append("CREATE TABLE ");
		builder.append(TABLE_NAME);
		builder.append(" (");
		builder.append(WeaponDetailsColumns._ID + " INTEGER PRIMARY KEY,");
		builder.append(WeaponDetailsColumns.WEAPON_ID + " INTEGER,");
		builder.append(WeaponDetailsColumns.BIG_IMG_URL + " TEXT,");
		builder.append(WeaponDetailsColumns.SUB_TYPE + " TEXT,");
		builder.append(WeaponDetailsColumns.DESC + " TEXT,");
		builder.append(WeaponDetailsColumns.OVERVIEW + " TEXT,");
		builder.append(WeaponDetailsColumns.TECH_DATA + " TEXT,");
		builder.append(WeaponDetailsColumns.WEAPONRY + " TEXT,");
		builder.append(WeaponDetailsColumns.DEV_COURSE + " TEXT,");
		builder.append(WeaponDetailsColumns.EQUI_DEV + " TEXT,");
		builder.append(WeaponDetailsColumns.SERVE_ARMY + " TEXT,");
		builder.append(WeaponDetailsColumns.COMMENT_OF_MEDIA + " TEXT,");
		builder.append(WeaponDetailsColumns.ENGLISH_NAME + " TEXT,");
		builder.append(WeaponDetailsColumns.CRO + " TEXT,");
		builder.append(WeaponDetailsColumns.COMMENT_OF_PRO + " TEXT");
		builder.append(");");
		CREATE_SQL = builder.toString();

		mProjectionMap = new HashMap<String, String>();
		mProjectionMap.put(WeaponDetailsColumns._ID, WeaponDetailsColumns._ID);
		mProjectionMap.put(WeaponDetailsColumns.WEAPON_ID,
				WeaponDetailsColumns.WEAPON_ID);
		mProjectionMap.put(WeaponDetailsColumns.BIG_IMG_URL,
				WeaponDetailsColumns.BIG_IMG_URL);
		mProjectionMap.put(WeaponDetailsColumns.SUB_TYPE,
				WeaponDetailsColumns.SUB_TYPE);
		mProjectionMap
				.put(WeaponDetailsColumns.DESC, WeaponDetailsColumns.DESC);
		mProjectionMap.put(WeaponDetailsColumns.OVERVIEW,
				WeaponDetailsColumns.OVERVIEW);
		mProjectionMap.put(WeaponDetailsColumns.TECH_DATA,
				WeaponDetailsColumns.TECH_DATA);
		mProjectionMap.put(WeaponDetailsColumns.WEAPONRY,
				WeaponDetailsColumns.WEAPONRY);
		mProjectionMap.put(WeaponDetailsColumns.DEV_COURSE,
				WeaponDetailsColumns.DEV_COURSE);
		mProjectionMap.put(WeaponDetailsColumns.EQUI_DEV,
				WeaponDetailsColumns.EQUI_DEV);
		mProjectionMap.put(WeaponDetailsColumns.SERVE_ARMY,
				WeaponDetailsColumns.SERVE_ARMY);
		mProjectionMap.put(WeaponDetailsColumns.COMMENT_OF_MEDIA,
				WeaponDetailsColumns.COMMENT_OF_MEDIA);
		mProjectionMap.put(WeaponDetailsColumns.ENGLISH_NAME,
				WeaponDetailsColumns.ENGLISH_NAME);
		mProjectionMap.put(WeaponDetailsColumns.CRO, WeaponDetailsColumns.CRO);
		mProjectionMap.put(WeaponDetailsColumns.COMMENT_OF_PRO,
				WeaponDetailsColumns.COMMENT_OF_PRO);

		mLiveFolderProjectionMap = new HashMap<String, String>();
		mLiveFolderProjectionMap.put(LiveFolders._ID, WeaponDetailsColumns._ID
				+ " AS " + LiveFolders._ID);
		mLiveFolderProjectionMap.put(LiveFolders.NAME,
				WeaponDetailsColumns.BIG_IMG_URL + " AS " + LiveFolders.NAME);
	}

	// 更新数据库
	public int update(SQLiteDatabase db, int type, Uri uri,
			ContentValues values, String where, String[] whereArgs) {
		int count;
		if (type == UriType.WEAPON_DETAILS.getCode()) {
			count = db.update(TABLE_NAME, values, where, whereArgs);
		} else if (type == UriType.WEAPON_DETAILS_ID.getCode()) {
			String noteId = uri.getPathSegments().get(1);
			count = db.update(
					TABLE_NAME,
					values,
					WeaponDetailsColumns._ID
							+ "="
							+ noteId
							+ (!TextUtils.isEmpty(where) ? " AND (" + where
									+ ')' : ""), whereArgs);
		} else {
			throw new IllegalArgumentException("Unknown URI " + uri);
		}
		return count;
	}

	// 删除数据
	public int delete(SQLiteDatabase db, int type, Uri uri, String where,
			String[] whereArgs) {
		int count;
		if (type == UriType.WEAPON_DETAILS.getCode()) {
			count = db.delete(TABLE_NAME, where, whereArgs);
		} else if (type == UriType.WEAPON_DETAILS_ID.getCode()) {
			String noteId = uri.getPathSegments().get(1);
			count = db.delete(
					TABLE_NAME,
					WeaponDetailsColumns._ID
							+ "="
							+ noteId
							+ (!TextUtils.isEmpty(where) ? " AND (" + where
									+ ')' : ""), whereArgs);
		} else {
			throw new IllegalArgumentException("Unknown URI " + uri);
		}
		return count;
	}

	// 插入数据
	public Uri insert(SQLiteDatabase db, int type, Uri uri,
			ContentValues initialValues) {

		if (type != UriType.WEAPON_DETAILS.getCode()) {
			throw new IllegalArgumentException("Unknown URI " + uri);
		}

		ContentValues values;
		if (initialValues != null) {
			values = new ContentValues(initialValues);
		} else {
			values = new ContentValues();
		}

		// Make sure that the fields are all set if
		if (values.containsKey(WeaponDetailsColumns.WEAPON_ID) == false) {
			throw new SQLException("Failed to insert row into " + uri
					+ ", weapon id should be point.");
		}

		if (values.containsKey(WeaponDetailsColumns.BIG_IMG_URL) == false) {
			throw new SQLException("Failed to insert row into " + uri
					+ ", big img url should be point.");
		}

		if (values.containsKey(WeaponDetailsColumns.SUB_TYPE) == false) {
			throw new SQLException("Failed to insert row into " + uri
					+ ", sub_type should be point.");
		}

		if (values.containsKey(WeaponDetailsColumns.DESC) == false) {
			throw new SQLException("Failed to insert row into " + uri
					+ ", desc code should be point.");
		}

		if (values.containsKey(WeaponDetailsColumns.OVERVIEW) == false) {
			values.put(WeaponDetailsColumns.OVERVIEW, "");
		}

		if (values.containsKey(WeaponDetailsColumns.WEAPONRY) == false) {
			values.put(WeaponDetailsColumns.WEAPONRY, "");
		}

		if (values.containsKey(WeaponDetailsColumns.TECH_DATA) == false) {
			values.put(WeaponDetailsColumns.TECH_DATA, "");
		}

		if (values.containsKey(WeaponDetailsColumns.EQUI_DEV) == false) {
			values.put(WeaponDetailsColumns.EQUI_DEV, "");
		}

		if (values.containsKey(WeaponDetailsColumns.DEV_COURSE) == false) {
			values.put(WeaponDetailsColumns.DEV_COURSE, "");
		}

		if (values.containsKey(WeaponDetailsColumns.SERVE_ARMY) == false) {
			values.put(WeaponDetailsColumns.SERVE_ARMY, "");
		}

		if (values.containsKey(WeaponDetailsColumns.COMMENT_OF_MEDIA) == false) {
			values.put(WeaponDetailsColumns.COMMENT_OF_MEDIA, "");
		}

		if (values.containsKey(WeaponDetailsColumns.ENGLISH_NAME) == false) {
			values.put(WeaponDetailsColumns.ENGLISH_NAME, "");
		}

		if (values.containsKey(WeaponDetailsColumns.CRO) == false) {
			values.put(WeaponDetailsColumns.CRO, "");
		}

		if (values.containsKey(WeaponDetailsColumns.COMMENT_OF_PRO) == false) {
			values.put(WeaponDetailsColumns.COMMENT_OF_PRO, "");
		}

		long rowId = db.insert(TABLE_NAME, WeaponDetailsColumns.WEAPONRY,
				values);
		
		if (rowId > 0) {
			Uri ret = ContentUris.withAppendedId(
					WeaponDetailsColumns.CONTENT_URI, rowId);
			return ret;
		}

		throw new SQLException("Failed to insert row into " + uri);
	}

	// 查询数据
	public Cursor query(SQLiteDatabase db, int type, Uri uri,
			String[] projection, String selection, String[] selectionArgs,
			String sortOrder) {

		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
		qb.setTables(TABLE_NAME);

		if (type == UriType.WEAPON_DETAILS.getCode()) {
			qb.setProjectionMap(mProjectionMap);
		} else if (type == UriType.WEAPON_DETAILS_ID.getCode()) {
			qb.setProjectionMap(mProjectionMap);
			qb.appendWhere(WeaponDetailsColumns._ID + "="
					+ uri.getPathSegments().get(1));
		} else if (type == UriType.LIVE_FOLDER_WEAPON_DETAILS.getCode()) {
			qb.setProjectionMap(mLiveFolderProjectionMap);
		} else {
			throw new IllegalArgumentException("Unknown URI " + uri);
		}

		// If no sort order is specified use the default
		String orderBy;
		if (TextUtils.isEmpty(sortOrder)) {
			orderBy = WeaponDetailsColumns.DEFAULT_SORT_ORDER;
		} else {
			orderBy = sortOrder;
		}

		// Get the database and run the query
		// Cursor c = qb.query(db, projection, selection, selectionArgs, null,
		// null, orderBy, uri.getQueryParameter("limit"));

		Cursor c = qb.query(db, projection, selection, selectionArgs, null,
				null, orderBy);

		return c;
	}
}

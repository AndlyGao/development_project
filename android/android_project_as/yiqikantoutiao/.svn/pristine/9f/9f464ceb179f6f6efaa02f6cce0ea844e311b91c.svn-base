package com.chengning.yiqikantoutiao.data.access;

import android.content.ContentProviderOperation;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.database.Cursor;
import android.os.RemoteException;

import com.chengning.common.base.BaseListDA;
import com.chengning.yiqikantoutiao.data.bean.CircleBean;
import com.chengning.yiqikantoutiao.db.provider.dbContent.table_circle_list;
import com.chengning.yiqikantoutiao.db.provider.dbProvider;

import java.util.ArrayList;
import java.util.List;

@Deprecated
public class CircleListDA extends BaseListDA<CircleBean> {

	private static CircleListDA mInst;

	public static CircleListDA getInst(Context con) {
		if (mInst == null) {
            synchronized (CircleListDA.class) {
                if (mInst == null) {
                    mInst = new CircleListDA(con);
                }
            }
        }
		return mInst;
	}

	private CircleListDA(Context con) {
		super(con, table_circle_list.CONTENT_URI);
	}

	@Override
	public String buildDeleteWhere(CircleBean t) {
		return "id = ?";
	}

	@Override
	public String[] buildDeleteSelectionArgs(CircleBean t) {
		return new String[]{t.getQid()};
	}

	@Override
	public ContentValues buildInsertValues(CircleBean bean) {
		ContentValues values = new ContentValues();
		values.put("id", bean.getQid());
		values.put("name", bean.getName());
		values.put("url", bean.getUrl());
		values.put("local_type", bean.getLocal_type());
		values.put("local_my_index", bean.getLocal_my_index());
		values.put("local_other_index", bean.getLocal_other_index());
		return values;
	}

	@Override
	public CircleBean buildQueryValues(Cursor cursor) {
		CircleBean bean = new CircleBean();
		bean.setQid(cursor.getString(cursor.getColumnIndex("id")));
		bean.setName(cursor.getString(cursor.getColumnIndex("name")));
		bean.setUrl(cursor.getString(cursor.getColumnIndex("url")));
		bean.setLocal_type(cursor.getString(cursor.getColumnIndex("local_type")));
		bean.setLocal_my_index(cursor.getInt(cursor.getColumnIndex("local_my_index")));
		bean.setLocal_other_index(cursor.getInt(cursor.getColumnIndex("local_other_index")));
		return bean;
	}
	
	public void updateTarget(CircleBean bean){
		ContentValues values = new ContentValues();
		values.put("id", bean.getQid());
		values.put("name", bean.getName());
		values.put("url", bean.getUrl());
		values.put("local_type", bean.getLocal_type());
		values.put("local_my_index", bean.getLocal_my_index());
		values.put("local_other_index", bean.getLocal_other_index());
		updateTarget(values, "id = ?", new String[]{bean.getId()});
	}
	
	public void updateList(List<CircleBean> list){
		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
		for(CircleBean bean : list){
			ContentValues values = new ContentValues();
			values.put("id", bean.getQid());
			values.put("name", bean.getName());
			values.put("url", bean.getUrl());
			values.put("local_type", bean.getLocal_type());
			values.put("local_my_index", bean.getLocal_my_index());
			values.put("local_other_index", bean.getLocal_other_index());
			ops.add(ContentProviderOperation.newUpdate(getUri()).withSelection("id = ?", new String[]{bean.getId()}).withValues(values).build());
		}
		try {
			getContentResolver().applyBatch(dbProvider.AUTHORITY, ops);
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (OperationApplicationException e) {
			e.printStackTrace();
		}
	}
	
	public List<CircleBean> queryMyCircleChannelList(){
		return queryTarget("local_my_index > ?", new String[]{"0"}, "local_my_index asc");
	}


}

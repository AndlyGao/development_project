package com.chengning.yiqikantoutiao.activity;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.PorterDuff;
import android.os.Message;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.chengning.common.base.BaseFragmentActivity;
import com.chengning.common.widget.extend.HackyViewPager;
import com.chengning.yiqikantoutiao.R;
import com.chengning.yiqikantoutiao.SettingManager;
import com.chengning.yiqikantoutiao.data.bean.Image;
import com.chengning.yiqikantoutiao.util.Common;
import com.chengning.yiqikantoutiao.widget.PhotoContentRelativeLayout;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.umeng.analytics.MobclickAgent;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import uk.co.senab.photoview.PhotoView;
import uk.co.senab.photoview.PhotoViewAttacher.OnViewTapListener;

public class PhotoPageCircleActivity extends BaseFragmentActivity {

	HackyViewPager mViewPager;
	PhotoContentRelativeLayout mContentView;
	BaseFragmentActivity mContext;
	View mView;
	private BaseFragmentActivity mActivity;

	private RelativeLayout mTitle;
	private RelativeLayout mHead;
	String title;
	TextView count;
	private StringBuffer mCountBuffer = new StringBuffer();

	private View mSave;
	private int mImageIndex;
	private ArrayList<Image> imgListImage;
	private ArrayList<String> imgList;

	private boolean isFavChange = false;

	protected boolean isFavBtnClick;
	protected Runnable mShareSuccessRunnable;

	public boolean isFavChange() {
		return isFavChange;
	}

	public void setFavChange(boolean isFavChange) {
		this.isFavChange = isFavChange;
	}

	@Override
	public BaseFragmentActivity getActivity() {
		return PhotoPageCircleActivity.this;
	}

	@Override
	public void initViews() {
		setContentView(R.layout.activity_photo_page_circle);

		mViewPager = new HackyViewPager(this);
		mContext = this;
		mActivity = this;
		mView = this.findViewById(R.id.activity_photo_root);
		mContentView = (PhotoContentRelativeLayout) this
				.findViewById(R.id.activity_photo_content);

		count = (TextView) this.findViewById(R.id.activity_photo_count);
		mHead = (RelativeLayout) this.findViewById(R.id.activity_photo_head);
		mTitle = (RelativeLayout) this
				.findViewById(R.id.activity_photo_footbar);

		mSave = this.findViewById(R.id.article_photo_save);
		mTitle.setVisibility(View.GONE);
	}

	@Override
	public void initDatas() {
		imgList = new ArrayList<String>();
		this.mImageIndex = getIntent().getIntExtra("index", 0);
		this.imgListImage = (ArrayList<Image>) getIntent()
				.getSerializableExtra("imgList");
		for (int i = 0; i < imgListImage.size(); i++) {
			imgList.add(imgListImage.get(i).getImage_original());
		}

		ThreadInitRefreshShow();

	}

	@Override
	public void installListeners() {

		mSave.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!Common.isListEmpty(imgList)) {
					Common.saveImageToGallery(mActivity,
							imgList.get(mImageIndex));
				}
			}

		});

	}

	@Override
	public void processHandlerMessage(Message msg) {

	}

	private OnViewTapListener mTap = new OnViewTapListener() {

		@Override
		public void onViewTap(View arg0, float arg1, float arg2) {
			finish();
			// if (!mPhotoHid) {
			// mHead.setVisibility(View.INVISIBLE);
			// mPhotoHid = true;
			// } else {
			// mPhotoHid = false;
			// mHead.setVisibility(View.VISIBLE);
			// }
		}
	};

	private OnPageChangeListener mPageChangerListener = new OnPageChangeListener() {

		@Override
		public void onPageScrollStateChanged(int p) {

		}

		@Override
		public void onPageScrolled(int arg0, float arg1, int arg2) {

		}

		@Override
		public void onPageSelected(int p) {
			mImageIndex = p;
			mCountBuffer.setLength(0);
			mCountBuffer.append(p + 1).append("/").append(imgList.size());
			count.setText(mCountBuffer.toString());

		}

	};

	// touchpage 后数据读取成功显示
	protected void ThreadInitRefreshShow() {
		if (!Common.isListEmpty(imgList)) {
			mCountBuffer.setLength(0);
			mCountBuffer.append(1).append("/").append(imgList.size());
			count.setText(mCountBuffer.toString());
			mContentView.addView(mViewPager);
			mViewPager.setAdapter(new SamplePagerAdapter(this, imgList, mTap));
			mViewPager.setOnPageChangeListener(mPageChangerListener);
			mViewPager.setCurrentItem(mImageIndex);
		} else {
			Toast.makeText(this, "加载失败 请检查网络", Toast.LENGTH_SHORT).show();
		}

	}

	public void photoClick(View v) {
		int tag = Common.handleStrToInteger(v.getTag().toString());
		switch (tag) {
		case 0:
			this.finish();
			break;
		}
	}

	static class SamplePagerAdapter extends PagerAdapter {

		private HashSet<String> mCacheUrls;

		List<String> imgList;
		TextView text;
		Context mContext;
		DisplayImageOptions options;
		private LayoutInflater mInflater;
		private OnViewTapListener tap;

		SamplePagerAdapter(Context context, List<String> list,
                           OnViewTapListener tap) {
			mCacheUrls = new HashSet<String>();
			imgList = list;
			mContext = context;
			options = new DisplayImageOptions.Builder()
					.showStubImage(R.drawable.loading)
					.showImageForEmptyUri(R.drawable.loading)
					.showImageOnFail(R.drawable.loading)
					.resetViewBeforeLoading(true).cacheInMemory(true)
					.cacheOnDisc(true).imageScaleType(ImageScaleType.EXACTLY)
					.bitmapConfig(Bitmap.Config.RGB_565)
					.considerExifParams(true)
					.displayer(new FadeInBitmapDisplayer(300)).build();
			mInflater = LayoutInflater.from(context);
			this.tap = tap;
		}

		@Override
		public int getCount() {
			return imgList.size();
		}

		@Override
		public View instantiateItem(ViewGroup container, final int position) {
			View convertView = mInflater.inflate(R.layout.item_img, null);
			final PhotoView photoView = (PhotoView) convertView
					.findViewById(R.id.item_img);
			photoView.setOnViewTapListener(tap);
			final View noPicPress = convertView
					.findViewById(R.id.no_pic_press_layout);
			final View noPicLoading = convertView
					.findViewById(R.id.no_pic_loading_layout);
			final View noPicError = convertView
					.findViewById(R.id.no_pic_error_layout);

			if (Common.isTrue(SettingManager.getInst().getNoPicModel())
					&& !mCacheUrls.contains(imgList.get(position))
					&& !Common.hasImageCache(imgList.get(position))) {
				ImageLoader.getInstance().cancelDisplayTask(photoView);
				photoView.setVisibility(View.GONE);
				noPicPress.setVisibility(View.VISIBLE);
				noPicLoading.setVisibility(View.GONE);
				noPicError.setVisibility(View.GONE);

				noPicPress.setOnClickListener(new View.OnClickListener() {

					@Override
					public void onClick(View v) {
						mCacheUrls.add(imgList.get(position));
						noPicPress.setVisibility(View.GONE);
						ImageLoader.getInstance().displayImage(
								imgList.get(position), photoView, options,
								new ImageLoadingListener() {

									@Override
									public void onLoadingStarted(String arg0,
											View arg1) {
										photoView.setVisibility(View.GONE);
										noPicLoading
												.setVisibility(View.VISIBLE);
									}

									@Override
									public void onLoadingFailed(String arg0,
                                                                View arg1, FailReason arg2) {
										photoView.setVisibility(View.GONE);
										noPicLoading.setVisibility(View.GONE);
										noPicError.setVisibility(View.VISIBLE);
									}

									@Override
									public void onLoadingComplete(String arg0,
                                                                  View arg1, Bitmap arg2) {
										photoView.setVisibility(View.VISIBLE);
										noPicLoading.setVisibility(View.GONE);
									}

									@Override
									public void onLoadingCancelled(String arg0,
											View arg1) {
									}
								});
					}
				});
			} else {
				photoView.setVisibility(View.VISIBLE);
				noPicPress.setVisibility(View.GONE);
				noPicLoading.setVisibility(View.GONE);
				noPicError.setVisibility(View.GONE);
				ImageLoader.getInstance().cancelDisplayTask(photoView);
				ImageLoader.getInstance().displayImage(imgList.get(position),
						photoView, options, new ImageLoadingListener() {

							@Override
							public void onLoadingStarted(String arg0, View arg1) {
								photoView.setVisibility(View.GONE);
								noPicLoading.setVisibility(View.VISIBLE);
							}

							@Override
							public void onLoadingFailed(String arg0, View arg1,
                                                        FailReason arg2) {
								photoView.setVisibility(View.GONE);
								noPicLoading.setVisibility(View.GONE);
								noPicError.setVisibility(View.VISIBLE);
							}

							@Override
							public void onLoadingComplete(String arg0,
                                                          View arg1, Bitmap arg2) {
								photoView.setVisibility(View.VISIBLE);
								noPicLoading.setVisibility(View.GONE);
							}

							@Override
							public void onLoadingCancelled(String arg0,
									View arg1) {
							}
						});
				if (Common.isTrue(SettingManager.getInst().getNightModel())) {
					photoView.setColorFilter(
							mContext.getResources().getColor(
									R.color.night_img_color),
							PorterDuff.Mode.MULTIPLY);
				}
			}

			container.addView(convertView);
			return convertView;
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			container.removeView((View) object);
		}

		@Override
		public boolean isViewFromObject(View view, Object object) {
			return view == object;
		}
	}

	@Override
	public void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
		if (mShareSuccessRunnable != null) {
			mShareSuccessRunnable.run();
			mShareSuccessRunnable = null;
		}
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	@Override
	public void finish() {
		super.finish();
		overridePendingTransition(0, android.R.anim.fade_out);
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
	}
}

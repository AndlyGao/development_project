package com.chengning.fenghuo.util;

import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

import org.apache.http.conn.ConnectTimeoutException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.PaintDrawable;
import android.net.Uri;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.support.v4.app.FragmentActivity;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.text.style.ImageSpan;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.chengning.fenghuo.App;
import com.chengning.fenghuo.Consts;
import com.chengning.fenghuo.R;
import com.chengning.fenghuo.SettingManager;
import com.chengning.fenghuo.data.bean.BaseArticlesBean;
import com.chengning.fenghuo.data.bean.ChannelItemBean;
import com.chengning.fenghuo.data.bean.CommentItemBean;
import com.chengning.fenghuo.data.bean.CreditsRuleBean;
import com.chengning.fenghuo.data.bean.DynamicItemBean;
import com.chengning.fenghuo.data.bean.UserInfoBean;
import com.chengning.fenghuo.widget.PointHintDialog;
import com.chengning.fenghuo.widget.UpgradeDialog;
import com.chengning.fenghuo.widget.UpgradeDialog.DialogOnClickListener;
import com.google.gson.Gson;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;

@SuppressLint("SimpleDateFormat")
public class Utils {

	final static int BUFFER_SIZE = 4096;

	public final static DisplayImageOptions mCircleOptions = new DisplayImageOptions.Builder()
			.showStubImage(R.drawable.loading)
			.showImageForEmptyUri(R.drawable.home_circle_default_avatar)
			.showImageOnFail(R.drawable.home_circle_default_avatar)
			.resetViewBeforeLoading(false).cacheInMemory(true)
			.cacheOnDisc(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
			.bitmapConfig(Bitmap.Config.RGB_565).considerExifParams(true)
//			.displayer(new RoundedBitmapDisplayer(0))
			.build();

	/**
	 * 设置图片为圆形
	 * 
	 * @param imageId
	 *            （int类型）
	 * @param image
	 *            imageId = R.drawable.image // from drawables (only images,
	 *            non-9patch)
	 * 
	 */
	public static void setCircleImage(int imageId, ImageView image) {
		ImageLoader.getInstance().displayImage("drawable://" + imageId, image,
				mCircleOptions);
	}

	/**
	 * 设置图片为圆形
	 * 
	 * @param imageUri
	 *            （String 类型）
	 * @param image
	 *            imageUri = "http://site.com/image.png"; // from Web imageUri =
	 *            "file:///mnt/sdcard/image.png"; // from SD card imageUri =
	 *            "content://media/external/audio/albumart/13"; // from content
	 *            provider imageUri = "assets://image.png"; // from assets
	 * 
	 */
	public static void setCircleImage(String imageUri, ImageView image) {
		ImageLoader.getInstance().displayImage(imageUri, image, mCircleOptions);
	}

	public static void showFace(String imageUri, ImageView image) {
		Utils.setCircleImage(imageUri, image);
	}

	/**
	 * 模糊图片
	 * 
	 * @param context
	 * @param bkg
	 * @param view
	 * @return
	 */
	public static LayerDrawable blur(Activity context, Bitmap bkg, View view) {
		float scaleFactor = 8;
		float radius = 10;
		int width = view.getMeasuredWidth();
		int height = view.getMeasuredHeight();

		Bitmap overlay = Bitmap.createBitmap((int) (width / scaleFactor),
				(int) (height / scaleFactor), Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(overlay);
		canvas.translate(-view.getLeft() / scaleFactor, -view.getTop()
				/ scaleFactor);
		canvas.scale(1 / scaleFactor, 1 / scaleFactor);
		Paint paint = new Paint();
		paint.setFlags(Paint.FILTER_BITMAP_FLAG);
		canvas.drawBitmap(bkg, 0, 0, paint);

		overlay = FastBlur.doBlur(overlay, (int) radius, true);
		// return new BitmapDrawable(context.getResources(), overlay);
		return overloadIamge(context, new BitmapDrawable(
				context.getResources(), overlay));
	}

	/**
	 * 模糊图片
	 * 
	 * @param context
	 * @param bkg
	 * @return
	 */
	public static LayerDrawable blur(Activity context, Bitmap bkg) {
		float scaleFactor = 1;
		float radius = 20;
		// if (downScale.isChecked()) {
		scaleFactor = 8;
		radius = 2;
		// }
		int width = bkg.getWidth();
		int height = bkg.getHeight();

		Bitmap overlay = Bitmap.createBitmap((int) (width / scaleFactor),
				(int) (height / scaleFactor), Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(overlay);
		// canvas.translate(-view.getLeft()/scaleFactor,
		// -view.getTop()/scaleFactor);
		canvas.scale(1 / scaleFactor, 1 / scaleFactor);
		Paint paint = new Paint();
		paint.setFlags(Paint.FILTER_BITMAP_FLAG);
		canvas.drawBitmap(bkg, 0, 0, paint);

		overlay = FastBlur.doBlur(overlay, (int) radius, true);
		return overloadIamge(context, new BitmapDrawable(
				context.getResources(), overlay));
		// return new BitmapDrawable(context.getResources(), overlay);
	}

	/**
	 * 图片叠加
	 * 
	 * @param drawable
	 * @return
	 */
	public static LayerDrawable overloadIamge(Activity context,
			BitmapDrawable drawable) {
		Drawable[] array = new Drawable[2];

		array[0] = drawable;
		array[1] = new PaintDrawable(context.getResources().getColor(
				R.color.directorate_bg_color));
		array[1].setAlpha(25);
		LayerDrawable ld = new LayerDrawable(array); // 参数为上面的Drawable数组
		ld.setLayerInset(0, 0, 0, 0, 0); // 第一个参数1代表数组的第二个元素，为白色
		ld.setLayerInset(1, 0, 0, 0, 0); // 第一个参数2代表数组的第三个元素，为位图资源
		return ld;
	}

	public static final int SECONDS_IN_DAY = 60 * 60 * 24;
	public static final long MILLIS_IN_DAY = 1000L * SECONDS_IN_DAY;

	/**
	 * 判断是否是同一天
	 * 
	 * @param ms1
	 * @param ms2
	 * @return
	 */
	public static boolean isSameDayOfMillis(final long ms1, final long ms2) {
		final long interval = ms1 - ms2;
		return interval < MILLIS_IN_DAY && interval > -1L * MILLIS_IN_DAY
				&& toDay(ms1) == toDay(ms2);
	}

	private static long toDay(long millis) {
		return (millis + TimeZone.getDefault().getOffset(millis))
				/ MILLIS_IN_DAY;
	}

	/**
	 * 显示任务完成
	 * 
	 * @param context
	 * @param object
	 * @throws JSONException
	 */
	public static void showTaskCompelete(final FragmentActivity context,
			JSONObject object) throws JSONException {
		StringBuffer title = new StringBuffer();
		title.append(object.optString("level_name")).append("您好!");

		int spStart = 0;
		int spEnd = 0;
		SpannableStringBuilder contentBuilder = new SpannableStringBuilder();
		contentBuilder.append(object.getString("rulename")).append("您将获得 ");
		spStart = contentBuilder.length();
		contentBuilder.append(object.getString("extcredits1"));
		spEnd = contentBuilder.length();
		ForegroundColorSpan sp = new ForegroundColorSpan(context.getResources()
				.getColor(R.color.dialog_medal_color));
		contentBuilder.setSpan(sp, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		contentBuilder.append(" 积分!");
		ArrayList<CreditsRuleBean> list = new ArrayList<CreditsRuleBean>();

		JSONArray jsonArray = object.optJSONArray("credits_rule");
		if (null != jsonArray) {
			Gson gson = new Gson();
			int size = jsonArray.length();
			for (int i = 0; i < size; i++) {
				list.add(gson.fromJson(jsonArray.optJSONObject(i).toString(),
						CreditsRuleBean.class));
			}
		}

		PointHintDialog dialog = new PointHintDialog();
		dialog.setData(title.toString(), contentBuilder, list,
				new PointHintDialog.DialogOnClickListener() {

					@Override
					public void onConfirmClick() {

					}
				});
		dialog.show(context.getSupportFragmentManager(),
				PointHintDialog.class.getSimpleName());

	}

	/**
	 * 显示升级弹窗
	 * 
	 * @param context
	 * @param object
	 * @throws JSONException
	 */
	public static void showUpgradeDialog(final FragmentActivity context,
			JSONObject object) throws JSONException {

		int spStart = 0;
		int spEnd = 0;
		SpannableStringBuilder nameBuilder = new SpannableStringBuilder();
		nameBuilder.append("您已从 ");
		spStart = nameBuilder.length();
		nameBuilder.append(object.getString("level_name"));
		spEnd = nameBuilder.length();
		ForegroundColorSpan sp = new ForegroundColorSpan(context.getResources()
				.getColor(R.color.home_bottom_txt_sel));
		nameBuilder.setSpan(sp, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		nameBuilder.append(" 升级为 ");
		spStart = nameBuilder.length();
		nameBuilder.append(object.getString("level_new_name"));
		spEnd = nameBuilder.length();
		ForegroundColorSpan sp1 = new ForegroundColorSpan(context
				.getResources().getColor(R.color.home_bottom_txt_sel));
		nameBuilder.setSpan(sp1, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		spStart = nameBuilder.length();
		nameBuilder.append("[smile]");
		spEnd = nameBuilder.length();
		Drawable drawable = context.getResources().getDrawable(
				R.drawable.upgrade_face);
		drawable.setBounds(0, 0, drawable.getIntrinsicWidth(),
				drawable.getIntrinsicHeight());
		ImageSpan span = new ImageSpan(drawable);
		nameBuilder.setSpan(span, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		nameBuilder.append(" 想要高升为 ");
		spStart = nameBuilder.length();
		nameBuilder.append(object.getString("level_next_name"));
		spEnd = nameBuilder.length();
		ForegroundColorSpan sp2 = new ForegroundColorSpan(context
				.getResources().getColor(R.color.home_bottom_txt_sel));
		nameBuilder.setSpan(sp2, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		nameBuilder.append(" 还需 ");
		spStart = nameBuilder.length();
		nameBuilder.append(object.getString("next_exp_credit"));
		spEnd = nameBuilder.length();
		ForegroundColorSpan sp3 = new ForegroundColorSpan(context
				.getResources().getColor(R.color.dialog_medal_color));
		nameBuilder.setSpan(sp3, spStart, spEnd,
				Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		nameBuilder.append(" 积分 ");
		UpgradeDialog dialog = new UpgradeDialog();
		dialog.setData(nameBuilder, new DialogOnClickListener() {

			@Override
			public void onConfirmClick() {

			}

		});
		dialog.show(context.getSupportFragmentManager(),
				UpgradeDialog.class.getSimpleName());

	}

	/**
	 * 隐藏软键盘
	 * 
	 * @return
	 */
	@SuppressWarnings("static-access")
	public static void hideIme(Activity context) {
		if (context == null)
			return;
		final View v = context.getWindow().peekDecorView();
		if (v != null && v.getWindowToken() != null) {
			InputMethodManager imm = (InputMethodManager) context
					.getSystemService(context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
		}
	}

	// public static void initPullLastUpdateTime(String key, PullToRefreshBase
	// pull){
	// if(!IS_SHOW_PULL_UPDATE_TIME){
	// return;
	// }
	// // SyUtils.getCurDate();
	// String value = SharedPreferencesHelper.getInst().getString(key);
	// if(!TextUtils.isEmpty(value)){
	// // String label = DateUtils.formatDateTime(App.getInstance(),
	// System.currentTimeMillis(),
	// // DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE |
	// DateUtils.FORMAT_ABBREV_ALL);
	// // StringBuffer buffer = new StringBuffer();
	// // buffer.append("上次更新时间为：").append( label);
	// pull.getLoadingLayoutProxy().setLastUpdatedLabel("上次更新: " +
	// Common.dateCompareNow(value));
	// }
	// }

	// public static void updatePullLastUpdateTime(String key, PullToRefreshBase
	// pull){
	// if(!IS_SHOW_PULL_UPDATE_TIME){
	// return;
	// }
	// String date = SyUtils.getCurDate();
	// SharedPreferencesHelper.getInst().saveString(key, date);
	// pull.getLoadingLayoutProxy().setLastUpdatedLabel("上次更新: " +
	// Common.dateCompareNow(date));
	//
	// }

	// public static void setPullLastUpdateTime(PullToRefreshBase pull, String
	// dateStr){
	// if(!IS_SHOW_PULL_UPDATE_TIME){
	// return;
	// }
	// pull.getLoadingLayoutProxy().setLastUpdatedLabel(dateStr);
	//
	// }

	/**
	 * 显示积分或者升级提示
	 * 
	 * @param data
	 * @param mContext
	 * @throws JSONException
	 */
	public static void showHints(FragmentActivity mContext, String data)
			throws JSONException {
		int isShow = SPHelper.getInst().getInt(SPHelper.POINT_DIALOG_KEY_IS_SHOW);
		if (!Common.isTrue(isShow)) {
			return;
		}
		JSONObject json = new JSONObject(data);
		if (json.has("credits_data")
				&& !json.get("credits_data").toString().equals("[]")) {
			switch (json.getJSONObject("credits_data").optInt("upgrade")) {
			case 0:
				showTaskCompelete(mContext, json.optJSONObject("credits_data"));
				break;
			case 1:
				showUpgradeDialog(mContext, json.optJSONObject("credits_data"));
				break;

			default:
				break;
			}
		}
	}

	/**
	 * 判断应用是否已安装
	 * 
	 * @param context
	 * @param packageName
	 *            包名
	 * @return
	 */
	public static boolean isInstalled(Context context, String packageName) {
		boolean hasInstalled = false;
		PackageManager pm = context.getPackageManager();
		List<PackageInfo> list = pm
				.getInstalledPackages(PackageManager.PERMISSION_GRANTED);
		for (PackageInfo p : list) {
			if (packageName != null && packageName.equals(p.packageName)) {
				hasInstalled = true;
				break;
			}
		}
		return hasInstalled;
	}

	/**
	 * 请求http失败处理
	 * 
	 * @param context
	 * @param throwable
	 */
	public static void handleHttpFailure(Activity context, Throwable throwable) {
		if (Common.hasNet()) {
			if (throwable != null
					&& throwable.getClass().isInstance(
							new ConnectTimeoutException())) {
				Toast.makeText(context, R.string.intent_timeout,
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(context, R.string.server_fail,
						Toast.LENGTH_SHORT).show();
			}
		} else {
			Toast.makeText(context, R.string.intnet_fail, Toast.LENGTH_SHORT)
					.show();
		}
	}

	/**
	 * Gets the corresponding path to a file from the given content:// URI
	 * 
	 * @param selectedVideoUri
	 *            The content:// URI to find the file path from
	 * @param contentResolver
	 *            The content resolver to use to perform the query.
	 * @return the file path as a string
	 */
	public static String getFilePathFromContentUri(Uri selectedVideoUri,
			Context context) {
		String filePath;
		String[] filePathColumn = { MediaColumns.DATA };

		Cursor cursor = context.getContentResolver().query(selectedVideoUri,
				filePathColumn, null, null, null);
		// 也可用下面的方法拿到cursor
		// Cursor cursor = this.context.managedQuery(selectedVideoUri,
		// filePathColumn, null, null, null);

		cursor.moveToFirst();

		int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
		filePath = cursor.getString(columnIndex);
		cursor.close();
		return filePath;
	}

	/**
	 * Gets the content:// URI from the given corresponding path to a file
	 * 
	 * @param context
	 * @param imageFile
	 * @return content Uri
	 */
	public static Uri getImageContentUri(Context context, java.io.File imageFile) {
		String filePath = imageFile.getAbsolutePath();
		Cursor cursor = context.getContentResolver().query(
				MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
				new String[] { MediaStore.Images.Media._ID },
				MediaStore.Images.Media.DATA + "=? ",
				new String[] { filePath }, null);
		if (cursor != null && cursor.moveToFirst()) {
			int id = cursor.getInt(cursor
					.getColumnIndex(MediaStore.MediaColumns._ID));
			Uri baseUri = Uri.parse("content://media/external/images/media");
			return Uri.withAppendedPath(baseUri, "" + id);
		} else {
			if (imageFile.exists()) {
				ContentValues values = new ContentValues();
				values.put(MediaStore.Images.Media.DATA, filePath);
				return context.getContentResolver().insert(
						MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
			} else {
				return null;
			}
		}
	}

	public static String getDirectorLevel(String level) {

		if (level != null) {
			if (level.equalsIgnoreCase("列兵")) {
				return "1";
			} else if (level.equalsIgnoreCase("下士")) {
				return "2";
			} else if (level.equalsIgnoreCase("中士")) {
				return "3";
			} else if (level.equalsIgnoreCase("上士")) {
				return "4";
			} else if (level.equalsIgnoreCase("四级军士长")) {
				return "5";
			} else if (level.equalsIgnoreCase("三级军士长")) {
				return "6";
			} else if (level.equalsIgnoreCase("二级军士长")) {
				return "7";
			} else if (level.equalsIgnoreCase("一级军士长")) {
				return "8";
			} else if (level.equalsIgnoreCase("少尉")) {
				return "9";
			} else if (level.equalsIgnoreCase("中尉")) {
				return "10";
			} else if (level.equalsIgnoreCase("上尉")) {
				return "11";
			} else if (level.equalsIgnoreCase("少校")) {
				return "12";
			} else if (level.equalsIgnoreCase("中校")) {
				return "13";
			} else if (level.equalsIgnoreCase("上校")) {
				return "14";
			} else if (level.equalsIgnoreCase("大校")) {
				return "15";
			} else if (level.equalsIgnoreCase("少将")) {
				return "16";
			} else if (level.equalsIgnoreCase("中将")) {
				return "17";
			} else if (level.equalsIgnoreCase("上将")) {
				return "18";
			} else if (level.equalsIgnoreCase("元帅")) {
				return "19";
			}
		}
		return "";
	}

	public static String getGenderString(int gender) {
		String str;
		switch (gender) {
		case Consts.GENDER_MALE:
			str = "男";
			break;
		case Consts.GENDER_FEMALE:
			str = "女";
			break;
		case Consts.GENDER_UNKNOWN:
		default:
			str = "未填写";
			break;
		}
		return str;
	}

	public static Drawable getGenderDrawable(int gender) {
		Drawable drawable;
		switch (gender) {
		case Consts.GENDER_MALE:
			drawable = App.getInst().getResources()
					.getDrawable(R.drawable.userinfo_icon_male);
			break;
		case Consts.GENDER_FEMALE:
			drawable = App.getInst().getResources()
					.getDrawable(R.drawable.userinfo_icon_female);
			break;
		case Consts.GENDER_UNKNOWN:
		default:
			drawable = null;
			break;
		}
		return drawable;
	}

	// /**
	// * 下载APK
	// * @param context
	// * @param url
	// */
	// public static void downloadApk(Context context, String url) {
	// // 检查SD卡是否存在
	// if(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
	// {
	// Toast.makeText(context, "未找到sd卡,无法进行下载", Toast.LENGTH_SHORT).show();
	// } else {
	// Intent downloadIntent =new Intent(context, DownLoadService.class);
	// downloadIntent.putExtra("url", url);
	// context.startService(downloadIntent);
	// }
	//
	// }

	public static int getEmptyListHeight() {
		return (int) App.getInst().getResources()
				.getDimension(R.dimen.empty_list_height);
	}

	public static void showVip(String vipPic, ImageView imageView) {
		imageView.setVisibility(View.GONE);
	}

	public static void showFace(Activity context, UserInfoBean bean,
			ImageView imageView, boolean isOriginFirst) {
		if (context == null || bean == null) {
			return;
		}
		
		String s = bean.getFace();
		String o = bean.getFace_original();
		if (!TextUtils.isEmpty(o) && isOriginFirst) {
			Utils.setCircleImage(o, imageView);
		} else {
			showFace(s, imageView);
		}
		if (Common.isTrue(SettingManager.getInst().getNightModel())) {
			imageView.setColorFilter(
					context.getResources().getColor(R.color.night_img_color),
					PorterDuff.Mode.MULTIPLY);
		}
	}
	
	public static String handleDynamicContentConvert(BaseArticlesBean bean) {
		String content = null;
		if (bean instanceof DynamicItemBean) {
			ArrayList<String> strings = ((DynamicItemBean)bean).getContent();
			content = !Common.isListEmpty(strings) ? strings.get(0) : "";
		} else if (bean instanceof CommentItemBean){
			ArrayList<String> strings = ((CommentItemBean)bean).getContent();
			content = !Common.isListEmpty(strings) ? strings.get(0) : "";
		} else if (bean instanceof ChannelItemBean){
			ArrayList<String> strings = ((ChannelItemBean)bean).getContent();
			content = !Common.isListEmpty(strings) ? strings.get(0) : "";
		}
		if (content == null) {
			content = "";
		}
		return content;
	}


	
	/**
     * 返回载入中界面
     * @param activity
     * @param parent
     * @param rootId
     */
	public static View addProssBar(Activity activity,View parent, int rootId){
		removeProssBar(parent, rootId);
		View wait = parent.inflate(parent.getContext(), R.layout.wait, null);
		RelativeLayout root = (RelativeLayout) parent.findViewById(rootId);
		root.addView(wait);
		return wait;
	}
	public static void removeProssBar(View parent, int rootId){
		RelativeLayout root = (RelativeLayout) parent.findViewById(rootId);
		View v = parent.findViewById(R.id.waitLayout_root);
		if(v!=null)
			root.removeView(v);
	}
	
	/**
	 * touch 刷新的view
	 * @param activity
	 * @param parent
	 * @param rootId
	 * @return
	 */
	public static View addTouchPhoto(Activity activity,View parent, int rootId){
		removeTouchPhoto(parent, rootId);
		View wait = parent.inflate(activity, R.layout.touch_refresh, null);
		RelativeLayout root = (RelativeLayout) parent.findViewById(rootId);
		root.addView(wait);
		return wait;
	}
	public static void removeTouchPhoto(View parent, int rootId){
		RelativeLayout root = (RelativeLayout) parent.findViewById(rootId);
		View v = parent.findViewById(R.id.touch_refresh_root);
		if(v!=null)
			root.removeView(v);
	}

	/**
	 * 发短信
	 * <uses-permission android:name="android.permission.SEND_SMS" />
	 */
	public static void sendSMS(Activity activity, String smsBody) {
		Uri smsToUri = Uri.parse("smsto:");
		Intent sendIntent = new Intent(Intent.ACTION_VIEW, smsToUri);
		//短信内容
		sendIntent.putExtra("sms_body", smsBody);
		sendIntent.setType("vnd.android-dir/mms-sms");
		activity.startActivity(sendIntent);
	}
	
	public static void copyToClipboardManager(Activity activity, String str){
		ClipboardManager cm = (ClipboardManager) activity.getSystemService(Context.CLIPBOARD_SERVICE);
		ClipData myClip = ClipData.newPlainText("text", str);
		cm.setPrimaryClip(myClip);
	}

}

package com.chengning.fenghuo.db.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import com.chengning.fenghuo.db.provider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class dbContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + dbProvider.AUTHORITY);

    private dbContent() {
    }

    /**
     * Created in version 2
     */
    public static final class table_login extends dbContent {

        private static final String LOG_TAG = table_login.class.getSimpleName();

        public static final String TABLE_NAME = "table_login";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_login";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_login";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            USERINFO("userinfo", "text"),
            PWD("pwd", "text"),
            SINA_TOKEN("sina_token", "text"),
            QQ_TOKEN("qq_token", "text"),
            WEIXIN_TOKEN("weixin_token", "text"),
            COOKIE("cookie", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.USERINFO.getName(),
                Columns.PWD.getName(),
                Columns.SINA_TOKEN.getName(),
                Columns.QQ_TOKEN.getName(),
                Columns.WEIXIN_TOKEN.getName(),
                Columns.COOKIE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_login() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.USERINFO.getName() + " " + Columns.USERINFO.getType() + ", " + Columns.PWD.getName() + " " + Columns.PWD.getType() + ", " + Columns.SINA_TOKEN.getName() + " " + Columns.SINA_TOKEN.getType() + ", " + Columns.QQ_TOKEN.getName() + " " + Columns.QQ_TOKEN.getType() + ", " + Columns.WEIXIN_TOKEN.getName() + " " + Columns.WEIXIN_TOKEN.getType() + ", " + Columns.COOKIE.getName() + " " + Columns.COOKIE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable end");
            }
        }

        // Version 2 : Creation of the table
        // Version 3 - 6 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable start");
            }

            if (oldVersion < 2) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.USERINFO.getName()).append(", ").append(Columns.PWD.getName()).append(", ").append(Columns.SINA_TOKEN.getName()).append(", ").append(Columns.QQ_TOKEN.getName()).append(", ").append(Columns.WEIXIN_TOKEN.getName()).append(", ").append(Columns.COOKIE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.USERINFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PWD.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SINA_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QQ_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.WEIXIN_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COOKIE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 3
     */
    public static final class table_setting extends dbContent {

        private static final String LOG_TAG = table_setting.class.getSimpleName();

        public static final String TABLE_NAME = "table_setting";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_setting";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_setting";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            IS_PUSH("is_push", "integer"),
            FONTSIZE("fontsize", "integer"),
            LASTTIME("lasttime", "text"),
            IS_NO_PIC_MODEL("is_no_pic_model", "integer"),
            IS_NIGHT_MODEL("is_night_model", "integer"),
            CONFIG_PUSH_IS_AT("config_push_is_at", "integer"),
            CONFIG_PUSH_IS_REPLY("config_push_is_reply", "integer"),
            CONFIG_PUSH_IS_DIG("config_push_is_dig", "integer"),
            CONFIG_PUSH_IS_PM("config_push_is_pm", "integer"),
            CONFIG_PUSH_IS_FAN("config_push_is_fan", "integer"),
            CONFIG_PUSH_START_TIME("config_push_start_time", "text"),
            CONFIG_PUSH_END_TIME("config_push_end_time", "text"),
            CONFIG_REPLY_ACCESS("config_reply_access", "integer"),
            CONFIG_PUSH_ENABLE("config_push_enable", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.IS_PUSH.getName(),
                Columns.FONTSIZE.getName(),
                Columns.LASTTIME.getName(),
                Columns.IS_NO_PIC_MODEL.getName(),
                Columns.IS_NIGHT_MODEL.getName(),
                Columns.CONFIG_PUSH_IS_AT.getName(),
                Columns.CONFIG_PUSH_IS_REPLY.getName(),
                Columns.CONFIG_PUSH_IS_DIG.getName(),
                Columns.CONFIG_PUSH_IS_PM.getName(),
                Columns.CONFIG_PUSH_IS_FAN.getName(),
                Columns.CONFIG_PUSH_START_TIME.getName(),
                Columns.CONFIG_PUSH_END_TIME.getName(),
                Columns.CONFIG_REPLY_ACCESS.getName(),
                Columns.CONFIG_PUSH_ENABLE.getName()
        };

        private table_setting() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.IS_PUSH.getName() + " " + Columns.IS_PUSH.getType() + ", " + Columns.FONTSIZE.getName() + " " + Columns.FONTSIZE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.IS_NO_PIC_MODEL.getName() + " " + Columns.IS_NO_PIC_MODEL.getType() + ", " + Columns.IS_NIGHT_MODEL.getName() + " " + Columns.IS_NIGHT_MODEL.getType() + ", " + Columns.CONFIG_PUSH_IS_AT.getName() + " " + Columns.CONFIG_PUSH_IS_AT.getType() + ", " + Columns.CONFIG_PUSH_IS_REPLY.getName() + " " + Columns.CONFIG_PUSH_IS_REPLY.getType() + ", " + Columns.CONFIG_PUSH_IS_DIG.getName() + " " + Columns.CONFIG_PUSH_IS_DIG.getType() + ", " + Columns.CONFIG_PUSH_IS_PM.getName() + " " + Columns.CONFIG_PUSH_IS_PM.getType() + ", " + Columns.CONFIG_PUSH_IS_FAN.getName() + " " + Columns.CONFIG_PUSH_IS_FAN.getType() + ", " + Columns.CONFIG_PUSH_START_TIME.getName() + " " + Columns.CONFIG_PUSH_START_TIME.getType() + ", " + Columns.CONFIG_PUSH_END_TIME.getName() + " " + Columns.CONFIG_PUSH_END_TIME.getType() + ", " + Columns.CONFIG_REPLY_ACCESS.getName() + " " + Columns.CONFIG_REPLY_ACCESS.getType() + ", " + Columns.CONFIG_PUSH_ENABLE.getName() + " " + Columns.CONFIG_PUSH_ENABLE.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable end");
            }
        }

        // Version 3 : Creation of the table
        // Version 4 - 6 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable start");
            }

            if (oldVersion < 2) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                //old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                oldSelectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                newSelectColumn = oldSelectColumn;
                 
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                //old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                oldSelectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3])
                	.append(","). append(PROJECTION[4]).append(","). append(PROJECTION[5]);
                newSelectColumn = oldSelectColumn;
                 
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.IS_PUSH.getName()).append(", ").append(Columns.FONTSIZE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.IS_NO_PIC_MODEL.getName()).append(", ").append(Columns.IS_NIGHT_MODEL.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_AT.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_REPLY.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_DIG.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_PM.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_FAN.getName()).append(", ").append(Columns.CONFIG_PUSH_START_TIME.getName()).append(", ").append(Columns.CONFIG_PUSH_END_TIME.getName()).append(", ").append(Columns.CONFIG_REPLY_ACCESS.getName()).append(", ").append(Columns.CONFIG_PUSH_ENABLE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.IS_PUSH.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FONTSIZE.getName()));
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NO_PIC_MODEL.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NIGHT_MODEL.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_AT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_REPLY.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_DIG.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_PM.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_FAN.getName()));
            value = values.getAsString(Columns.CONFIG_PUSH_START_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CONFIG_PUSH_END_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_REPLY_ACCESS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_ENABLE.getName()));
        }
    }

    /**
     * Created in version 3
     */
    
    public static final class table_local_state extends dbContent {

        private static final String LOG_TAG = table_local_state.class.getSimpleName();

        public static final String TABLE_NAME = "table_local_state";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_local_state";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_local_state";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            LASTTIME("lasttime", "text"),
            READ_STATE("read_state", "text"),
            FAVORITE_STATE("favorite_state", "integer"),
            LIKE_STATE("like_state", "integer"),
            DATA_ITEM("data_item", "text"),
            DATA_ITEM_ARTICLE("data_item_article", "text"),
            COLLECT_TIME("collect_time", "text"),
            COLLECT_TYPE("collect_type", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.LASTTIME.getName(),
                Columns.READ_STATE.getName(),
                Columns.FAVORITE_STATE.getName(),
                Columns.LIKE_STATE.getName(),
                Columns.DATA_ITEM.getName(),
                Columns.DATA_ITEM_ARTICLE.getName(),
                Columns.COLLECT_TIME.getName(),
                Columns.COLLECT_TYPE.getName()
        };

        private table_local_state() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.READ_STATE.getName() + " " + Columns.READ_STATE.getType() + ", " + Columns.FAVORITE_STATE.getName() + " " + Columns.FAVORITE_STATE.getType() + ", " + Columns.LIKE_STATE.getName() + " " + Columns.LIKE_STATE.getType() + ", " + Columns.DATA_ITEM.getName() + " " + Columns.DATA_ITEM.getType() + ", " + Columns.DATA_ITEM_ARTICLE.getName() + " " + Columns.DATA_ITEM_ARTICLE.getType() + ", " + Columns.COLLECT_TIME.getName() + " " + Columns.COLLECT_TIME.getType() + ", " + Columns.COLLECT_TYPE.getName() + " " + Columns.COLLECT_TYPE.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable end");
            }
        }

        // Version 3 : Creation of the table
        // Version 4 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable start");
            }

            if (oldVersion < 2) {
            	//old table 
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                .append(PROJECTION[6]);
                newSelectColumn = oldSelectColumn;
                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                db.execSQL("drop table " + TEMP_TABLE_NAME);
            }
            
            if (oldVersion < 3) {
            	 StringBuffer oldSelectColumn = new StringBuffer();
                 //new table
                 StringBuffer newSelectColumn = new StringBuffer();
                 //TODO set oldSelectColumn and newSelectColumn by self,for example selectColumn.append(PROJECTION[1]).append(","). append(PROJECTION[2]).append(","). append(PROJECTION[3]);
                 oldSelectColumn.append(PROJECTION[1]).append(",").append(PROJECTION[2]).append(",").append(PROJECTION[3]).append(",")
                 .append(PROJECTION[4]).append(",").append(PROJECTION[5]).append(",")
                 .append(PROJECTION[6]).append(",").append(PROJECTION[7]).append(",").append(PROJECTION[8]);
                 newSelectColumn = oldSelectColumn;
                 final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                 db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                 createTable(db);
                 db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME); 
                 db.execSQL("drop table " + TEMP_TABLE_NAME);
                 
                 //更新表，设置以前收藏的均是文章
                 db.execSQL("update " + TABLE_NAME + " set " + PROJECTION[9] + "=1");
            }

            if (oldVersion < newVersion) {
                // No more changes since version 3 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.READ_STATE.getName()).append(", ").append(Columns.FAVORITE_STATE.getName()).append(", ").append(Columns.LIKE_STATE.getName()).append(", ").append(Columns.DATA_ITEM.getName()).append(", ").append(Columns.DATA_ITEM_ARTICLE.getName()).append(", ").append(Columns.COLLECT_TIME.getName()).append(", ").append(Columns.COLLECT_TYPE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.READ_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.FAVORITE_STATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LIKE_STATE.getName()));
            value = values.getAsString(Columns.DATA_ITEM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATA_ITEM_ARTICLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COLLECT_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.COLLECT_TYPE.getName()));
        }
    }

    /**
     * Created in version 2
     */
    public static final class table_channel_item extends dbContent {

        private static final String LOG_TAG = table_channel_item.class.getSimpleName();

        public static final String TABLE_NAME = "table_channel_item";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_channel_item";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_channel_item";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            TID("tid", "text"),
            NICKNAME("nickname", "text"),
            DATELINE("dateline", "text"),
            REPLYS("replys", "integer"),
            TITLE("title", "text"),
            IMAGE_LIST("image_list", "text"),
            IS_SUBSCRIBE("is_subscribe", "text"),
            IS_SLIDE("is_slide", "integer"),
            LOCAL_CHANNEL("local_channel", "text"),
            LOCAL_PAGE("local_page", "integer"),
            TYPE("type", "integer"),
            IMAGE_ARR("image_arr", "text"),
            IMAGES("images", "text"),
            URL("url", "text"),
            JUMP_TYPE("jump_type", "text"),
            JUMP_ID("jump_id", "text"),
            IS_SPECIAL("is_special", "integer"),
            CH_NAME("ch_name", "text"),
            UID("uid", "text"),
            IS_PART("is_part", "integer"),
            FACE("face", "text"),
            IS_FOLLOW("is_follow", "integer"),
            CONTENT_TYPE("content_type", "text"),
            AD_PLACE_ID("ad_place_id", "text"),
            CATEGORY("category", "text"),
            REDIRECTURL("redirecturl", "text"),
            LIST_FROM("list_from", "text"),
            TZ_NAV("tz_nav", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.DATELINE.getName(),
                Columns.REPLYS.getName(),
                Columns.TITLE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.IS_SLIDE.getName(),
                Columns.LOCAL_CHANNEL.getName(),
                Columns.LOCAL_PAGE.getName(),
                Columns.TYPE.getName(),
                Columns.IMAGE_ARR.getName(),
                Columns.IMAGES.getName(),
                Columns.URL.getName(),
                Columns.JUMP_TYPE.getName(),
                Columns.JUMP_ID.getName(),
                Columns.IS_SPECIAL.getName(),
                Columns.CH_NAME.getName(),
                Columns.UID.getName(),
                Columns.IS_PART.getName(),
                Columns.FACE.getName(),
                Columns.IS_FOLLOW.getName(),
                Columns.CONTENT_TYPE.getName(),
                Columns.AD_PLACE_ID.getName(),
                Columns.CATEGORY.getName(),
                Columns.REDIRECTURL.getName(),
                Columns.LIST_FROM.getName(),
                Columns.TZ_NAV.getName()
        };

        private table_channel_item() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.IS_SLIDE.getName() + " " + Columns.IS_SLIDE.getType() + ", " + Columns.LOCAL_CHANNEL.getName() + " " + Columns.LOCAL_CHANNEL.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.IMAGE_ARR.getName() + " " + Columns.IMAGE_ARR.getType() + ", " + Columns.IMAGES.getName() + " " + Columns.IMAGES.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.JUMP_TYPE.getName() + " " + Columns.JUMP_TYPE.getType() + ", " + Columns.JUMP_ID.getName() + " " + Columns.JUMP_ID.getType() + ", " + Columns.IS_SPECIAL.getName() + " " + Columns.IS_SPECIAL.getType() + ", " + Columns.CH_NAME.getName() + " " + Columns.CH_NAME.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.IS_PART.getName() + " " + Columns.IS_PART.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.IS_FOLLOW.getName() + " " + Columns.IS_FOLLOW.getType() + ", " + Columns.CONTENT_TYPE.getName() + " " + Columns.CONTENT_TYPE.getType() + ", " + Columns.AD_PLACE_ID.getName() + " " + Columns.AD_PLACE_ID.getType() + ", " + Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " + Columns.REDIRECTURL.getName() + " " + Columns.REDIRECTURL.getType() + ", " + Columns.LIST_FROM.getName() + " " + Columns.LIST_FROM.getType() + ", " + Columns.TZ_NAV.getName() + " " + Columns.TZ_NAV.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable end");
            }
        }

        // Version 2 : Creation of the table
        // Version 3 - 4 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | upgradeTable start");
            }

            if (oldVersion < 3) {
				Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to "
						+ 3 + ", data will be lost!");
				// old table
				StringBuffer oldSelectColumn = new StringBuffer();
				// new table
				StringBuffer newSelectColumn = new StringBuffer();
				oldSelectColumn.append(PROJECTION[1]).append(",")
						.append(PROJECTION[2]).append(",")
						.append(PROJECTION[3]).append(",")
						.append(PROJECTION[4]).append(",")
						.append(PROJECTION[5]).append(",")
						.append(PROJECTION[6]).append(",")
						.append(PROJECTION[7]).append(",")
						.append(PROJECTION[8]).append(",")
						.append(PROJECTION[9]).append(",")
						.append(PROJECTION[10]);
				newSelectColumn = oldSelectColumn;
				final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
				db.execSQL("alter table " + TABLE_NAME + " rename to "
						+ TEMP_TABLE_NAME);
				createTable(db);
				db.execSQL("insert into " + TABLE_NAME + "("
						+ newSelectColumn.toString() + ") select "
						+ oldSelectColumn.toString() + " from "
						+ TEMP_TABLE_NAME);
				db.execSQL("drop table " + TEMP_TABLE_NAME);
			}
            
            if (oldVersion < 4) {
				Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to "
						+ 4 + ", data will be lost!");
				// old table
				StringBuffer oldSelectColumn = new StringBuffer();
				// new table
				StringBuffer newSelectColumn = new StringBuffer();
				oldSelectColumn.append(PROJECTION[1]).append(",")
						.append(PROJECTION[2]).append(",")
						.append(PROJECTION[3]).append(",")
						.append(PROJECTION[4]).append(",")
						.append(PROJECTION[5]).append(",")
						.append(PROJECTION[6]).append(",")
						.append(PROJECTION[7]).append(",")
						.append(PROJECTION[8]).append(",")
						.append(PROJECTION[9]).append(",")
						.append(PROJECTION[10]).append(",")
						.append(PROJECTION[11]).append(",")
						.append(PROJECTION[12]).append(",")
						.append(PROJECTION[13]).append(",")
						.append(PROJECTION[14]).append(",")
						.append(PROJECTION[15]).append(",")
						.append(PROJECTION[16]).append(",")
						.append(PROJECTION[17]).append(",")
						.append(PROJECTION[18]).append(",")
						.append(PROJECTION[19]).append(",")
						.append(PROJECTION[20]).append(",")
						.append(PROJECTION[21]).append(",")
						.append(PROJECTION[22]);
				newSelectColumn = oldSelectColumn;
				final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
				db.execSQL("alter table " + TABLE_NAME + " rename to "
						+ TEMP_TABLE_NAME);
				createTable(db);
				db.execSQL("insert into " + TABLE_NAME + "("
						+ newSelectColumn.toString() + ") select "
						+ oldSelectColumn.toString() + " from "
						+ TEMP_TABLE_NAME);
				db.execSQL("drop table " + TEMP_TABLE_NAME);
			}

            if (oldVersion < 6) {
				Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to "
						+ 6 + ", data will be lost!");
				// old table
				StringBuffer oldSelectColumn = new StringBuffer();
				// new table
				StringBuffer newSelectColumn = new StringBuffer();
				oldSelectColumn.append(PROJECTION[1]).append(",")
						.append(PROJECTION[2]).append(",")
						.append(PROJECTION[3]).append(",")
						.append(PROJECTION[4]).append(",")
						.append(PROJECTION[5]).append(",")
						.append(PROJECTION[6]).append(",")
						.append(PROJECTION[7]).append(",")
						.append(PROJECTION[8]).append(",")
						.append(PROJECTION[9]).append(",")
						.append(PROJECTION[10]).append(",")
						.append(PROJECTION[11]).append(",")
						.append(PROJECTION[12]).append(",")
						.append(PROJECTION[13]).append(",")
						.append(PROJECTION[14]).append(",")
						.append(PROJECTION[15]).append(",")
						.append(PROJECTION[16]).append(",")
						.append(PROJECTION[17]).append(",")
						.append(PROJECTION[18]).append(",")
						.append(PROJECTION[19]).append(",")
						.append(PROJECTION[20]).append(",")
						.append(PROJECTION[21]).append(",")
						.append(PROJECTION[22]).append(",")
						.append(PROJECTION[23]).append(",")
						.append(PROJECTION[24]).append(",")
						.append(PROJECTION[25]).append(",")
						.append(PROJECTION[26]).append(",")
						.append(PROJECTION[27]);
				newSelectColumn = oldSelectColumn;
				final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
				db.execSQL("alter table " + TABLE_NAME + " rename to "
						+ TEMP_TABLE_NAME);
				createTable(db);
				db.execSQL("insert into " + TABLE_NAME + "("
						+ newSelectColumn.toString() + ") select "
						+ oldSelectColumn.toString() + " from "
						+ TEMP_TABLE_NAME);
				db.execSQL("drop table " + TEMP_TABLE_NAME);
			}
            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.IS_SLIDE.getName()).append(", ").append(Columns.LOCAL_CHANNEL.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.IMAGE_ARR.getName()).append(", ").append(Columns.IMAGES.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.JUMP_TYPE.getName()).append(", ").append(Columns.JUMP_ID.getName()).append(", ").append(Columns.IS_SPECIAL.getName()).append(", ").append(Columns.CH_NAME.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.IS_PART.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.IS_FOLLOW.getName()).append(", ").append(Columns.CONTENT_TYPE.getName()).append(", ").append(Columns.AD_PLACE_ID.getName()).append(", ").append(Columns.CATEGORY.getName()).append(", ").append(Columns.REDIRECTURL.getName()).append(", ").append(Columns.LIST_FROM.getName()).append(", ").append(Columns.TZ_NAV.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.TID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IS_SUBSCRIBE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIDE.getName()));
            value = values.getAsString(Columns.LOCAL_CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TYPE.getName()));
            value = values.getAsString(Columns.IMAGE_ARR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGES.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.JUMP_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.JUMP_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SPECIAL.getName()));
            value = values.getAsString(Columns.CH_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_PART.getName()));
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOLLOW.getName()));
            value = values.getAsString(Columns.CONTENT_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AD_PLACE_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.REDIRECTURL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LIST_FROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TZ_NAV.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
    
    
    /**
     * Created in version 1
     */
    public static final class table_channel_list extends dbContent {

        private static final String LOG_TAG = table_channel_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_channel_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_channel_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_channel_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            NAME("name", "text"),
            URL("url", "text"),
            PIC("pic", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_MY_INDEX("local_my_index", "integer"),
            LOCAL_OTHER_INDEX("local_other_index", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.NAME.getName(),
                Columns.URL.getName(),
                Columns.PIC.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_MY_INDEX.getName(),
                Columns.LOCAL_OTHER_INDEX.getName()
        };

        private table_channel_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.PIC.getName() + " " + Columns.PIC.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_MY_INDEX.getName() + " " + Columns.LOCAL_MY_INDEX.getType() + ", " + Columns.LOCAL_OTHER_INDEX.getName() + " " + Columns.LOCAL_OTHER_INDEX.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
        	 if (dbProvider.ACTIVATE_ALL_LOGS) {
                 Log.d(LOG_TAG, "table_channel_list | upgradeTable start");
             }

             if (oldVersion < 1) {
                 Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                         + ", data will be lost!");

                 db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                 createTable(db);
             }		
                           
            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.PIC.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_MY_INDEX.getName()).append(", ").append(Columns.LOCAL_OTHER_INDEX.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_MY_INDEX.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_OTHER_INDEX.getName()));
        }
    }

    /**
     * Created in version 3
     */
    public static final class table_userinfo_other extends dbContent {

        private static final String LOG_TAG = table_userinfo_other.class.getSimpleName();

        public static final String TABLE_NAME = "table_userinfo_other";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_userinfo_other";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_userinfo_other";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            USERNAME("username", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_SMALL("face_small", "text"),
            FACE_ORIGINAL("face_original", "text"),
            GENDER("gender", "integer"),
            TOPIC_COUNT("topic_count", "integer"),
            AT_COUNT("at_count", "integer"),
            FOLLOW_COUNT("follow_count", "integer"),
            FANS_COUNT("fans_count", "integer"),
            EMAIL("email", "text"),
            PHONE("phone", "text"),
            ABOUTME("aboutme", "text"),
            ABOUTMETIME("aboutmetime", "text"),
            PROVINCE("province", "text"),
            CITY("city", "text"),
            AREA("area", "text"),
            FROM_AREA("from_area", "text"),
            GENDER_TA("gender_ta", "text"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            IS_FOLLOW("is_follow", "integer"),
            EXTCREDITS1("extcredits1", "integer"),
            EXTCREDITS2("extcredits2", "integer"),
            ROLE_NAME("role_name", "text"),
            MY_QUN("my_qun", "text"),
            SUBSCRIBE("subscribe", "integer"),
            EXTCREDITS3("extcredits3", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.USERNAME.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_SMALL.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.GENDER.getName(),
                Columns.TOPIC_COUNT.getName(),
                Columns.AT_COUNT.getName(),
                Columns.FOLLOW_COUNT.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.EMAIL.getName(),
                Columns.PHONE.getName(),
                Columns.ABOUTME.getName(),
                Columns.ABOUTMETIME.getName(),
                Columns.PROVINCE.getName(),
                Columns.CITY.getName(),
                Columns.AREA.getName(),
                Columns.FROM_AREA.getName(),
                Columns.GENDER_TA.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.IS_FOLLOW.getName(),
                Columns.EXTCREDITS1.getName(),
                Columns.EXTCREDITS2.getName(),
                Columns.ROLE_NAME.getName(),
                Columns.MY_QUN.getName(),
                Columns.SUBSCRIBE.getName(),
                Columns.EXTCREDITS3.getName()
        };

        private table_userinfo_other() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_SMALL.getName() + " " + Columns.FACE_SMALL.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.GENDER.getName() + " " + Columns.GENDER.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ", " + Columns.AT_COUNT.getName() + " " + Columns.AT_COUNT.getType() + ", " + Columns.FOLLOW_COUNT.getName() + " " + Columns.FOLLOW_COUNT.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PHONE.getName() + " " + Columns.PHONE.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.ABOUTMETIME.getName() + " " + Columns.ABOUTMETIME.getType() + ", " + Columns.PROVINCE.getName() + " " + Columns.PROVINCE.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.AREA.getName() + " " + Columns.AREA.getType() + ", " + Columns.FROM_AREA.getName() + " " + Columns.FROM_AREA.getType() + ", " + Columns.GENDER_TA.getName() + " " + Columns.GENDER_TA.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.IS_FOLLOW.getName() + " " + Columns.IS_FOLLOW.getType() + ", " + Columns.EXTCREDITS1.getName() + " " + Columns.EXTCREDITS1.getType() + ", " + Columns.EXTCREDITS2.getName() + " " + Columns.EXTCREDITS2.getType() + ", " + Columns.ROLE_NAME.getName() + " " + Columns.ROLE_NAME.getType() + ", " + Columns.MY_QUN.getName() + " " + Columns.MY_QUN.getType() + ", " + Columns.SUBSCRIBE.getName() + " " + Columns.SUBSCRIBE.getType() + ", " + Columns.EXTCREDITS3.getName() + " " + Columns.EXTCREDITS3.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable end");
            }
        }

        // Version 3 : Creation of the table
        // Version 4 - 7 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < 7) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                //old table
                StringBuffer oldSelectColumn = new StringBuffer();
                //new table
                StringBuffer newSelectColumn = new StringBuffer();
                oldSelectColumn.append(PROJECTION[1]).append(",")
                        .append(PROJECTION[2]).append(",")
                        .append(PROJECTION[3]).append(",")
                        .append(PROJECTION[4]).append(",")
                        .append(PROJECTION[5]).append(",")
                        .append(PROJECTION[6]).append(",")
                        .append(PROJECTION[7]).append(",")
                        .append(PROJECTION[8]).append(",")
                        .append(PROJECTION[9]).append(",")
                        .append(PROJECTION[10]).append(",")
                        .append(PROJECTION[11]).append(",")
                        .append(PROJECTION[12]).append(",")
                        .append(PROJECTION[13]).append(",")
                        .append(PROJECTION[14]).append(",")
                        .append(PROJECTION[15]).append(",")
                        .append(PROJECTION[16]).append(",")
                        .append(PROJECTION[17]).append(",")
                        .append(PROJECTION[18]).append(",")
                        .append(PROJECTION[19]).append(",")
                        .append(PROJECTION[20]).append(",")
                        .append(PROJECTION[21]).append(",")
                        .append(PROJECTION[22]).append(",")
                        .append(PROJECTION[23]).append(",")
                        .append(PROJECTION[24]).append(",")
                        .append(PROJECTION[25]).append(",")
                        .append(PROJECTION[26]).append(",")
                        .append(PROJECTION[27]).append(",")
                        .append(PROJECTION[28]).append(",")
                        .append(PROJECTION[29]);;
                newSelectColumn = oldSelectColumn;

                final String TEMP_TABLE_NAME = "temp_" + TABLE_NAME;
                db.execSQL("alter table " + TABLE_NAME + " rename to " + TEMP_TABLE_NAME);
                createTable(db);
                db.execSQL("insert into " + TABLE_NAME + "(" + newSelectColumn.toString() + ") select " + oldSelectColumn.toString() + " from " + TEMP_TABLE_NAME);
                db.execSQL("drop table " + TEMP_TABLE_NAME);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 3 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_SMALL.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.GENDER.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(", ").append(Columns.AT_COUNT.getName()).append(", ").append(Columns.FOLLOW_COUNT.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PHONE.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.ABOUTMETIME.getName()).append(", ").append(Columns.PROVINCE.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.AREA.getName()).append(", ").append(Columns.FROM_AREA.getName()).append(", ").append(Columns.GENDER_TA.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.IS_FOLLOW.getName()).append(", ").append(Columns.EXTCREDITS1.getName()).append(", ").append(Columns.EXTCREDITS2.getName()).append(", ").append(Columns.ROLE_NAME.getName()).append(", ").append(Columns.MY_QUN.getName()).append(", ").append(Columns.SUBSCRIBE.getName()).append(", ").append(Columns.EXTCREDITS3.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_SMALL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GENDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.AT_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FOLLOW_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTMETIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROVINCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.GENDER_TA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOLLOW.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.EXTCREDITS1.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.EXTCREDITS2.getName()));
            value = values.getAsString(Columns.ROLE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MY_QUN.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SUBSCRIBE.getName()));
            value = values.getAsString(Columns.EXTCREDITS3.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 3
     */
    public static final class table_circle_item extends dbContent {

        private static final String LOG_TAG = table_circle_item.class.getSimpleName();

        public static final String TABLE_NAME = "table_circle_item";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_circle_item";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_circle_item";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            QID("qid", "integer"),
            NAME("name", "text"),
            ICON("icon", "text"),
            MEMBER_NUM("member_num", "text"),
            THREAD_NUM("thread_num", "text"),
            DESC("desc", "text"),
            GVIEW_PERM("gview_perm", "integer"),
            JOIN_TYPE("join_type", "integer"),
            DATELINE("dateline", "text"),
            IS_QUN_MEMBER("is_qun_member", "integer"),
            IS_FOUNDER("is_founder", "integer"),
            FACE("face", "text"),
            NICKNAME("nickname", "text"),
            FOUNDERUID("founderuid", "text"),
            TOPIC_LIST("topic_list", "text"),
            ID("id", "text"),
            UID("uid", "text"),
            MESSAGE("message", "text"),
            ACTION("action", "integer"),
            IS_SLIP("is_slip", "integer"),
            APPLY_TIME("apply_time", "text"),
            ABOUTME("aboutme", "text"),
            LIST_SIZE("list_size", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_PAGE("local_page", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.QID.getName(),
                Columns.NAME.getName(),
                Columns.ICON.getName(),
                Columns.MEMBER_NUM.getName(),
                Columns.THREAD_NUM.getName(),
                Columns.DESC.getName(),
                Columns.GVIEW_PERM.getName(),
                Columns.JOIN_TYPE.getName(),
                Columns.DATELINE.getName(),
                Columns.IS_QUN_MEMBER.getName(),
                Columns.IS_FOUNDER.getName(),
                Columns.FACE.getName(),
                Columns.NICKNAME.getName(),
                Columns.FOUNDERUID.getName(),
                Columns.TOPIC_LIST.getName(),
                Columns.ID.getName(),
                Columns.UID.getName(),
                Columns.MESSAGE.getName(),
                Columns.ACTION.getName(),
                Columns.IS_SLIP.getName(),
                Columns.APPLY_TIME.getName(),
                Columns.ABOUTME.getName(),
                Columns.LIST_SIZE.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_PAGE.getName()
        };

        private table_circle_item() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.QID.getName() + " " + Columns.QID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.ICON.getName() + " " + Columns.ICON.getType() + ", " + Columns.MEMBER_NUM.getName() + " " + Columns.MEMBER_NUM.getType() + ", " + Columns.THREAD_NUM.getName() + " " + Columns.THREAD_NUM.getType() + ", " + Columns.DESC.getName() + " " + Columns.DESC.getType() + ", " + Columns.GVIEW_PERM.getName() + " " + Columns.GVIEW_PERM.getType() + ", " + Columns.JOIN_TYPE.getName() + " " + Columns.JOIN_TYPE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.IS_QUN_MEMBER.getName() + " " + Columns.IS_QUN_MEMBER.getType() + ", " + Columns.IS_FOUNDER.getName() + " " + Columns.IS_FOUNDER.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FOUNDERUID.getName() + " " + Columns.FOUNDERUID.getType() + ", " + Columns.TOPIC_LIST.getName() + " " + Columns.TOPIC_LIST.getType() + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.ACTION.getName() + " " + Columns.ACTION.getType() + ", " + Columns.IS_SLIP.getName() + " " + Columns.IS_SLIP.getType() + ", " + Columns.APPLY_TIME.getName() + " " + Columns.APPLY_TIME.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.LIST_SIZE.getName() + " " + Columns.LIST_SIZE.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ", UNIQUE (" + Columns.QID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.QID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.ICON.getName()).append(", ").append(Columns.MEMBER_NUM.getName()).append(", ").append(Columns.THREAD_NUM.getName()).append(", ").append(Columns.DESC.getName()).append(", ").append(Columns.GVIEW_PERM.getName()).append(", ").append(Columns.JOIN_TYPE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.IS_QUN_MEMBER.getName()).append(", ").append(Columns.IS_FOUNDER.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FOUNDERUID.getName()).append(", ").append(Columns.TOPIC_LIST.getName()).append(", ").append(Columns.ID.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.ACTION.getName()).append(", ").append(Columns.IS_SLIP.getName()).append(", ").append(Columns.APPLY_TIME.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.LIST_SIZE.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.QID.getName()));
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ICON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MEMBER_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THREAD_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GVIEW_PERM.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.JOIN_TYPE.getName()));
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_QUN_MEMBER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOUNDER.getName()));
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FOUNDERUID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TOPIC_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.ACTION.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIP.getName()));
            value = values.getAsString(Columns.APPLY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LIST_SIZE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
        }
    }
    /**
     * Created in version 3
     */
    public static final class table_circle_list extends dbContent {

        private static final String LOG_TAG = table_circle_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_circle_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_circle_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_circle_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            NAME("name", "text"),
            URL("url", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_MY_INDEX("local_my_index", "integer"),
            LOCAL_OTHER_INDEX("local_other_index", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.NAME.getName(),
                Columns.URL.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_MY_INDEX.getName(),
                Columns.LOCAL_OTHER_INDEX.getName()
        };

        private table_circle_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_MY_INDEX.getName() + " " + Columns.LOCAL_MY_INDEX.getType() + ", " + Columns.LOCAL_OTHER_INDEX.getName() + " " + Columns.LOCAL_OTHER_INDEX.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_list | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_list | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }
            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_MY_INDEX.getName()).append(", ").append(Columns.LOCAL_OTHER_INDEX.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_MY_INDEX.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_OTHER_INDEX.getName()));
        }
    }
    
    /**
     * Created in version 3
     */
    public static final class table_chat_conversation_list extends dbContent {

        private static final String LOG_TAG = table_chat_conversation_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_chat_conversation_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_chat_conversation_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_chat_conversation_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            CON_ID("con_id", "text"),
            CON_FACE("con_face", "text"),
            ROLE_NAME("role_name", "text"),
            CON_NAME("con_name", "text"),
            NEWEST_MSG("newest_msg", "text"),
            CON_MEMBERS("con_members", "text"),
            MSG_NO_READED_NUM("msg_no_readed_num", "text"),
            CREATOR("creator", "text"),
            UID("uid", "text"),
            UPDATE_TIME("update_time", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.CON_ID.getName(),
                Columns.CON_FACE.getName(),
                Columns.ROLE_NAME.getName(),
                Columns.CON_NAME.getName(),
                Columns.NEWEST_MSG.getName(),
                Columns.CON_MEMBERS.getName(),
                Columns.MSG_NO_READED_NUM.getName(),
                Columns.CREATOR.getName(),
                Columns.UID.getName(),
                Columns.UPDATE_TIME.getName()
        };

        private table_chat_conversation_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_conversation_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CON_ID.getName() + " " + Columns.CON_ID.getType() + ", " + Columns.CON_FACE.getName() + " " + Columns.CON_FACE.getType() + ", " + Columns.ROLE_NAME.getName() + " " + Columns.ROLE_NAME.getType() + ", " + Columns.CON_NAME.getName() + " " + Columns.CON_NAME.getType() + ", " + Columns.NEWEST_MSG.getName() + " " + Columns.NEWEST_MSG.getType() + ", " + Columns.CON_MEMBERS.getName() + " " + Columns.CON_MEMBERS.getType() + ", " + Columns.MSG_NO_READED_NUM.getName() + " " + Columns.MSG_NO_READED_NUM.getType() + ", " + Columns.CREATOR.getName() + " " + Columns.CREATOR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.UPDATE_TIME.getName() + " " + Columns.UPDATE_TIME.getType() + ", UNIQUE (" + Columns.CON_ID.getName() + ", " + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_conversation_list | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_conversation_list | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }
            
            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_conversation_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CON_ID.getName()).append(", ").append(Columns.CON_FACE.getName()).append(", ").append(Columns.ROLE_NAME.getName()).append(", ").append(Columns.CON_NAME.getName()).append(", ").append(Columns.NEWEST_MSG.getName()).append(", ").append(Columns.CON_MEMBERS.getName()).append(", ").append(Columns.MSG_NO_READED_NUM.getName()).append(", ").append(Columns.CREATOR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.UPDATE_TIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CON_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CON_FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ROLE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CON_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NEWEST_MSG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CON_MEMBERS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSG_NO_READED_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATOR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UPDATE_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 3
     */
    public static final class table_chat_message_list extends dbContent {

        private static final String LOG_TAG = table_chat_message_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_chat_message_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_chat_message_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_chat_message_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "text"),
            CON_ID("con_id", "text"),
            MSG_FROM("msg_from", "text"),
            FACE("face", "text"),
            CONTENT("content", "text"),
            TIME("time", "text"),
            MSG_TYPE("msg_type", "integer"),
            MSG_ID("msg_id", "text"),
            MSG_STATUS("msg_status", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.CON_ID.getName(),
                Columns.MSG_FROM.getName(),
                Columns.FACE.getName(),
                Columns.CONTENT.getName(),
                Columns.TIME.getName(),
                Columns.MSG_TYPE.getName(),
                Columns.MSG_ID.getName(),
                Columns.MSG_STATUS.getName()
        };

        private table_chat_message_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_message_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CON_ID.getName() + " " + Columns.CON_ID.getType() + ", " + Columns.MSG_FROM.getName() + " " + Columns.MSG_FROM.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " + Columns.MSG_TYPE.getName() + " " + Columns.MSG_TYPE.getType() + ", " + Columns.MSG_ID.getName() + " " + Columns.MSG_ID.getType() + ", " + Columns.MSG_STATUS.getName() + " " + Columns.MSG_STATUS.getType() + ", UNIQUE (" + Columns.MSG_ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_message_list | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_message_list | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }
            
            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_chat_message_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.CON_ID.getName()).append(", ").append(Columns.MSG_FROM.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.TIME.getName()).append(", ").append(Columns.MSG_TYPE.getName()).append(", ").append(Columns.MSG_ID.getName()).append(", ").append(Columns.MSG_STATUS.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CON_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSG_FROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSG_TYPE.getName()));
            value = values.getAsString(Columns.MSG_ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSG_STATUS.getName()));
        }
    }
    /**
     * Created in version 3
     */
    public static final class table_circle_item_home extends dbContent {

        private static final String LOG_TAG = table_circle_item_home.class.getSimpleName();

        public static final String TABLE_NAME = "table_circle_item_home";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_circle_item_home";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_circle_item_home";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            NAME("name", "text"),
            ICON("icon", "text"),
            MEMBER_NUM("member_num", "text"),
            THREAD_NUM("thread_num", "text"),
            DESC("desc", "text"),
            GVIEW_PERM("gview_perm", "integer"),
            JOIN_TYPE("join_type", "integer"),
            DATELINE("dateline", "text"),
            IS_QUN_MEMBER("is_qun_member", "integer"),
            IS_FOUNDER("is_founder", "integer"),
            FACE("face", "text"),
            NICKNAME("nickname", "text"),
            FOUNDERUID("founderuid", "text"),
            TOPIC_LIST("topic_list", "text"),
            ID("id", "text"),
            UID("uid", "text"),
            MESSAGE("message", "text"),
            ACTION("action", "integer"),
            IS_SLIP("is_slip", "integer"),
            APPLY_TIME("apply_time", "text"),
            ABOUTME("aboutme", "text"),
            LIST_SIZE("list_size", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_PAGE("local_page", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.NAME.getName(),
                Columns.ICON.getName(),
                Columns.MEMBER_NUM.getName(),
                Columns.THREAD_NUM.getName(),
                Columns.DESC.getName(),
                Columns.GVIEW_PERM.getName(),
                Columns.JOIN_TYPE.getName(),
                Columns.DATELINE.getName(),
                Columns.IS_QUN_MEMBER.getName(),
                Columns.IS_FOUNDER.getName(),
                Columns.FACE.getName(),
                Columns.NICKNAME.getName(),
                Columns.FOUNDERUID.getName(),
                Columns.TOPIC_LIST.getName(),
                Columns.ID.getName(),
                Columns.UID.getName(),
                Columns.MESSAGE.getName(),
                Columns.ACTION.getName(),
                Columns.IS_SLIP.getName(),
                Columns.APPLY_TIME.getName(),
                Columns.ABOUTME.getName(),
                Columns.LIST_SIZE.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_PAGE.getName()
        };

        private table_circle_item_home() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item_home | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.ICON.getName() + " " + Columns.ICON.getType() + ", " + Columns.MEMBER_NUM.getName() + " " + Columns.MEMBER_NUM.getType() + ", " + Columns.THREAD_NUM.getName() + " " + Columns.THREAD_NUM.getType() + ", " + Columns.DESC.getName() + " " + Columns.DESC.getType() + ", " + Columns.GVIEW_PERM.getName() + " " + Columns.GVIEW_PERM.getType() + ", " + Columns.JOIN_TYPE.getName() + " " + Columns.JOIN_TYPE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.IS_QUN_MEMBER.getName() + " " + Columns.IS_QUN_MEMBER.getType() + ", " + Columns.IS_FOUNDER.getName() + " " + Columns.IS_FOUNDER.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FOUNDERUID.getName() + " " + Columns.FOUNDERUID.getType() + ", " + Columns.TOPIC_LIST.getName() + " " + Columns.TOPIC_LIST.getType() + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.ACTION.getName() + " " + Columns.ACTION.getType() + ", " + Columns.IS_SLIP.getName() + " " + Columns.IS_SLIP.getType() + ", " + Columns.APPLY_TIME.getName() + " " + Columns.APPLY_TIME.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.LIST_SIZE.getName() + " " + Columns.LIST_SIZE.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item_home | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item_home | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }
            
            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_item_home | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.NAME.getName()).append(", ").append(Columns.ICON.getName()).append(", ").append(Columns.MEMBER_NUM.getName()).append(", ").append(Columns.THREAD_NUM.getName()).append(", ").append(Columns.DESC.getName()).append(", ").append(Columns.GVIEW_PERM.getName()).append(", ").append(Columns.JOIN_TYPE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.IS_QUN_MEMBER.getName()).append(", ").append(Columns.IS_FOUNDER.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FOUNDERUID.getName()).append(", ").append(Columns.TOPIC_LIST.getName()).append(", ").append(Columns.ID.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.ACTION.getName()).append(", ").append(Columns.IS_SLIP.getName()).append(", ").append(Columns.APPLY_TIME.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.LIST_SIZE.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ICON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MEMBER_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THREAD_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GVIEW_PERM.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.JOIN_TYPE.getName()));
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_QUN_MEMBER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOUNDER.getName()));
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FOUNDERUID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TOPIC_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.ACTION.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIP.getName()));
            value = values.getAsString(Columns.APPLY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LIST_SIZE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
        }
    }
    
    /**
     * Created in version 5
     */
    public static final class table_circle_channel_item extends dbContent {

        private static final String LOG_TAG = table_circle_channel_item.class.getSimpleName();

        public static final String TABLE_NAME = "table_circle_channel_item";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_circle_channel_item";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_circle_channel_item";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            LIST("list", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_PAGE("local_page", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.LIST.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_PAGE.getName()
        };

        private table_circle_channel_item() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_item | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.LIST.getName() + " " + Columns.LIST.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_item | createTable end");
            }
        }

        // Version 5 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_item | upgradeTable start");
            }

            if (oldVersion < 5) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_item | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.LIST.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
        }
    }

    /**
     * Created in version 5
     */
    public static final class table_circle_channel_list extends dbContent {

        private static final String LOG_TAG = table_circle_channel_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_circle_channel_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_circle_channel_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_circle_channel_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            NAME("name", "text"),
            URL("url", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.NAME.getName(),
                Columns.URL.getName()
        };

        private table_circle_channel_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_list | createTable end");
            }
        }

        // Version 5 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_list | upgradeTable start");
            }

            if (oldVersion < 5) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
            }

            if (oldVersion < newVersion) {
                // No more changes since version 2 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_circle_channel_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.URL.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

}


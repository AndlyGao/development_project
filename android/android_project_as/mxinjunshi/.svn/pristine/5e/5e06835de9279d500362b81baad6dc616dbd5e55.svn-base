package com.ikantech.military.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.content.ComponentName;
import android.content.ContentUris;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.res.ColorStateList;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TextView;

import com.ikantech.military.entity.CompareList;
import com.ikantech.military.entity.WeaponItem;
import com.ikantech.military.provider.impl.WeaponManager.WeaponColumns;
import com.ikantech.support.ui.YiUIBaseActivity;
import com.ikantech.support.utils.YiPrefsKeeper;
import com.shenyuan.militarynews.R;
import com.shenyuan.militarynews.SettingManager;
import com.shenyuan.militarynews.utils.Common;

public class CompareManagerActivity extends YiUIBaseActivity
		implements View.OnClickListener {
	private View mEditModeView;
	private Button mRightBtn;
	private TextView mTipTextView;
	private Button mCompareBtn;
	private Button mDelBtn;
	private Button mClearBtn;

	private boolean mIsEditMode;
	private CompareList mCompareList;
	private List<Integer> mLists;
	private Map<Integer, WeaponItem> mWeaponMap;
	private NativeAdapter mAdapter;
	private ListView mListView;

	private List<Integer> mNormalIntegers;
	private List<Integer> mEditIntegers;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_compare_manager);
		super.onCreate(savedInstanceState);
	}

	@Override
	public void processHandlerMessage(Message msg) {
		switch (msg.what) {
		case 0x01:
			mAdapter.notifyDataSetChanged();
			break;
		case 0x02:
			mTipTextView.setTextColor(Color.BLACK);
			break;
		default:
			break;
		}
	}

	@Override
	protected void initViews() {
		// TODO Auto-generated method stub
		mEditModeView = findViewById(R.id.com_mag_edit);
		mRightBtn = (Button) findViewById(R.id.com_mag_right_btn);
		mListView = (ListView) findViewById(R.id.com_mag_listview);
		mTipTextView = (TextView) findViewById(R.id.com_mag_tip);
		mCompareBtn = (Button) findViewById(R.id.com_mag_compare_btn);
		mDelBtn = (Button) findViewById(R.id.com_mag_del_btn);
		mClearBtn = (Button) findViewById(R.id.com_mag_clear_btn);

	}

	@Override
	protected void initDatas() {
		// TODO Auto-generated method stub
		mIsEditMode = false;

		mCompareList = new CompareList();
		YiPrefsKeeper.read(CompareManagerActivity.this, mCompareList);

		mLists = new ArrayList<Integer>();
		mNormalIntegers = new ArrayList<Integer>();
		mEditIntegers = new ArrayList<Integer>();
		mWeaponMap = new HashMap<Integer, WeaponItem>();

		mAdapter = new NativeAdapter();
		mListView.setAdapter(mAdapter);
	}

	@Override
	protected void installListeners() {
		// TODO Auto-generated method stub
		mClearBtn.setOnClickListener(this);
		mDelBtn.setOnClickListener(this);
		mCompareBtn.setOnClickListener(this);

		installLocalServiceBinder(new ServiceConnection() {

			@Override
			public void onServiceDisconnected(ComponentName name) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onServiceConnected(ComponentName name, IBinder service) {
				// TODO Auto-generated method stub

				mLists = mCompareList.getCompareList();
				try {
					for (Integer integer : mLists) {
						getLocalService().execute(
								new LoadWeaponRunnable(integer));
					}
					getHandler().sendEmptyMessage(0x01);
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		});

		mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				Integer integer = (Integer) mAdapter.getItem(arg2);
				if (integer == null)
					return;

				if (mIsEditMode) {
					if (mEditIntegers.contains(integer)) {
						mEditIntegers.remove(integer);
					} else {
						mEditIntegers.add(integer);
					}
					if (mEditIntegers.size() > 0) {
						mDelBtn.setEnabled(true);
					} else {
						mDelBtn.setEnabled(false);
					}
				} else {
					if (mNormalIntegers.contains(integer)) {
						mNormalIntegers.remove(integer);
					} else {
						if (mNormalIntegers.size() == 2) {
							mTipTextView.setTextColor(Color.RED);
							getHandler().sendEmptyMessageDelayed(0x02, 1000);
						} else {
							mNormalIntegers.add(integer);
						}
					}
					if (mNormalIntegers.size() == 2) {
						mCompareBtn.setEnabled(true);
					} else {
						mCompareBtn.setEnabled(false);
					}
				}

				mAdapter.notifyDataSetChanged();
			}
		});
	}

	@Override
	protected void uninstallListeners() {
		// TODO Auto-generated method stub
		uninstallLocalServiceBinder();
	}

	public void onReturnBtnClick(View view) {
		finish();
	}

	public void onRightBtnClick(View view) {
		if (mIsEditMode) {
			mEditModeView.setVisibility(View.GONE);
			mEditModeView.startAnimation(AnimationUtils.loadAnimation(this,
					R.anim.down));
			mRightBtn.setText(R.string.str_compare_edit);
			mEditIntegers.clear();
			mDelBtn.setEnabled(false);
			mCompareBtn.setEnabled(false);
			mAdapter.notifyDataSetChanged();
			mIsEditMode = false;
		} else {
			mEditModeView.setVisibility(View.VISIBLE);
			mEditModeView.startAnimation(AnimationUtils.loadAnimation(this,
					R.anim.up));
			mRightBtn.setText(R.string.str_compare_complete);
			mNormalIntegers.clear();
			mDelBtn.setEnabled(false);
			mCompareBtn.setEnabled(false);
			mAdapter.notifyDataSetChanged();
			mIsEditMode = true;
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		int id = v.getId();
		if(id == R.id.com_mag_compare_btn)
		{ 
			Intent intent = new Intent(CompareManagerActivity.this,
					CompareActivity.class);
			intent.putExtra("id1", mNormalIntegers.get(0));
			intent.putExtra("id2", mNormalIntegers.get(1));
			startActivity(intent);
		}else if(id ==R.id.com_mag_clear_btn){
			showMsgDialog(null, getString(R.string.str_clear_confirm),
					getString(R.string.str_ok), getString(R.string.str_cancel),
					new View.OnClickListener() {
						@Override
						public void onClick(View v) {
							mEditIntegers.clear();
							mLists.clear();
							mCompareList.setList(mLists);
							YiPrefsKeeper.write(CompareManagerActivity.this,
									mCompareList);
							mAdapter.notifyDataSetChanged();
						}
					}, null);
		}if(id == R.id.com_mag_del_btn)
		{ 
			for (int i = 0; i < mEditIntegers.size(); i++) {
				mLists.remove(mEditIntegers.get(i));
			}
			mEditIntegers.clear();
			mCompareList.setList(mLists);
			YiPrefsKeeper.write(CompareManagerActivity.this, mCompareList);
			mAdapter.notifyDataSetChanged();
			 
		}
	}

	private class LoadWeaponRunnable implements Runnable {
		private Integer mInteger;

		public LoadWeaponRunnable(Integer integer) {
			mInteger = integer;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			Cursor cursor = getContentResolver().query(
					ContentUris.withAppendedId(WeaponColumns.CONTENT_URI,
							mInteger.intValue()),
					new String[] { WeaponColumns.NAME }, null, null, null);
			try {
				if (cursor != null && cursor.getCount() > 0) {
					cursor.moveToFirst();
					WeaponItem item = new WeaponItem(mInteger.intValue());
					item.setName(cursor.getString(0));
					synchronized (mWeaponMap) {
						mWeaponMap.put(mInteger, item);
					}
					getHandler().sendEmptyMessage(0x01);
				}
			} catch (Exception e) {
				// TODO: handle exception
			} finally {
				if (cursor != null) {
					cursor.close();
					cursor = null;
				}
			}
		}
	}

	private class NativeAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return mLists.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			if (position < 0 || position > mLists.size() - 1) {
				return null;
			}
			return mLists.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder holder = null;
			if (convertView == null) {
				holder = new ViewHolder();
				convertView = LayoutInflater.from(CompareManagerActivity.this)
						.inflate(R.layout.com_mag_item, null);

				holder.mCheckBox = (CheckBox) convertView
						.findViewById(R.id.com_mag_checkbox);

				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}

			Integer integer = (Integer) getItem(position);
			if (integer == null) {
				return convertView;
			}

			WeaponItem item = mWeaponMap.get(integer);
			if (item != null) {
				holder.mCheckBox.setText(item.getName());
			}

			try {
				if (Common.isTrue(SettingManager.getInst().getNightModel())) {
					holder.mCheckBox.setTextColor(ColorStateList.createFromXml(
							getResources(),
							getResources().getXml(
									R.color.com_mag_txt_night_selector)));
				} else {
					holder.mCheckBox.setTextColor(ColorStateList
							.createFromXml(getResources(), getResources()
									.getXml(R.color.com_mag_txt_selector)));
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			holder.mCheckBox.setEnabled(true);
			if (mIsEditMode) {
				if (mEditIntegers.contains(integer)) {
					holder.mCheckBox.setChecked(true);
				} else {
					holder.mCheckBox.setChecked(false);
				}
			} else {
				if (mNormalIntegers.contains(integer)) {
					holder.mCheckBox.setChecked(true);
				} else {
					if (mNormalIntegers.size() == 2) {
						holder.mCheckBox.setEnabled(false);
					}
					holder.mCheckBox.setChecked(false);
				}
			}

			return convertView;
		}

		private class ViewHolder {
			CheckBox mCheckBox;
		}
	}
}

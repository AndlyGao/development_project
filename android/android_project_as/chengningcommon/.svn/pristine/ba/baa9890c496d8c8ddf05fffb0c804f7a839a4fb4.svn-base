package com.chengning.fenghuovideo.db.provider;

import com.chengning.fenghuovideo.db.provider.util.ColumnMetadata;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class dbContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + dbProvider.AUTHORITY);

    private dbContent() {
    }

    /**
     * Created in version 1
     */
    public static final class table_login extends dbContent {

        private static final String LOG_TAG = table_login.class.getSimpleName();

        public static final String TABLE_NAME = "table_login";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_login";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_login";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            USERINFO("userinfo", "text"),
            COOKIE("cookie", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.USERINFO.getName(),
                Columns.COOKIE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_login() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.USERINFO.getName() + " " + Columns.USERINFO.getType() + ", " + Columns.COOKIE.getName() + " " + Columns.COOKIE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.USERINFO.getName()).append(", ").append(Columns.COOKIE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.USERINFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COOKIE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_setting extends dbContent {

        private static final String LOG_TAG = table_setting.class.getSimpleName();

        public static final String TABLE_NAME = "table_setting";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_setting";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_setting";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            IS_PUSH("is_push", "integer"),
            FONTSIZE("fontsize", "integer"),
            LASTTIME("lasttime", "text"),
            IS_NO_PIC_MODEL("is_no_pic_model", "integer"),
            IS_NIGHT_MODEL("is_night_model", "integer"),
            CONFIG_PUSH_START_TIME("config_push_start_time", "text"),
            CONFIG_PUSH_END_TIME("config_push_end_time", "text"),
            CONFIG_PUSH_ENABLE("config_push_enable", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.IS_PUSH.getName(),
                Columns.FONTSIZE.getName(),
                Columns.LASTTIME.getName(),
                Columns.IS_NO_PIC_MODEL.getName(),
                Columns.IS_NIGHT_MODEL.getName(),
                Columns.CONFIG_PUSH_START_TIME.getName(),
                Columns.CONFIG_PUSH_END_TIME.getName(),
                Columns.CONFIG_PUSH_ENABLE.getName()
        };

        private table_setting() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.IS_PUSH.getName() + " " + Columns.IS_PUSH.getType() + ", " + Columns.FONTSIZE.getName() + " " + Columns.FONTSIZE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.IS_NO_PIC_MODEL.getName() + " " + Columns.IS_NO_PIC_MODEL.getType() + ", " + Columns.IS_NIGHT_MODEL.getName() + " " + Columns.IS_NIGHT_MODEL.getType() + ", " + Columns.CONFIG_PUSH_START_TIME.getName() + " " + Columns.CONFIG_PUSH_START_TIME.getType() + ", " + Columns.CONFIG_PUSH_END_TIME.getName() + " " + Columns.CONFIG_PUSH_END_TIME.getType() + ", " + Columns.CONFIG_PUSH_ENABLE.getName() + " " + Columns.CONFIG_PUSH_ENABLE.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.IS_PUSH.getName()).append(", ").append(Columns.FONTSIZE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.IS_NO_PIC_MODEL.getName()).append(", ").append(Columns.IS_NIGHT_MODEL.getName()).append(", ").append(Columns.CONFIG_PUSH_START_TIME.getName()).append(", ").append(Columns.CONFIG_PUSH_END_TIME.getName()).append(", ").append(Columns.CONFIG_PUSH_ENABLE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.IS_PUSH.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FONTSIZE.getName()));
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NO_PIC_MODEL.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NIGHT_MODEL.getName()));
            value = values.getAsString(Columns.CONFIG_PUSH_START_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CONFIG_PUSH_END_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_ENABLE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_local_state extends dbContent {

        private static final String LOG_TAG = table_local_state.class.getSimpleName();

        public static final String TABLE_NAME = "table_local_state";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_local_state";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_local_state";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            LASTTIME("lasttime", "text"),
            READ_STATE("read_state", "text"),
            FAVORITE_STATE("favorite_state", "integer"),
            LIKE_STATE("like_state", "integer"),
            DATA_ITEM("data_item", "text"),
            DATA_ITEM_ARTICLE("data_item_article", "text"),
            COLLECT_TIME("collect_time", "text"),
            COLLECT_TYPE("collect_type", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.LASTTIME.getName(),
                Columns.READ_STATE.getName(),
                Columns.FAVORITE_STATE.getName(),
                Columns.LIKE_STATE.getName(),
                Columns.DATA_ITEM.getName(),
                Columns.DATA_ITEM_ARTICLE.getName(),
                Columns.COLLECT_TIME.getName(),
                Columns.COLLECT_TYPE.getName()
        };

        private table_local_state() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", " + Columns.READ_STATE.getName() + " " + Columns.READ_STATE.getType() + ", " + Columns.FAVORITE_STATE.getName() + " " + Columns.FAVORITE_STATE.getType() + ", " + Columns.LIKE_STATE.getName() + " " + Columns.LIKE_STATE.getType() + ", " + Columns.DATA_ITEM.getName() + " " + Columns.DATA_ITEM.getType() + ", " + Columns.DATA_ITEM_ARTICLE.getName() + " " + Columns.DATA_ITEM_ARTICLE.getType() + ", " + Columns.COLLECT_TIME.getName() + " " + Columns.COLLECT_TIME.getType() + ", " + Columns.COLLECT_TYPE.getName() + " " + Columns.COLLECT_TYPE.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.LASTTIME.getName()).append(", ").append(Columns.READ_STATE.getName()).append(", ").append(Columns.FAVORITE_STATE.getName()).append(", ").append(Columns.LIKE_STATE.getName()).append(", ").append(Columns.DATA_ITEM.getName()).append(", ").append(Columns.DATA_ITEM_ARTICLE.getName()).append(", ").append(Columns.COLLECT_TIME.getName()).append(", ").append(Columns.COLLECT_TYPE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.READ_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.FAVORITE_STATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LIKE_STATE.getName()));
            value = values.getAsString(Columns.DATA_ITEM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATA_ITEM_ARTICLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COLLECT_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.COLLECT_TYPE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_channel_item extends dbContent {

        private static final String LOG_TAG = table_channel_item.class.getSimpleName();

        public static final String TABLE_NAME = "table_channel_item";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_channel_item";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_channel_item";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            TID("tid", "text"),
            NICKNAME("nickname", "text"),
            DATELINE("dateline", "text"),
            REPLYS("replys", "integer"),
            TITLE("title", "text"),
            IMAGE_LIST("image_list", "text"),
            LOCAL_CHANNEL("local_channel", "text"),
            LOCAL_PAGE("local_page", "integer"),
            TYPE("type", "integer"),
            URL("url", "text"),
            UID("uid", "text"),
            FACE("face", "text"),
            CONTENT_TYPE("content_type", "text"),
            REDIRECTURL("redirecturl", "text"),
            LIST_FROM("list_from", "text"),
            VIDEO_ADDRESS("video_address", "text"),
            VIDEOID("videoid", "text"),
            IS_DIG("is_dig", "integer"),
            LINK("link", "text"),
            DIGCOUNTS("digcounts", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.DATELINE.getName(),
                Columns.REPLYS.getName(),
                Columns.TITLE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.LOCAL_CHANNEL.getName(),
                Columns.LOCAL_PAGE.getName(),
                Columns.TYPE.getName(),
                Columns.URL.getName(),
                Columns.UID.getName(),
                Columns.FACE.getName(),
                Columns.CONTENT_TYPE.getName(),
                Columns.REDIRECTURL.getName(),
                Columns.LIST_FROM.getName(),
                Columns.VIDEO_ADDRESS.getName(),
                Columns.VIDEOID.getName(),
                Columns.IS_DIG.getName(),
                Columns.LINK.getName(),
                Columns.DIGCOUNTS.getName()
        };

        private table_channel_item() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.LOCAL_CHANNEL.getName() + " " + Columns.LOCAL_CHANNEL.getType() + ", " + Columns.LOCAL_PAGE.getName() + " " + Columns.LOCAL_PAGE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.CONTENT_TYPE.getName() + " " + Columns.CONTENT_TYPE.getType() + ", " + Columns.REDIRECTURL.getName() + " " + Columns.REDIRECTURL.getType() + ", " + Columns.LIST_FROM.getName() + " " + Columns.LIST_FROM.getType() + ", " + Columns.VIDEO_ADDRESS.getName() + " " + Columns.VIDEO_ADDRESS.getType() + ", " + Columns.VIDEOID.getName() + " " + Columns.VIDEOID.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.LINK.getName() + " " + Columns.LINK.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_item | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.LOCAL_CHANNEL.getName()).append(", ").append(Columns.LOCAL_PAGE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.CONTENT_TYPE.getName()).append(", ").append(Columns.REDIRECTURL.getName()).append(", ").append(Columns.LIST_FROM.getName()).append(", ").append(Columns.VIDEO_ADDRESS.getName()).append(", ").append(Columns.VIDEOID.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.LINK.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.TID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_PAGE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TYPE.getName()));
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CONTENT_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.REDIRECTURL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LIST_FROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIDEO_ADDRESS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIDEOID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.LINK.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DIGCOUNTS.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_channel_list extends dbContent {

        private static final String LOG_TAG = table_channel_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_channel_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_channel_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_channel_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            NAME("name", "text"),
            URL("url", "text"),
            PIC("pic", "text"),
            LOCAL_TYPE("local_type", "text"),
            LOCAL_MY_INDEX("local_my_index", "integer"),
            LOCAL_OTHER_INDEX("local_other_index", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.NAME.getName(),
                Columns.URL.getName(),
                Columns.PIC.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_MY_INDEX.getName(),
                Columns.LOCAL_OTHER_INDEX.getName()
        };

        private table_channel_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.PIC.getName() + " " + Columns.PIC.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_MY_INDEX.getName() + " " + Columns.LOCAL_MY_INDEX.getType() + ", " + Columns.LOCAL_OTHER_INDEX.getName() + " " + Columns.LOCAL_OTHER_INDEX.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_channel_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.PIC.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_MY_INDEX.getName()).append(", ").append(Columns.LOCAL_OTHER_INDEX.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_MY_INDEX.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_OTHER_INDEX.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_userinfo_other extends dbContent {

        private static final String LOG_TAG = table_userinfo_other.class.getSimpleName();

        public static final String TABLE_NAME = "table_userinfo_other";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_userinfo_other";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_userinfo_other";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            USERNAME("username", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_SMALL("face_small", "text"),
            FACE_ORIGINAL("face_original", "text"),
            GENDER("gender", "integer"),
            TOPIC_COUNT("topic_count", "integer"),
            AT_COUNT("at_count", "integer"),
            FOLLOW_COUNT("follow_count", "integer"),
            FANS_COUNT("fans_count", "integer"),
            EMAIL("email", "text"),
            PHONE("phone", "text"),
            ABOUTME("aboutme", "text"),
            ABOUTMETIME("aboutmetime", "text"),
            PROVINCE("province", "text"),
            CITY("city", "text"),
            AREA("area", "text"),
            FROM_AREA("from_area", "text"),
            GENDER_TA("gender_ta", "text"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            IS_FOLLOW("is_follow", "integer"),
            EXTCREDITS1("extcredits1", "integer"),
            EXTCREDITS2("extcredits2", "integer"),
            ROLE_NAME("role_name", "text"),
            SUBSCRIBE("subscribe", "integer"),
            EXTCREDITS3("extcredits3", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.USERNAME.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_SMALL.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.GENDER.getName(),
                Columns.TOPIC_COUNT.getName(),
                Columns.AT_COUNT.getName(),
                Columns.FOLLOW_COUNT.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.EMAIL.getName(),
                Columns.PHONE.getName(),
                Columns.ABOUTME.getName(),
                Columns.ABOUTMETIME.getName(),
                Columns.PROVINCE.getName(),
                Columns.CITY.getName(),
                Columns.AREA.getName(),
                Columns.FROM_AREA.getName(),
                Columns.GENDER_TA.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.IS_FOLLOW.getName(),
                Columns.EXTCREDITS1.getName(),
                Columns.EXTCREDITS2.getName(),
                Columns.ROLE_NAME.getName(),
                Columns.SUBSCRIBE.getName(),
                Columns.EXTCREDITS3.getName()
        };

        private table_userinfo_other() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_SMALL.getName() + " " + Columns.FACE_SMALL.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.GENDER.getName() + " " + Columns.GENDER.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ", " + Columns.AT_COUNT.getName() + " " + Columns.AT_COUNT.getType() + ", " + Columns.FOLLOW_COUNT.getName() + " " + Columns.FOLLOW_COUNT.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PHONE.getName() + " " + Columns.PHONE.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.ABOUTMETIME.getName() + " " + Columns.ABOUTMETIME.getType() + ", " + Columns.PROVINCE.getName() + " " + Columns.PROVINCE.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.AREA.getName() + " " + Columns.AREA.getType() + ", " + Columns.FROM_AREA.getName() + " " + Columns.FROM_AREA.getType() + ", " + Columns.GENDER_TA.getName() + " " + Columns.GENDER_TA.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.IS_FOLLOW.getName() + " " + Columns.IS_FOLLOW.getType() + ", " + Columns.EXTCREDITS1.getName() + " " + Columns.EXTCREDITS1.getType() + ", " + Columns.EXTCREDITS2.getName() + " " + Columns.EXTCREDITS2.getType() + ", " + Columns.ROLE_NAME.getName() + " " + Columns.ROLE_NAME.getType() + ", " + Columns.SUBSCRIBE.getName() + " " + Columns.SUBSCRIBE.getType() + ", " + Columns.EXTCREDITS3.getName() + " " + Columns.EXTCREDITS3.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_SMALL.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.GENDER.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(", ").append(Columns.AT_COUNT.getName()).append(", ").append(Columns.FOLLOW_COUNT.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PHONE.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.ABOUTMETIME.getName()).append(", ").append(Columns.PROVINCE.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.AREA.getName()).append(", ").append(Columns.FROM_AREA.getName()).append(", ").append(Columns.GENDER_TA.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.IS_FOLLOW.getName()).append(", ").append(Columns.EXTCREDITS1.getName()).append(", ").append(Columns.EXTCREDITS2.getName()).append(", ").append(Columns.ROLE_NAME.getName()).append(", ").append(Columns.SUBSCRIBE.getName()).append(", ").append(Columns.EXTCREDITS3.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_SMALL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GENDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.AT_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FOLLOW_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTMETIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROVINCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.GENDER_TA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOLLOW.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.EXTCREDITS1.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.EXTCREDITS2.getName()));
            value = values.getAsString(Columns.ROLE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SUBSCRIBE.getName()));
            value = values.getAsString(Columns.EXTCREDITS3.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}


package com.chengning.fenghuo.provider;

import com.chengning.fenghuo.provider.dbContent.table_login;
import com.chengning.fenghuo.provider.dbContent.table_setting;
import com.chengning.fenghuo.provider.dbContent.jrttchannel;
import com.chengning.fenghuo.provider.dbContent.table_my_message_list;
import com.chengning.fenghuo.provider.dbContent.table_my_strangers_message_list;
import com.chengning.fenghuo.provider.dbContent.messagelisttable;
import com.chengning.fenghuo.provider.dbContent.chattable;
import com.chengning.fenghuo.provider.dbContent.table_contacts;
import com.chengning.fenghuo.provider.dbContent.table_recent_contacts;
import com.chengning.fenghuo.provider.dbContent.table_userinfo_other;
import com.chengning.fenghuo.provider.dbContent.tablepart;
import com.chengning.fenghuo.provider.dbContent.tablenews;
import com.chengning.fenghuo.provider.dbContent.table_dynamic_list;
import com.chengning.fenghuo.provider.dbContent.table_discovery_tuijian;
import com.chengning.fenghuo.provider.dbContent.table_discovery_remen;
import com.chengning.fenghuo.provider.dbContent.table_discovery_zuixin;
import com.chengning.fenghuo.provider.dbContent.table_subscribe_group;
import com.chengning.fenghuo.provider.dbContent.draftlist;
import com.chengning.fenghuo.provider.dbContent.hotfollow;
import com.chengning.fenghuo.provider.dbContent.table_user_group;
import com.chengning.fenghuo.provider.dbContent.table_user_group_in_dynamic;
import com.chengning.fenghuo.provider.dbContent.topicnews;
import com.chengning.fenghuo.provider.dbContent.circle;
import com.chengning.fenghuo.provider.dbContent.table_local_state;

import android.content.ContentProvider;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import java.util.ArrayList;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public final class dbProvider extends ContentProvider {

    private static final String LOG_TAG = dbProvider.class.getSimpleName();

    /* package */ static final boolean ACTIVATE_ALL_LOGS = false;

    protected static final String DATABASE_NAME = "dbProvider.db";

    public static final String AUTHORITY = "com.chengning.fenghuo.provider.dbProvider";

    static {
        Uri.parse("content://" + AUTHORITY + "/integrityCheck");
    }

    // Version 1 : Creation of the database
    // Version 2 : No changes
    // Version 3 : Add table table_dynamic_list
    public static final int DATABASE_VERSION = 3;

    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private enum UriType {
        TABLE_LOGIN(table_login.TABLE_NAME, table_login.TABLE_NAME, table_login.TYPE_ELEM_TYPE),
        TABLE_LOGIN_ID(table_login.TABLE_NAME + "/#", table_login.TABLE_NAME, table_login.TYPE_DIR_TYPE),
        TABLE_SETTING(table_setting.TABLE_NAME, table_setting.TABLE_NAME, table_setting.TYPE_ELEM_TYPE),
        TABLE_SETTING_ID(table_setting.TABLE_NAME + "/#", table_setting.TABLE_NAME, table_setting.TYPE_DIR_TYPE),
        JRTTCHANNEL(jrttchannel.TABLE_NAME, jrttchannel.TABLE_NAME, jrttchannel.TYPE_ELEM_TYPE),
        JRTTCHANNEL_ID(jrttchannel.TABLE_NAME + "/#", jrttchannel.TABLE_NAME, jrttchannel.TYPE_DIR_TYPE),
        TABLE_MY_MESSAGE_LIST(table_my_message_list.TABLE_NAME, table_my_message_list.TABLE_NAME, table_my_message_list.TYPE_ELEM_TYPE),
        TABLE_MY_MESSAGE_LIST_ID(table_my_message_list.TABLE_NAME + "/#", table_my_message_list.TABLE_NAME, table_my_message_list.TYPE_DIR_TYPE),
        TABLE_MY_STRANGERS_MESSAGE_LIST(table_my_strangers_message_list.TABLE_NAME, table_my_strangers_message_list.TABLE_NAME, table_my_strangers_message_list.TYPE_ELEM_TYPE),
        TABLE_MY_STRANGERS_MESSAGE_LIST_ID(table_my_strangers_message_list.TABLE_NAME + "/#", table_my_strangers_message_list.TABLE_NAME, table_my_strangers_message_list.TYPE_DIR_TYPE),
        MESSAGELISTTABLE(messagelisttable.TABLE_NAME, messagelisttable.TABLE_NAME, messagelisttable.TYPE_ELEM_TYPE),
        MESSAGELISTTABLE_ID(messagelisttable.TABLE_NAME + "/#", messagelisttable.TABLE_NAME, messagelisttable.TYPE_DIR_TYPE),
        CHATTABLE(chattable.TABLE_NAME, chattable.TABLE_NAME, chattable.TYPE_ELEM_TYPE),
        CHATTABLE_ID(chattable.TABLE_NAME + "/#", chattable.TABLE_NAME, chattable.TYPE_DIR_TYPE),
        TABLE_CONTACTS(table_contacts.TABLE_NAME, table_contacts.TABLE_NAME, table_contacts.TYPE_ELEM_TYPE),
        TABLE_CONTACTS_ID(table_contacts.TABLE_NAME + "/#", table_contacts.TABLE_NAME, table_contacts.TYPE_DIR_TYPE),
        TABLE_RECENT_CONTACTS(table_recent_contacts.TABLE_NAME, table_recent_contacts.TABLE_NAME, table_recent_contacts.TYPE_ELEM_TYPE),
        TABLE_RECENT_CONTACTS_ID(table_recent_contacts.TABLE_NAME + "/#", table_recent_contacts.TABLE_NAME, table_recent_contacts.TYPE_DIR_TYPE),
        TABLE_USERINFO_OTHER(table_userinfo_other.TABLE_NAME, table_userinfo_other.TABLE_NAME, table_userinfo_other.TYPE_ELEM_TYPE),
        TABLE_USERINFO_OTHER_ID(table_userinfo_other.TABLE_NAME + "/#", table_userinfo_other.TABLE_NAME, table_userinfo_other.TYPE_DIR_TYPE),
        TABLEPART(tablepart.TABLE_NAME, tablepart.TABLE_NAME, tablepart.TYPE_ELEM_TYPE),
        TABLEPART_ID(tablepart.TABLE_NAME + "/#", tablepart.TABLE_NAME, tablepart.TYPE_DIR_TYPE),
        TABLENEWS(tablenews.TABLE_NAME, tablenews.TABLE_NAME, tablenews.TYPE_ELEM_TYPE),
        TABLENEWS_ID(tablenews.TABLE_NAME + "/#", tablenews.TABLE_NAME, tablenews.TYPE_DIR_TYPE),
        TABLE_DYNAMIC_LIST(table_dynamic_list.TABLE_NAME, table_dynamic_list.TABLE_NAME, table_dynamic_list.TYPE_ELEM_TYPE),
        TABLE_DYNAMIC_LIST_ID(table_dynamic_list.TABLE_NAME + "/#", table_dynamic_list.TABLE_NAME, table_dynamic_list.TYPE_DIR_TYPE),
        TABLE_DISCOVERY_TUIJIAN(table_discovery_tuijian.TABLE_NAME, table_discovery_tuijian.TABLE_NAME, table_discovery_tuijian.TYPE_ELEM_TYPE),
        TABLE_DISCOVERY_TUIJIAN_ID(table_discovery_tuijian.TABLE_NAME + "/#", table_discovery_tuijian.TABLE_NAME, table_discovery_tuijian.TYPE_DIR_TYPE),
        TABLE_DISCOVERY_REMEN(table_discovery_remen.TABLE_NAME, table_discovery_remen.TABLE_NAME, table_discovery_remen.TYPE_ELEM_TYPE),
        TABLE_DISCOVERY_REMEN_ID(table_discovery_remen.TABLE_NAME + "/#", table_discovery_remen.TABLE_NAME, table_discovery_remen.TYPE_DIR_TYPE),
        TABLE_DISCOVERY_ZUIXIN(table_discovery_zuixin.TABLE_NAME, table_discovery_zuixin.TABLE_NAME, table_discovery_zuixin.TYPE_ELEM_TYPE),
        TABLE_DISCOVERY_ZUIXIN_ID(table_discovery_zuixin.TABLE_NAME + "/#", table_discovery_zuixin.TABLE_NAME, table_discovery_zuixin.TYPE_DIR_TYPE),
        TABLE_SUBSCRIBE_GROUP(table_subscribe_group.TABLE_NAME, table_subscribe_group.TABLE_NAME, table_subscribe_group.TYPE_ELEM_TYPE),
        TABLE_SUBSCRIBE_GROUP_ID(table_subscribe_group.TABLE_NAME + "/#", table_subscribe_group.TABLE_NAME, table_subscribe_group.TYPE_DIR_TYPE),
        DRAFTLIST(draftlist.TABLE_NAME, draftlist.TABLE_NAME, draftlist.TYPE_ELEM_TYPE),
        DRAFTLIST_ID(draftlist.TABLE_NAME + "/#", draftlist.TABLE_NAME, draftlist.TYPE_DIR_TYPE),
        HOTFOLLOW(hotfollow.TABLE_NAME, hotfollow.TABLE_NAME, hotfollow.TYPE_ELEM_TYPE),
        HOTFOLLOW_ID(hotfollow.TABLE_NAME + "/#", hotfollow.TABLE_NAME, hotfollow.TYPE_DIR_TYPE),
        TABLE_USER_GROUP(table_user_group.TABLE_NAME, table_user_group.TABLE_NAME, table_user_group.TYPE_ELEM_TYPE),
        TABLE_USER_GROUP_ID(table_user_group.TABLE_NAME + "/#", table_user_group.TABLE_NAME, table_user_group.TYPE_DIR_TYPE),
        TABLE_USER_GROUP_IN_DYNAMIC(table_user_group_in_dynamic.TABLE_NAME, table_user_group_in_dynamic.TABLE_NAME, table_user_group_in_dynamic.TYPE_ELEM_TYPE),
        TABLE_USER_GROUP_IN_DYNAMIC_ID(table_user_group_in_dynamic.TABLE_NAME + "/#", table_user_group_in_dynamic.TABLE_NAME, table_user_group_in_dynamic.TYPE_DIR_TYPE),
        TOPICNEWS(topicnews.TABLE_NAME, topicnews.TABLE_NAME, topicnews.TYPE_ELEM_TYPE),
        TOPICNEWS_ID(topicnews.TABLE_NAME + "/#", topicnews.TABLE_NAME, topicnews.TYPE_DIR_TYPE),
        CIRCLE(circle.TABLE_NAME, circle.TABLE_NAME, circle.TYPE_ELEM_TYPE),
        CIRCLE_ID(circle.TABLE_NAME + "/#", circle.TABLE_NAME, circle.TYPE_DIR_TYPE),
        TABLE_LOCAL_STATE(table_local_state.TABLE_NAME, table_local_state.TABLE_NAME, table_local_state.TYPE_ELEM_TYPE),
        TABLE_LOCAL_STATE_ID(table_local_state.TABLE_NAME + "/#", table_local_state.TABLE_NAME, table_local_state.TYPE_DIR_TYPE);

        private String mTableName;
        private String mType;

        UriType(String matchPath, String tableName, String type) {
            mTableName = tableName;
            mType = type;
            sUriMatcher.addURI(AUTHORITY, matchPath, ordinal());
        }

        String getTableName() {
            return mTableName;
        }

        String getType() {
            return mType;
        }
    }

    static {
        // Ensures UriType is initialized
        UriType.values();
    }

    private static UriType matchUri(Uri uri) {
        int match = sUriMatcher.match(uri);
        if (match < 0) {
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
        return UriType.class.getEnumConstants()[match];
    }

    private SQLiteDatabase mDatabase;

    @SuppressWarnings("deprecation")
    public synchronized SQLiteDatabase getDatabase(Context context) {
        // Always return the cached database, if we've got one
        if (mDatabase == null || !mDatabase.isOpen()) {
            DatabaseHelper helper = new DatabaseHelper(context, DATABASE_NAME);
            mDatabase = helper.getWritableDatabase();
            if (mDatabase != null) {
                mDatabase.setLockingEnabled(true);
            }
        }

        return mDatabase;
    }

    private class DatabaseHelper extends SQLiteOpenHelper {

        DatabaseHelper(Context context, String name) {
            super(context, name, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.d(LOG_TAG, "Creating dbProvider database");

            // Create all tables here; each class has its own method
            table_login.createTable(db);
            table_setting.createTable(db);
            jrttchannel.createTable(db);
            table_my_message_list.createTable(db);
            table_my_strangers_message_list.createTable(db);
            messagelisttable.createTable(db);
            chattable.createTable(db);
            table_contacts.createTable(db);
            table_recent_contacts.createTable(db);
            table_userinfo_other.createTable(db);
            tablepart.createTable(db);
            tablenews.createTable(db);
            table_dynamic_list.createTable(db);
            table_discovery_tuijian.createTable(db);
            table_discovery_remen.createTable(db);
            table_discovery_zuixin.createTable(db);
            table_subscribe_group.createTable(db);
            draftlist.createTable(db);
            hotfollow.createTable(db);
            table_user_group.createTable(db);
            table_user_group_in_dynamic.createTable(db);
            topicnews.createTable(db);
            circle.createTable(db);
            table_local_state.createTable(db);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

            // Upgrade all tables here; each class has its own method
            table_login.upgradeTable(db, oldVersion, newVersion);
            table_setting.upgradeTable(db, oldVersion, newVersion);
            jrttchannel.upgradeTable(db, oldVersion, newVersion);
            table_my_message_list.upgradeTable(db, oldVersion, newVersion);
            table_my_strangers_message_list.upgradeTable(db, oldVersion, newVersion);
            messagelisttable.upgradeTable(db, oldVersion, newVersion);
            chattable.upgradeTable(db, oldVersion, newVersion);
            table_contacts.upgradeTable(db, oldVersion, newVersion);
            table_recent_contacts.upgradeTable(db, oldVersion, newVersion);
            table_userinfo_other.upgradeTable(db, oldVersion, newVersion);
            tablepart.upgradeTable(db, oldVersion, newVersion);
            tablenews.upgradeTable(db, oldVersion, newVersion);
            table_dynamic_list.upgradeTable(db, oldVersion, newVersion);
            table_discovery_tuijian.upgradeTable(db, oldVersion, newVersion);
            table_discovery_remen.upgradeTable(db, oldVersion, newVersion);
            table_discovery_zuixin.upgradeTable(db, oldVersion, newVersion);
            table_subscribe_group.upgradeTable(db, oldVersion, newVersion);
            draftlist.upgradeTable(db, oldVersion, newVersion);
            hotfollow.upgradeTable(db, oldVersion, newVersion);
            table_user_group.upgradeTable(db, oldVersion, newVersion);
            table_user_group_in_dynamic.upgradeTable(db, oldVersion, newVersion);
            topicnews.upgradeTable(db, oldVersion, newVersion);
            circle.upgradeTable(db, oldVersion, newVersion);
            table_local_state.upgradeTable(db, oldVersion, newVersion);
        }

        @Override
        public void onOpen(SQLiteDatabase db) {
        }
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        String id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "delete: uri=" + uri + ", match is " + uriType.name());
        }

        int result = -1;

        switch (uriType) {
            case TABLE_LOGIN_ID:
            case TABLE_SETTING_ID:
            case JRTTCHANNEL_ID:
            case TABLE_MY_MESSAGE_LIST_ID:
            case TABLE_MY_STRANGERS_MESSAGE_LIST_ID:
            case MESSAGELISTTABLE_ID:
            case CHATTABLE_ID:
            case TABLE_CONTACTS_ID:
            case TABLE_RECENT_CONTACTS_ID:
            case TABLE_USERINFO_OTHER_ID:
            case TABLEPART_ID:
            case TABLENEWS_ID:
            case TABLE_DYNAMIC_LIST_ID:
            case TABLE_DISCOVERY_TUIJIAN_ID:
            case TABLE_DISCOVERY_REMEN_ID:
            case TABLE_DISCOVERY_ZUIXIN_ID:
            case TABLE_SUBSCRIBE_GROUP_ID:
            case DRAFTLIST_ID:
            case HOTFOLLOW_ID:
            case TABLE_USER_GROUP_ID:
            case TABLE_USER_GROUP_IN_DYNAMIC_ID:
            case TOPICNEWS_ID:
            case CIRCLE_ID:
            case TABLE_LOCAL_STATE_ID:
                id = uri.getPathSegments().get(1);
                result = db.delete(uriType.getTableName(), whereWithId(selection),
                        addIdToSelectionArgs(id, selectionArgs));
                break;
            case TABLE_LOGIN:
            case TABLE_SETTING:
            case JRTTCHANNEL:
            case TABLE_MY_MESSAGE_LIST:
            case TABLE_MY_STRANGERS_MESSAGE_LIST:
            case MESSAGELISTTABLE:
            case CHATTABLE:
            case TABLE_CONTACTS:
            case TABLE_RECENT_CONTACTS:
            case TABLE_USERINFO_OTHER:
            case TABLEPART:
            case TABLENEWS:
            case TABLE_DYNAMIC_LIST:
            case TABLE_DISCOVERY_TUIJIAN:
            case TABLE_DISCOVERY_REMEN:
            case TABLE_DISCOVERY_ZUIXIN:
            case TABLE_SUBSCRIBE_GROUP:
            case DRAFTLIST:
            case HOTFOLLOW:
            case TABLE_USER_GROUP:
            case TABLE_USER_GROUP_IN_DYNAMIC:
            case TOPICNEWS:
            case CIRCLE:
            case TABLE_LOCAL_STATE:
                result = db.delete(uriType.getTableName(), selection, selectionArgs);
                break;
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return result;
    }

    @Override
    public String getType(Uri uri) {
        return matchUri(uri).getType();
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        long id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "insert: uri=" + uri + ", match is " + uriType.name());
        }

        Uri resultUri;

        switch (uriType) {
            case TABLE_LOGIN:
            case TABLE_SETTING:
            case JRTTCHANNEL:
            case TABLE_MY_MESSAGE_LIST:
            case TABLE_MY_STRANGERS_MESSAGE_LIST:
            case MESSAGELISTTABLE:
            case CHATTABLE:
            case TABLE_CONTACTS:
            case TABLE_RECENT_CONTACTS:
            case TABLE_USERINFO_OTHER:
            case TABLEPART:
            case TABLENEWS:
            case TABLE_DYNAMIC_LIST:
            case TABLE_DISCOVERY_TUIJIAN:
            case TABLE_DISCOVERY_REMEN:
            case TABLE_DISCOVERY_ZUIXIN:
            case TABLE_SUBSCRIBE_GROUP:
            case DRAFTLIST:
            case HOTFOLLOW:
            case TABLE_USER_GROUP:
            case TABLE_USER_GROUP_IN_DYNAMIC:
            case TOPICNEWS:
            case CIRCLE:
            case TABLE_LOCAL_STATE:
                id = db.insert(uriType.getTableName(), "foo", values);
                resultUri = id == -1 ? null : ContentUris.withAppendedId(uri, id);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }

        // Notify with the base uri, not the new uri (nobody is watching a new
        // record)
        getContext().getContentResolver().notifyChange(uri, null);
        return resultUri;
    }

    @Override
    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations) 
            throws OperationApplicationException {
        SQLiteDatabase db = getDatabase(getContext());
        db.beginTransaction();
        try {
            int numOperations = operations.size();
            ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                results[i] = operations.get(i).apply(this, results, i);
                db.yieldIfContendedSafely();
            }
            db.setTransactionSuccessful();
            return results;
        } finally {
            db.endTransaction();
        }
    }

    @Override
    public int bulkInsert(Uri uri, ContentValues[] values) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "bulkInsert: uri=" + uri + ", match is " + uriType.name());
        }

        int numberInserted = 0;
        SQLiteStatement insertStmt;

        db.beginTransaction();
        try {
            boolean hasError = false;
            Exception lastE = null;
            switch (uriType) {
                case TABLE_LOGIN:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_login.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_login.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_SETTING:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_setting.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_setting.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case JRTTCHANNEL:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(jrttchannel.getBulkInsertString());
                    for (ContentValues value : values) {
                        jrttchannel.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_MY_MESSAGE_LIST:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_my_message_list.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_my_message_list.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_MY_STRANGERS_MESSAGE_LIST:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_my_strangers_message_list.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_my_strangers_message_list.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case MESSAGELISTTABLE:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(messagelisttable.getBulkInsertString());
                    for (ContentValues value : values) {
                        messagelisttable.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case CHATTABLE:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(chattable.getBulkInsertString());
                    for (ContentValues value : values) {
                        chattable.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_CONTACTS:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_contacts.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_contacts.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_RECENT_CONTACTS:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_recent_contacts.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_recent_contacts.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_USERINFO_OTHER:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_userinfo_other.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_userinfo_other.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLEPART:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(tablepart.getBulkInsertString());
                    for (ContentValues value : values) {
                        tablepart.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLENEWS:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(tablenews.getBulkInsertString());
                    for (ContentValues value : values) {
                        tablenews.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_DYNAMIC_LIST:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_dynamic_list.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_dynamic_list.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_DISCOVERY_TUIJIAN:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_discovery_tuijian.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_discovery_tuijian.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_DISCOVERY_REMEN:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_discovery_remen.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_discovery_remen.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_DISCOVERY_ZUIXIN:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_discovery_zuixin.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_discovery_zuixin.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_SUBSCRIBE_GROUP:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_subscribe_group.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_subscribe_group.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case DRAFTLIST:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(draftlist.getBulkInsertString());
                    for (ContentValues value : values) {
                        draftlist.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case HOTFOLLOW:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(hotfollow.getBulkInsertString());
                    for (ContentValues value : values) {
                        hotfollow.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_USER_GROUP:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_user_group.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_user_group.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_USER_GROUP_IN_DYNAMIC:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_user_group_in_dynamic.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_user_group_in_dynamic.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TOPICNEWS:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(topicnews.getBulkInsertString());
                    for (ContentValues value : values) {
                        topicnews.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case CIRCLE:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(circle.getBulkInsertString());
                    for (ContentValues value : values) {
                        circle.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                case TABLE_LOCAL_STATE:
                	hasError = false;
               		lastE = null;
                    insertStmt = db.compileStatement(table_local_state.getBulkInsertString());
                    for (ContentValues value : values) {
                        table_local_state.bindValuesInBulkInsert(insertStmt, value);
                        try {
                            insertStmt.execute();
						} catch (Exception e) {
							hasError = true;
							lastE = e;
						}
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

					if(hasError && lastE != null){
                    	lastE.printStackTrace();
                    }
                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break; 
                default:
                    throw new IllegalArgumentException("Unknown URI " + uri);
            }
        } finally {
            db.endTransaction();
        }

        // Notify with the base uri, not the new uri (nobody is watching a new
        // record)
        context.getContentResolver().notifyChange(uri, null);
        return numberInserted;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, 
            String sortOrder) {

        Cursor c = null;
        UriType uriType = matchUri(uri);
        Context context = getContext();
        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        String id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "query: uri=" + uri + ", match is " + uriType.name());
        }

        switch (uriType) {
            case TABLE_LOGIN_ID:
            case TABLE_SETTING_ID:
            case JRTTCHANNEL_ID:
            case TABLE_MY_MESSAGE_LIST_ID:
            case TABLE_MY_STRANGERS_MESSAGE_LIST_ID:
            case MESSAGELISTTABLE_ID:
            case CHATTABLE_ID:
            case TABLE_CONTACTS_ID:
            case TABLE_RECENT_CONTACTS_ID:
            case TABLE_USERINFO_OTHER_ID:
            case TABLEPART_ID:
            case TABLENEWS_ID:
            case TABLE_DYNAMIC_LIST_ID:
            case TABLE_DISCOVERY_TUIJIAN_ID:
            case TABLE_DISCOVERY_REMEN_ID:
            case TABLE_DISCOVERY_ZUIXIN_ID:
            case TABLE_SUBSCRIBE_GROUP_ID:
            case DRAFTLIST_ID:
            case HOTFOLLOW_ID:
            case TABLE_USER_GROUP_ID:
            case TABLE_USER_GROUP_IN_DYNAMIC_ID:
            case TOPICNEWS_ID:
            case CIRCLE_ID:
            case TABLE_LOCAL_STATE_ID:
                id = uri.getPathSegments().get(1);
                c = db.query(uriType.getTableName(), projection, whereWithId(selection),
                        addIdToSelectionArgs(id, selectionArgs), null, null, sortOrder);
                break;
            case TABLE_LOGIN:
            case TABLE_SETTING:
            case JRTTCHANNEL:
            case TABLE_MY_MESSAGE_LIST:
            case TABLE_MY_STRANGERS_MESSAGE_LIST:
            case MESSAGELISTTABLE:
            case CHATTABLE:
            case TABLE_CONTACTS:
            case TABLE_RECENT_CONTACTS:
            case TABLE_USERINFO_OTHER:
            case TABLEPART:
            case TABLENEWS:
            case TABLE_DYNAMIC_LIST:
            case TABLE_DISCOVERY_TUIJIAN:
            case TABLE_DISCOVERY_REMEN:
            case TABLE_DISCOVERY_ZUIXIN:
            case TABLE_SUBSCRIBE_GROUP:
            case DRAFTLIST:
            case HOTFOLLOW:
            case TABLE_USER_GROUP:
            case TABLE_USER_GROUP_IN_DYNAMIC:
            case TOPICNEWS:
            case CIRCLE:
            case TABLE_LOCAL_STATE:
                c = db.query(uriType.getTableName(), projection, selection, selectionArgs,
                        null, null, sortOrder);
                break;
        }

        if ((c != null) && !isTemporary()) {
            c.setNotificationUri(getContext().getContentResolver(), uri);
        }
        return c;
    }

    private String whereWithId(String selection) {
        StringBuilder sb = new StringBuilder(256);
        sb.append(BaseColumns._ID);
        sb.append(" = ?");
        if (selection != null) {
            sb.append(" AND (");
            sb.append(selection);
            sb.append(')');
        }
        return sb.toString();
    }

    private String[] addIdToSelectionArgs(String id, String[] selectionArgs) {

        if (selectionArgs == null) {
            return new String[] { id };
        }

        int length = selectionArgs.length;
        String[] newSelectionArgs = new String[length + 1];
        newSelectionArgs[0] = id;
        System.arraycopy(selectionArgs, 0, newSelectionArgs, 1, length);
        return newSelectionArgs;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "update: uri=" + uri + ", match is " + uriType.name());
        }

        int result = -1;

        switch (uriType) {
            case TABLE_LOGIN_ID:
            case TABLE_SETTING_ID:
            case JRTTCHANNEL_ID:
            case TABLE_MY_MESSAGE_LIST_ID:
            case TABLE_MY_STRANGERS_MESSAGE_LIST_ID:
            case MESSAGELISTTABLE_ID:
            case CHATTABLE_ID:
            case TABLE_CONTACTS_ID:
            case TABLE_RECENT_CONTACTS_ID:
            case TABLE_USERINFO_OTHER_ID:
            case TABLEPART_ID:
            case TABLENEWS_ID:
            case TABLE_DYNAMIC_LIST_ID:
            case TABLE_DISCOVERY_TUIJIAN_ID:
            case TABLE_DISCOVERY_REMEN_ID:
            case TABLE_DISCOVERY_ZUIXIN_ID:
            case TABLE_SUBSCRIBE_GROUP_ID:
            case DRAFTLIST_ID:
            case HOTFOLLOW_ID:
            case TABLE_USER_GROUP_ID:
            case TABLE_USER_GROUP_IN_DYNAMIC_ID:
            case TOPICNEWS_ID:
            case CIRCLE_ID:
            case TABLE_LOCAL_STATE_ID:
                String id = uri.getPathSegments().get(1);
                result = db.update(uriType.getTableName(), values, whereWithId(selection),
                    addIdToSelectionArgs(id, selectionArgs));
                break;
            case TABLE_LOGIN:
            case TABLE_SETTING:
            case JRTTCHANNEL:
            case TABLE_MY_MESSAGE_LIST:
            case TABLE_MY_STRANGERS_MESSAGE_LIST:
            case MESSAGELISTTABLE:
            case CHATTABLE:
            case TABLE_CONTACTS:
            case TABLE_RECENT_CONTACTS:
            case TABLE_USERINFO_OTHER:
            case TABLEPART:
            case TABLENEWS:
            case TABLE_DYNAMIC_LIST:
            case TABLE_DISCOVERY_TUIJIAN:
            case TABLE_DISCOVERY_REMEN:
            case TABLE_DISCOVERY_ZUIXIN:
            case TABLE_SUBSCRIBE_GROUP:
            case DRAFTLIST:
            case HOTFOLLOW:
            case TABLE_USER_GROUP:
            case TABLE_USER_GROUP_IN_DYNAMIC:
            case TOPICNEWS:
            case CIRCLE:
            case TABLE_LOCAL_STATE:
                result = db.update(uriType.getTableName(), values, selection, selectionArgs);
                break;
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return result;
    }

    @Override
    public boolean onCreate() {
        return true;
    }
}

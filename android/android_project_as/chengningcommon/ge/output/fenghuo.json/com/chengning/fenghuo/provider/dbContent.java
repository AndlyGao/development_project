package com.chengning.fenghuo.provider;

import com.chengning.fenghuo.provider.util.ColumnMetadata;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class dbContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + dbProvider.AUTHORITY);

    private dbContent() {
    }

    /**
     * Created in version 1
     */
    public static final class table_login extends dbContent {

        private static final String LOG_TAG = table_login.class.getSimpleName();

        public static final String TABLE_NAME = "table_login";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_login";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_login";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            CREDITS("credits", "text"),
            USERINFO("userinfo", "text"),
            PWD("pwd", "text"),
            SINA_TOKEN("sina_token", "text"),
            QQ_TOKEN("qq_token", "text"),
            WEIXIN_TOKEN("weixin_token", "text"),
            COOKIE("cookie", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.CREDITS.getName(),
                Columns.USERINFO.getName(),
                Columns.PWD.getName(),
                Columns.SINA_TOKEN.getName(),
                Columns.QQ_TOKEN.getName(),
                Columns.WEIXIN_TOKEN.getName(),
                Columns.COOKIE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_login() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CREDITS.getName() + " " + Columns.CREDITS.getType() + ", " + Columns.USERINFO.getName() + " " + Columns.USERINFO.getType() + ", " + Columns.PWD.getName() + " " + Columns.PWD.getType() + ", " + Columns.SINA_TOKEN.getName() + " " + Columns.SINA_TOKEN.getType() + ", " + Columns.QQ_TOKEN.getName() + " " + Columns.QQ_TOKEN.getType() + ", " + Columns.WEIXIN_TOKEN.getName() + " " + Columns.WEIXIN_TOKEN.getType() + ", " + Columns.COOKIE.getName() + " " + Columns.COOKIE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_login | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CREDITS.getName()).append(", ").append(Columns.USERINFO.getName()).append(", ").append(Columns.PWD.getName()).append(", ").append(Columns.SINA_TOKEN.getName()).append(", ").append(Columns.QQ_TOKEN.getName()).append(", ").append(Columns.WEIXIN_TOKEN.getName()).append(", ").append(Columns.COOKIE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CREDITS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERINFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PWD.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SINA_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QQ_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.WEIXIN_TOKEN.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COOKIE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_setting extends dbContent {

        private static final String LOG_TAG = table_setting.class.getSimpleName();

        public static final String TABLE_NAME = "table_setting";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_setting";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_setting";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            CONFIG_PUSH_ENABLE("config_push_enable", "integer"),
            CONFIG_PUSH_IS_AT("config_push_is_at", "integer"),
            CONFIG_PUSH_IS_REPLY("config_push_is_reply", "integer"),
            CONFIG_PUSH_IS_DIG("config_push_is_dig", "integer"),
            CONFIG_PUSH_IS_PM("config_push_is_pm", "integer"),
            CONFIG_PUSH_IS_FAN("config_push_is_fan", "integer"),
            CONFIG_PUSH_IS_SPLENDID("config_push_is_splendid", "integer"),
            CONFIG_PUSH_START_TIME("config_push_start_time", "text"),
            CONFIG_PUSH_END_TIME("config_push_end_time", "text"),
            CONFIG_REPLY_ACCESS("config_reply_access", "integer"),
            FONTSIZE("fontsize", "integer"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.CONFIG_PUSH_ENABLE.getName(),
                Columns.CONFIG_PUSH_IS_AT.getName(),
                Columns.CONFIG_PUSH_IS_REPLY.getName(),
                Columns.CONFIG_PUSH_IS_DIG.getName(),
                Columns.CONFIG_PUSH_IS_PM.getName(),
                Columns.CONFIG_PUSH_IS_FAN.getName(),
                Columns.CONFIG_PUSH_IS_SPLENDID.getName(),
                Columns.CONFIG_PUSH_START_TIME.getName(),
                Columns.CONFIG_PUSH_END_TIME.getName(),
                Columns.CONFIG_REPLY_ACCESS.getName(),
                Columns.FONTSIZE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_setting() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CONFIG_PUSH_ENABLE.getName() + " " + Columns.CONFIG_PUSH_ENABLE.getType() + ", " + Columns.CONFIG_PUSH_IS_AT.getName() + " " + Columns.CONFIG_PUSH_IS_AT.getType() + ", " + Columns.CONFIG_PUSH_IS_REPLY.getName() + " " + Columns.CONFIG_PUSH_IS_REPLY.getType() + ", " + Columns.CONFIG_PUSH_IS_DIG.getName() + " " + Columns.CONFIG_PUSH_IS_DIG.getType() + ", " + Columns.CONFIG_PUSH_IS_PM.getName() + " " + Columns.CONFIG_PUSH_IS_PM.getType() + ", " + Columns.CONFIG_PUSH_IS_FAN.getName() + " " + Columns.CONFIG_PUSH_IS_FAN.getType() + ", " + Columns.CONFIG_PUSH_IS_SPLENDID.getName() + " " + Columns.CONFIG_PUSH_IS_SPLENDID.getType() + ", " + Columns.CONFIG_PUSH_START_TIME.getName() + " " + Columns.CONFIG_PUSH_START_TIME.getType() + ", " + Columns.CONFIG_PUSH_END_TIME.getName() + " " + Columns.CONFIG_PUSH_END_TIME.getType() + ", " + Columns.CONFIG_REPLY_ACCESS.getName() + " " + Columns.CONFIG_REPLY_ACCESS.getType() + ", " + Columns.FONTSIZE.getName() + " " + Columns.FONTSIZE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_setting | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CONFIG_PUSH_ENABLE.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_AT.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_REPLY.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_DIG.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_PM.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_FAN.getName()).append(", ").append(Columns.CONFIG_PUSH_IS_SPLENDID.getName()).append(", ").append(Columns.CONFIG_PUSH_START_TIME.getName()).append(", ").append(Columns.CONFIG_PUSH_END_TIME.getName()).append(", ").append(Columns.CONFIG_REPLY_ACCESS.getName()).append(", ").append(Columns.FONTSIZE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_ENABLE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_AT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_REPLY.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_DIG.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_PM.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_FAN.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_PUSH_IS_SPLENDID.getName()));
            value = values.getAsString(Columns.CONFIG_PUSH_START_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CONFIG_PUSH_END_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.CONFIG_REPLY_ACCESS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FONTSIZE.getName()));
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class jrttchannel extends dbContent {

        private static final String LOG_TAG = jrttchannel.class.getSimpleName();

        public static final String TABLE_NAME = "jrttchannel";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-jrttchannel";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-jrttchannel";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            NAME("name", "text"),
            ID("id", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.NAME.getName(),
                Columns.ID.getName()
        };

        private jrttchannel() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "jrttchannel | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "jrttchannel | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "jrttchannel | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "jrttchannel | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.NAME.getName()).append(", ").append(Columns.ID.getName()).append(" ) VALUES (?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_my_message_list extends dbContent {

        private static final String LOG_TAG = table_my_message_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_my_message_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_my_message_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_my_message_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            MSGTOID("msgtoid", "integer"),
            MSGFROM("msgfrom", "text"),
            MSGFROMID("msgfromid", "integer"),
            MSGNICKNAME("msgnickname", "text"),
            MSGTO("msgto", "text"),
            TONICKNAME("tonickname", "text"),
            FACE("face", "text"),
            DATELINE("dateline", "text"),
            MESSAGE("message", "text"),
            IMAGE_LIST("image_list", "text"),
            IS_NEW("is_new", "integer"),
            URL("url", "text"),
            LOCAL_STATE("local_state", "text"),
            LOCAL_STICK("local_stick", "text"),
            LOCAL_LASTTIME("local_lasttime", "text"),
            LOCAL_OTHER_ID("local_other_id", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.MSGTOID.getName(),
                Columns.MSGFROM.getName(),
                Columns.MSGFROMID.getName(),
                Columns.MSGNICKNAME.getName(),
                Columns.MSGTO.getName(),
                Columns.TONICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.DATELINE.getName(),
                Columns.MESSAGE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.IS_NEW.getName(),
                Columns.URL.getName(),
                Columns.LOCAL_STATE.getName(),
                Columns.LOCAL_STICK.getName(),
                Columns.LOCAL_LASTTIME.getName(),
                Columns.LOCAL_OTHER_ID.getName()
        };

        private table_my_message_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_message_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.MSGTOID.getName() + " " + Columns.MSGTOID.getType() + ", " + Columns.MSGFROM.getName() + " " + Columns.MSGFROM.getType() + ", " + Columns.MSGFROMID.getName() + " " + Columns.MSGFROMID.getType() + ", " + Columns.MSGNICKNAME.getName() + " " + Columns.MSGNICKNAME.getType() + ", " + Columns.MSGTO.getName() + " " + Columns.MSGTO.getType() + ", " + Columns.TONICKNAME.getName() + " " + Columns.TONICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.IS_NEW.getName() + " " + Columns.IS_NEW.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.LOCAL_STATE.getName() + " " + Columns.LOCAL_STATE.getType() + ", " + Columns.LOCAL_STICK.getName() + " " + Columns.LOCAL_STICK.getType() + ", " + Columns.LOCAL_LASTTIME.getName() + " " + Columns.LOCAL_LASTTIME.getType() + ", " + Columns.LOCAL_OTHER_ID.getName() + " " + Columns.LOCAL_OTHER_ID.getType() + ", UNIQUE (" + Columns.LOCAL_OTHER_ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_message_list | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_message_list | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_message_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.MSGTOID.getName()).append(", ").append(Columns.MSGFROM.getName()).append(", ").append(Columns.MSGFROMID.getName()).append(", ").append(Columns.MSGNICKNAME.getName()).append(", ").append(Columns.MSGTO.getName()).append(", ").append(Columns.TONICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.IS_NEW.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.LOCAL_STATE.getName()).append(", ").append(Columns.LOCAL_STICK.getName()).append(", ").append(Columns.LOCAL_LASTTIME.getName()).append(", ").append(Columns.LOCAL_OTHER_ID.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.MSGTOID.getName()));
            value = values.getAsString(Columns.MSGFROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGFROMID.getName()));
            value = values.getAsString(Columns.MSGNICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSGTO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TONICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NEW.getName()));
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_STICK.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_OTHER_ID.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_my_strangers_message_list extends dbContent {

        private static final String LOG_TAG = table_my_strangers_message_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_my_strangers_message_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_my_strangers_message_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_my_strangers_message_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            MSGTOID("msgtoid", "integer"),
            MSGFROM("msgfrom", "text"),
            MSGFROMID("msgfromid", "integer"),
            MSGNICKNAME("msgnickname", "text"),
            MSGTO("msgto", "text"),
            TONICKNAME("tonickname", "text"),
            FACE("face", "text"),
            DATELINE("dateline", "text"),
            MESSAGE("message", "text"),
            IMAGE_LIST("image_list", "text"),
            IS_NEW("is_new", "integer"),
            URL("url", "text"),
            LOCAL_STATE("local_state", "text"),
            LOCAL_STICK("local_stick", "text"),
            LOCAL_LASTTIME("local_lasttime", "text"),
            LOCAL_OTHER_ID("local_other_id", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.MSGTOID.getName(),
                Columns.MSGFROM.getName(),
                Columns.MSGFROMID.getName(),
                Columns.MSGNICKNAME.getName(),
                Columns.MSGTO.getName(),
                Columns.TONICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.DATELINE.getName(),
                Columns.MESSAGE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.IS_NEW.getName(),
                Columns.URL.getName(),
                Columns.LOCAL_STATE.getName(),
                Columns.LOCAL_STICK.getName(),
                Columns.LOCAL_LASTTIME.getName(),
                Columns.LOCAL_OTHER_ID.getName()
        };

        private table_my_strangers_message_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_strangers_message_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.MSGTOID.getName() + " " + Columns.MSGTOID.getType() + ", " + Columns.MSGFROM.getName() + " " + Columns.MSGFROM.getType() + ", " + Columns.MSGFROMID.getName() + " " + Columns.MSGFROMID.getType() + ", " + Columns.MSGNICKNAME.getName() + " " + Columns.MSGNICKNAME.getType() + ", " + Columns.MSGTO.getName() + " " + Columns.MSGTO.getType() + ", " + Columns.TONICKNAME.getName() + " " + Columns.TONICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.IS_NEW.getName() + " " + Columns.IS_NEW.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.LOCAL_STATE.getName() + " " + Columns.LOCAL_STATE.getType() + ", " + Columns.LOCAL_STICK.getName() + " " + Columns.LOCAL_STICK.getType() + ", " + Columns.LOCAL_LASTTIME.getName() + " " + Columns.LOCAL_LASTTIME.getType() + ", " + Columns.LOCAL_OTHER_ID.getName() + " " + Columns.LOCAL_OTHER_ID.getType() + ", UNIQUE (" + Columns.LOCAL_OTHER_ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_strangers_message_list | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_strangers_message_list | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_my_strangers_message_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.MSGTOID.getName()).append(", ").append(Columns.MSGFROM.getName()).append(", ").append(Columns.MSGFROMID.getName()).append(", ").append(Columns.MSGNICKNAME.getName()).append(", ").append(Columns.MSGTO.getName()).append(", ").append(Columns.TONICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.IS_NEW.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.LOCAL_STATE.getName()).append(", ").append(Columns.LOCAL_STICK.getName()).append(", ").append(Columns.LOCAL_LASTTIME.getName()).append(", ").append(Columns.LOCAL_OTHER_ID.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.MSGTOID.getName()));
            value = values.getAsString(Columns.MSGFROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGFROMID.getName()));
            value = values.getAsString(Columns.MSGNICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSGTO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TONICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_NEW.getName()));
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_STICK.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LOCAL_LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_OTHER_ID.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class messagelisttable extends dbContent {

        private static final String LOG_TAG = messagelisttable.class.getSimpleName();

        public static final String TABLE_NAME = "messagelisttable";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-messagelisttable";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-messagelisttable";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            MSGFROM("msgfrom", "text"),
            MSGFROMID("msgfromid", "integer"),
            MSGNICKNAME("msgnickname", "text"),
            MSGTO("msgto", "text"),
            MSGTOID("msgtoid", "integer"),
            TONICKNAME("tonickname", "text"),
            FACE("face", "text"),
            DATELINE("dateline", "text"),
            MESSAGE("message", "text"),
            IMAGE_LIST("image_list", "text"),
            URL("url", "text"),
            MESSAGE_STATE("message_state", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.MSGFROM.getName(),
                Columns.MSGFROMID.getName(),
                Columns.MSGNICKNAME.getName(),
                Columns.MSGTO.getName(),
                Columns.MSGTOID.getName(),
                Columns.TONICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.DATELINE.getName(),
                Columns.MESSAGE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.URL.getName(),
                Columns.MESSAGE_STATE.getName()
        };

        private messagelisttable() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "messagelisttable | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.MSGFROM.getName() + " " + Columns.MSGFROM.getType() + ", " + Columns.MSGFROMID.getName() + " " + Columns.MSGFROMID.getType() + ", " + Columns.MSGNICKNAME.getName() + " " + Columns.MSGNICKNAME.getType() + ", " + Columns.MSGTO.getName() + " " + Columns.MSGTO.getType() + ", " + Columns.MSGTOID.getName() + " " + Columns.MSGTOID.getType() + ", " + Columns.TONICKNAME.getName() + " " + Columns.TONICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.MESSAGE_STATE.getName() + " " + Columns.MESSAGE_STATE.getType() + ", UNIQUE (" + Columns.MSGFROMID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "messagelisttable | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "messagelisttable | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "messagelisttable | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.MSGFROM.getName()).append(", ").append(Columns.MSGFROMID.getName()).append(", ").append(Columns.MSGNICKNAME.getName()).append(", ").append(Columns.MSGTO.getName()).append(", ").append(Columns.MSGTOID.getName()).append(", ").append(Columns.TONICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.MESSAGE_STATE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.MSGFROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGFROMID.getName()));
            value = values.getAsString(Columns.MSGNICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSGTO.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGTOID.getName()));
            value = values.getAsString(Columns.TONICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MESSAGE_STATE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class chattable extends dbContent {

        private static final String LOG_TAG = chattable.class.getSimpleName();

        public static final String TABLE_NAME = "chattable";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-chattable";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-chattable";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            PMID("pmid", "integer"),
            MSGFROM("msgfrom", "text"),
            MSGFROMID("msgfromid", "integer"),
            MSGNICKNAME("msgnickname", "text"),
            MSGTO("msgto", "text"),
            MSGTOID("msgtoid", "integer"),
            TONICKNAME("tonickname", "text"),
            FACE("face", "text"),
            DATELINE("dateline", "text"),
            MESSAGE("message", "text"),
            IMAGE_LIST("image_list", "text"),
            MESSAGE_STATE("message_state", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.PMID.getName(),
                Columns.MSGFROM.getName(),
                Columns.MSGFROMID.getName(),
                Columns.MSGNICKNAME.getName(),
                Columns.MSGTO.getName(),
                Columns.MSGTOID.getName(),
                Columns.TONICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.DATELINE.getName(),
                Columns.MESSAGE.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.MESSAGE_STATE.getName()
        };

        private chattable() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "chattable | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.PMID.getName() + " " + Columns.PMID.getType() + ", " + Columns.MSGFROM.getName() + " " + Columns.MSGFROM.getType() + ", " + Columns.MSGFROMID.getName() + " " + Columns.MSGFROMID.getType() + ", " + Columns.MSGNICKNAME.getName() + " " + Columns.MSGNICKNAME.getType() + ", " + Columns.MSGTO.getName() + " " + Columns.MSGTO.getType() + ", " + Columns.MSGTOID.getName() + " " + Columns.MSGTOID.getType() + ", " + Columns.TONICKNAME.getName() + " " + Columns.TONICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.MESSAGE.getName() + " " + Columns.MESSAGE.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.MESSAGE_STATE.getName() + " " + Columns.MESSAGE_STATE.getType() + ", UNIQUE (" + Columns.PMID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "chattable | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "chattable | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "chattable | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.PMID.getName()).append(", ").append(Columns.MSGFROM.getName()).append(", ").append(Columns.MSGFROMID.getName()).append(", ").append(Columns.MSGNICKNAME.getName()).append(", ").append(Columns.MSGTO.getName()).append(", ").append(Columns.MSGTOID.getName()).append(", ").append(Columns.TONICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.MESSAGE.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.MESSAGE_STATE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.PMID.getName()));
            value = values.getAsString(Columns.MSGFROM.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGFROMID.getName()));
            value = values.getAsString(Columns.MSGNICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MSGTO.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MSGTOID.getName()));
            value = values.getAsString(Columns.TONICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MESSAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MESSAGE_STATE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_contacts extends dbContent {

        private static final String LOG_TAG = table_contacts.class.getSimpleName();

        public static final String TABLE_NAME = "table_contacts";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_contacts";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_contacts";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            USERNAME("username", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_SMALL("face_small", "text"),
            FACE_ORIGINAL("face_original", "text"),
            GENDER("gender", "integer"),
            TOPIC_COUNT("topic_count", "integer"),
            AT_COUNT("at_count", "integer"),
            FOLLOW_COUNT("follow_count", "integer"),
            FANS_COUNT("fans_count", "integer"),
            EMAIL("email", "text"),
            PHONE("phone", "text"),
            ABOUTME("aboutme", "text"),
            ABOUTMETIME("aboutmetime", "text"),
            PROVINCE("province", "text"),
            CITY("city", "text"),
            AREA("area", "text"),
            FROM_AREA("from_area", "text"),
            GENDER_TA("gender_ta", "text"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.USERNAME.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_SMALL.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.GENDER.getName(),
                Columns.TOPIC_COUNT.getName(),
                Columns.AT_COUNT.getName(),
                Columns.FOLLOW_COUNT.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.EMAIL.getName(),
                Columns.PHONE.getName(),
                Columns.ABOUTME.getName(),
                Columns.ABOUTMETIME.getName(),
                Columns.PROVINCE.getName(),
                Columns.CITY.getName(),
                Columns.AREA.getName(),
                Columns.FROM_AREA.getName(),
                Columns.GENDER_TA.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName()
        };

        private table_contacts() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_contacts | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_SMALL.getName() + " " + Columns.FACE_SMALL.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.GENDER.getName() + " " + Columns.GENDER.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ", " + Columns.AT_COUNT.getName() + " " + Columns.AT_COUNT.getType() + ", " + Columns.FOLLOW_COUNT.getName() + " " + Columns.FOLLOW_COUNT.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PHONE.getName() + " " + Columns.PHONE.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.ABOUTMETIME.getName() + " " + Columns.ABOUTMETIME.getType() + ", " + Columns.PROVINCE.getName() + " " + Columns.PROVINCE.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.AREA.getName() + " " + Columns.AREA.getType() + ", " + Columns.FROM_AREA.getName() + " " + Columns.FROM_AREA.getType() + ", " + Columns.GENDER_TA.getName() + " " + Columns.GENDER_TA.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_contacts | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_contacts | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_contacts | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_SMALL.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.GENDER.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(", ").append(Columns.AT_COUNT.getName()).append(", ").append(Columns.FOLLOW_COUNT.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PHONE.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.ABOUTMETIME.getName()).append(", ").append(Columns.PROVINCE.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.AREA.getName()).append(", ").append(Columns.FROM_AREA.getName()).append(", ").append(Columns.GENDER_TA.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_SMALL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GENDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.AT_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FOLLOW_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTMETIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROVINCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.GENDER_TA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_recent_contacts extends dbContent {

        private static final String LOG_TAG = table_recent_contacts.class.getSimpleName();

        public static final String TABLE_NAME = "table_recent_contacts";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_recent_contacts";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_recent_contacts";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            USERNAME("username", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_SMALL("face_small", "text"),
            FACE_ORIGINAL("face_original", "text"),
            GENDER("gender", "integer"),
            TOPIC_COUNT("topic_count", "integer"),
            AT_COUNT("at_count", "integer"),
            FOLLOW_COUNT("follow_count", "integer"),
            FANS_COUNT("fans_count", "integer"),
            EMAIL("email", "text"),
            PHONE("phone", "text"),
            ABOUTME("aboutme", "text"),
            ABOUTMETIME("aboutmetime", "text"),
            PROVINCE("province", "text"),
            CITY("city", "text"),
            AREA("area", "text"),
            FROM_AREA("from_area", "text"),
            GENDER_TA("gender_ta", "text"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.USERNAME.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_SMALL.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.GENDER.getName(),
                Columns.TOPIC_COUNT.getName(),
                Columns.AT_COUNT.getName(),
                Columns.FOLLOW_COUNT.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.EMAIL.getName(),
                Columns.PHONE.getName(),
                Columns.ABOUTME.getName(),
                Columns.ABOUTMETIME.getName(),
                Columns.PROVINCE.getName(),
                Columns.CITY.getName(),
                Columns.AREA.getName(),
                Columns.FROM_AREA.getName(),
                Columns.GENDER_TA.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.LASTTIME.getName()
        };

        private table_recent_contacts() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_recent_contacts | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_SMALL.getName() + " " + Columns.FACE_SMALL.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.GENDER.getName() + " " + Columns.GENDER.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ", " + Columns.AT_COUNT.getName() + " " + Columns.AT_COUNT.getType() + ", " + Columns.FOLLOW_COUNT.getName() + " " + Columns.FOLLOW_COUNT.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PHONE.getName() + " " + Columns.PHONE.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.ABOUTMETIME.getName() + " " + Columns.ABOUTMETIME.getType() + ", " + Columns.PROVINCE.getName() + " " + Columns.PROVINCE.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.AREA.getName() + " " + Columns.AREA.getType() + ", " + Columns.FROM_AREA.getName() + " " + Columns.FROM_AREA.getType() + ", " + Columns.GENDER_TA.getName() + " " + Columns.GENDER_TA.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_recent_contacts | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_recent_contacts | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_recent_contacts | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_SMALL.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.GENDER.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(", ").append(Columns.AT_COUNT.getName()).append(", ").append(Columns.FOLLOW_COUNT.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PHONE.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.ABOUTMETIME.getName()).append(", ").append(Columns.PROVINCE.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.AREA.getName()).append(", ").append(Columns.FROM_AREA.getName()).append(", ").append(Columns.GENDER_TA.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_SMALL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GENDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.AT_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FOLLOW_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTMETIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROVINCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.GENDER_TA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_userinfo_other extends dbContent {

        private static final String LOG_TAG = table_userinfo_other.class.getSimpleName();

        public static final String TABLE_NAME = "table_userinfo_other";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_userinfo_other";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_userinfo_other";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            USERNAME("username", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_SMALL("face_small", "text"),
            FACE_ORIGINAL("face_original", "text"),
            GENDER("gender", "integer"),
            TOPIC_COUNT("topic_count", "integer"),
            AT_COUNT("at_count", "integer"),
            FOLLOW_COUNT("follow_count", "integer"),
            FANS_COUNT("fans_count", "integer"),
            EMAIL("email", "text"),
            PHONE("phone", "text"),
            ABOUTME("aboutme", "text"),
            ABOUTMETIME("aboutmetime", "text"),
            PROVINCE("province", "text"),
            CITY("city", "text"),
            AREA("area", "text"),
            FROM_AREA("from_area", "text"),
            GENDER_TA("gender_ta", "text"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.USERNAME.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_SMALL.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.GENDER.getName(),
                Columns.TOPIC_COUNT.getName(),
                Columns.AT_COUNT.getName(),
                Columns.FOLLOW_COUNT.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.EMAIL.getName(),
                Columns.PHONE.getName(),
                Columns.ABOUTME.getName(),
                Columns.ABOUTMETIME.getName(),
                Columns.PROVINCE.getName(),
                Columns.CITY.getName(),
                Columns.AREA.getName(),
                Columns.FROM_AREA.getName(),
                Columns.GENDER_TA.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName()
        };

        private table_userinfo_other() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_SMALL.getName() + " " + Columns.FACE_SMALL.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.GENDER.getName() + " " + Columns.GENDER.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ", " + Columns.AT_COUNT.getName() + " " + Columns.AT_COUNT.getType() + ", " + Columns.FOLLOW_COUNT.getName() + " " + Columns.FOLLOW_COUNT.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PHONE.getName() + " " + Columns.PHONE.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.ABOUTMETIME.getName() + " " + Columns.ABOUTMETIME.getType() + ", " + Columns.PROVINCE.getName() + " " + Columns.PROVINCE.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.AREA.getName() + " " + Columns.AREA.getType() + ", " + Columns.FROM_AREA.getName() + " " + Columns.FROM_AREA.getType() + ", " + Columns.GENDER_TA.getName() + " " + Columns.GENDER_TA.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_userinfo_other | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_SMALL.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.GENDER.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(", ").append(Columns.AT_COUNT.getName()).append(", ").append(Columns.FOLLOW_COUNT.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PHONE.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.ABOUTMETIME.getName()).append(", ").append(Columns.PROVINCE.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.AREA.getName()).append(", ").append(Columns.FROM_AREA.getName()).append(", ").append(Columns.GENDER_TA.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_SMALL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GENDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.AT_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FOLLOW_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTMETIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROVINCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_AREA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.GENDER_TA.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class tablepart extends dbContent {

        private static final String LOG_TAG = tablepart.class.getSimpleName();

        public static final String TABLE_NAME = "tablepart";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-tablepart";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-tablepart";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            TABLENAME("tablename", "text"),
            TIME("time", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.TABLENAME.getName(),
                Columns.TIME.getName()
        };

        private tablepart() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablepart | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.TABLENAME.getName() + " " + Columns.TABLENAME.getType() + ", " + Columns.TIME.getName() + " " + Columns.TIME.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablepart | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablepart | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablepart | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.TABLENAME.getName()).append(", ").append(Columns.TIME.getName()).append(" ) VALUES (?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.TABLENAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class tablenews extends dbContent {

        private static final String LOG_TAG = tablenews.class.getSimpleName();

        public static final String TABLE_NAME = "tablenews";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-tablenews";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-tablenews";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text"),
            SHARECOUNTS("sharecounts", "integer"),
            MEDAL_LIST("medal_list", "text"),
            HITCOUNTS("hitcounts", "integer"),
            ROLE_NAME("role_name", "text"),
            QUN_LIST("qun_list", "text"),
            IS_SLIDE("is_slide", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName(),
                Columns.SHARECOUNTS.getName(),
                Columns.MEDAL_LIST.getName(),
                Columns.HITCOUNTS.getName(),
                Columns.ROLE_NAME.getName(),
                Columns.QUN_LIST.getName(),
                Columns.IS_SLIDE.getName()
        };

        private tablenews() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablenews | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", " + Columns.SHARECOUNTS.getName() + " " + Columns.SHARECOUNTS.getType() + ", " + Columns.MEDAL_LIST.getName() + " " + Columns.MEDAL_LIST.getType() + ", " + Columns.HITCOUNTS.getName() + " " + Columns.HITCOUNTS.getType() + ", " + Columns.ROLE_NAME.getName() + " " + Columns.ROLE_NAME.getType() + ", " + Columns.QUN_LIST.getName() + " " + Columns.QUN_LIST.getType() + ", " + Columns.IS_SLIDE.getName() + " " + Columns.IS_SLIDE.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablenews | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablenews | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "tablenews | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(", ").append(Columns.SHARECOUNTS.getName()).append(", ").append(Columns.MEDAL_LIST.getName()).append(", ").append(Columns.HITCOUNTS.getName()).append(", ").append(Columns.ROLE_NAME.getName()).append(", ").append(Columns.QUN_LIST.getName()).append(", ").append(Columns.IS_SLIDE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SHARECOUNTS.getName()));
            value = values.getAsString(Columns.MEDAL_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.HITCOUNTS.getName()));
            value = values.getAsString(Columns.ROLE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QUN_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIDE.getName()));
        }
    }

    /**
     * Created in version 3
     */
    public static final class table_dynamic_list extends dbContent {

        private static final String LOG_TAG = table_dynamic_list.class.getSimpleName();

        public static final String TABLE_NAME = "table_dynamic_list";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_dynamic_list";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_dynamic_list";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST("image_list", "text"),
            PARENT_LIST("parent_list", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST("subscribe_content_list", "text"),
            SHARECOUNTS("sharecounts", "integer"),
            MEDAL_LIST("medal_list", "text"),
            HITCOUNTS("hitcounts", "integer"),
            ROLE_NAME("role_name", "text"),
            QUN_LIST("qun_list", "text"),
            IS_SLIDE("is_slide", "integer"),
            REPLY_LIST("reply_list", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST.getName(),
                Columns.PARENT_LIST.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST.getName(),
                Columns.SHARECOUNTS.getName(),
                Columns.MEDAL_LIST.getName(),
                Columns.HITCOUNTS.getName(),
                Columns.ROLE_NAME.getName(),
                Columns.QUN_LIST.getName(),
                Columns.IS_SLIDE.getName(),
                Columns.REPLY_LIST.getName()
        };

        private table_dynamic_list() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_dynamic_list | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST.getName() + " " + Columns.IMAGE_LIST.getType() + ", " + Columns.PARENT_LIST.getName() + " " + Columns.PARENT_LIST.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST.getType() + ", " + Columns.SHARECOUNTS.getName() + " " + Columns.SHARECOUNTS.getType() + ", " + Columns.MEDAL_LIST.getName() + " " + Columns.MEDAL_LIST.getType() + ", " + Columns.HITCOUNTS.getName() + " " + Columns.HITCOUNTS.getType() + ", " + Columns.ROLE_NAME.getName() + " " + Columns.ROLE_NAME.getType() + ", " + Columns.QUN_LIST.getName() + " " + Columns.QUN_LIST.getType() + ", " + Columns.IS_SLIDE.getName() + " " + Columns.IS_SLIDE.getType() + ", " + Columns.REPLY_LIST.getName() + " " + Columns.REPLY_LIST.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_dynamic_list | createTable end");
            }
        }

        // Version 3 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_dynamic_list | upgradeTable start");
            }

            if (oldVersion < 3) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_dynamic_list | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST.getName()).append(", ").append(Columns.PARENT_LIST.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST.getName()).append(", ").append(Columns.SHARECOUNTS.getName()).append(", ").append(Columns.MEDAL_LIST.getName()).append(", ").append(Columns.HITCOUNTS.getName()).append(", ").append(Columns.ROLE_NAME.getName()).append(", ").append(Columns.QUN_LIST.getName()).append(", ").append(Columns.IS_SLIDE.getName()).append(", ").append(Columns.REPLY_LIST.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SHARECOUNTS.getName()));
            value = values.getAsString(Columns.MEDAL_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.HITCOUNTS.getName()));
            value = values.getAsString(Columns.ROLE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QUN_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIDE.getName()));
            value = values.getAsString(Columns.REPLY_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_discovery_tuijian extends dbContent {

        private static final String LOG_TAG = table_discovery_tuijian.class.getSimpleName();

        public static final String TABLE_NAME = "table_discovery_tuijian";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_discovery_tuijian";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_discovery_tuijian";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()
        };

        private table_discovery_tuijian() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_tuijian | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_tuijian | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_tuijian | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_tuijian | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_discovery_remen extends dbContent {

        private static final String LOG_TAG = table_discovery_remen.class.getSimpleName();

        public static final String TABLE_NAME = "table_discovery_remen";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_discovery_remen";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_discovery_remen";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()
        };

        private table_discovery_remen() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_remen | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_remen | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_remen | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_remen | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_discovery_zuixin extends dbContent {

        private static final String LOG_TAG = table_discovery_zuixin.class.getSimpleName();

        public static final String TABLE_NAME = "table_discovery_zuixin";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_discovery_zuixin";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_discovery_zuixin";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()
        };

        private table_discovery_zuixin() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_zuixin | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_zuixin | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_zuixin | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_discovery_zuixin | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_subscribe_group extends dbContent {

        private static final String LOG_TAG = table_subscribe_group.class.getSimpleName();

        public static final String TABLE_NAME = "table_subscribe_group";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_subscribe_group";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_subscribe_group";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "integer"),
            NAME("name", "text"),
            FACE("face", "text"),
            DATA("data", "text"),
            PAGE("page", "integer"),
            FANS_COUNT("fans_count", "text"),
            IS_FLAT("is_flat", "integer"),
            IS_FOLLOW("is_follow", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.NAME.getName(),
                Columns.FACE.getName(),
                Columns.DATA.getName(),
                Columns.PAGE.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.IS_FLAT.getName(),
                Columns.IS_FOLLOW.getName()
        };

        private table_subscribe_group() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_subscribe_group | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.DATA.getName() + " " + Columns.DATA.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.IS_FLAT.getName() + " " + Columns.IS_FLAT.getType() + ", " + Columns.IS_FOLLOW.getName() + " " + Columns.IS_FOLLOW.getType() + ", UNIQUE (" + Columns.UID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_subscribe_group | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_subscribe_group | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_subscribe_group | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.DATA.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.IS_FLAT.getName()).append(", ").append(Columns.IS_FOLLOW.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATA.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.FANS_COUNT.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FLAT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOLLOW.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class draftlist extends dbContent {

        private static final String LOG_TAG = draftlist.class.getSimpleName();

        public static final String TABLE_NAME = "draftlist";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-draftlist";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-draftlist";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text"),
            QUN_LIST("qun_list", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName(),
                Columns.QUN_LIST.getName()
        };

        private draftlist() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "draftlist | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", " + Columns.QUN_LIST.getName() + " " + Columns.QUN_LIST.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "draftlist | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "draftlist | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "draftlist | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(", ").append(Columns.QUN_LIST.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QUN_LIST.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class hotfollow extends dbContent {

        private static final String LOG_TAG = hotfollow.class.getSimpleName();

        public static final String TABLE_NAME = "hotfollow";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-hotfollow";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-hotfollow";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            PAGE("page", "integer"),
            UID("uid", "text"),
            NICKNAME("nickname", "text"),
            FACE("face", "text"),
            FACE_ORIGINAL("face_original", "text"),
            ABOUTME("aboutme", "text"),
            IS_FOLLOW("is_follow", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FANS_COUNT("fans_count", "integer"),
            TOPIC_COUNT("topic_count", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.PAGE.getName(),
                Columns.UID.getName(),
                Columns.NICKNAME.getName(),
                Columns.FACE.getName(),
                Columns.FACE_ORIGINAL.getName(),
                Columns.ABOUTME.getName(),
                Columns.IS_FOLLOW.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FANS_COUNT.getName(),
                Columns.TOPIC_COUNT.getName()
        };

        private hotfollow() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "hotfollow | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.FACE_ORIGINAL.getName() + " " + Columns.FACE_ORIGINAL.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", " + Columns.IS_FOLLOW.getName() + " " + Columns.IS_FOLLOW.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FANS_COUNT.getName() + " " + Columns.FANS_COUNT.getType() + ", " + Columns.TOPIC_COUNT.getName() + " " + Columns.TOPIC_COUNT.getType() + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "hotfollow | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "hotfollow | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "hotfollow | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.PAGE.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.FACE_ORIGINAL.getName()).append(", ").append(Columns.ABOUTME.getName()).append(", ").append(Columns.IS_FOLLOW.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FANS_COUNT.getName()).append(", ").append(Columns.TOPIC_COUNT.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE_ORIGINAL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOLLOW.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.FANS_COUNT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TOPIC_COUNT.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_user_group extends dbContent {

        private static final String LOG_TAG = table_user_group.class.getSimpleName();

        public static final String TABLE_NAME = "table_user_group";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_user_group";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_user_group";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            UID("uid", "text"),
            ID("id", "integer"),
            _ORDER("_order", "integer"),
            COUNT("count", "integer"),
            REMARK("remark", "text"),
            NAME("name", "text"),
            DATELINE("dateline", "text"),
            MODE("mode", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.UID.getName(),
                Columns.ID.getName(),
                Columns._ORDER.getName(),
                Columns.COUNT.getName(),
                Columns.REMARK.getName(),
                Columns.NAME.getName(),
                Columns.DATELINE.getName(),
                Columns.MODE.getName()
        };

        private table_user_group() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns._ORDER.getName() + " " + Columns._ORDER.getType() + ", " + Columns.COUNT.getName() + " " + Columns.COUNT.getType() + ", " + Columns.REMARK.getName() + " " + Columns.REMARK.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.MODE.getName() + " " + Columns.MODE.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.UID.getName()).append(", ").append(Columns.ID.getName()).append(", ").append(Columns._ORDER.getName()).append(", ").append(Columns.COUNT.getName()).append(", ").append(Columns.REMARK.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.MODE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.UID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns._ORDER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.COUNT.getName()));
            value = values.getAsString(Columns.REMARK.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MODE.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_user_group_in_dynamic extends dbContent {

        private static final String LOG_TAG = table_user_group_in_dynamic.class.getSimpleName();

        public static final String TABLE_NAME = "table_user_group_in_dynamic";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_user_group_in_dynamic";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_user_group_in_dynamic";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            IS_EDIT("is_edit", "integer"),
            URL("url", "text"),
            NAME("name", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.IS_EDIT.getName(),
                Columns.URL.getName(),
                Columns.NAME.getName()
        };

        private table_user_group_in_dynamic() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group_in_dynamic | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.IS_EDIT.getName() + " " + Columns.IS_EDIT.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", UNIQUE (" + Columns.NAME.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group_in_dynamic | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group_in_dynamic | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_user_group_in_dynamic | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.IS_EDIT.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.NAME.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.IS_EDIT.getName()));
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class topicnews extends dbContent {

        private static final String LOG_TAG = topicnews.class.getSimpleName();

        public static final String TABLE_NAME = "topicnews";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-topicnews";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-topicnews";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            DATELINE("dateline", "text"),
            FACE("face", "text"),
            TID("tid", "integer"),
            NICKNAME("nickname", "text"),
            THUMB("thumb", "text"),
            TITLE("title", "text"),
            TYPE("type", "text"),
            USERNAME("username", "text"),
            DIGCOUNTS("digcounts", "integer"),
            FORWARDS("forwards", "integer"),
            LOADSTATE("loadstate", "integer"),
            REPLYS("replys", "integer"),
            LEVEL("level", "text"),
            VIP_INFO("vip_info", "text"),
            VIP_PIC("vip_pic", "text"),
            FROM_STR("from_str", "text"),
            UID("uid", "integer"),
            CONTENT("content", "text"),
            IMAGE_LIST_JSON("image_list_json", "text"),
            PARENT_LIST_JSON("parent_list_json", "text"),
            IS_FAVOR("is_favor", "integer"),
            IS_DIG("is_dig", "integer"),
            CHANNEL("channel", "text"),
            PAGE("page", "integer"),
            HEADIMG("headimg", "text"),
            PIC_URL("pic_url", "text"),
            IS_SUBSCRIBE("is_subscribe", "integer"),
            SUBSCRIBE_CONTENT_LIST_JSON("subscribe_content_list_json", "text"),
            IS_SLIDE("is_slide", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.DATELINE.getName(),
                Columns.FACE.getName(),
                Columns.TID.getName(),
                Columns.NICKNAME.getName(),
                Columns.THUMB.getName(),
                Columns.TITLE.getName(),
                Columns.TYPE.getName(),
                Columns.USERNAME.getName(),
                Columns.DIGCOUNTS.getName(),
                Columns.FORWARDS.getName(),
                Columns.LOADSTATE.getName(),
                Columns.REPLYS.getName(),
                Columns.LEVEL.getName(),
                Columns.VIP_INFO.getName(),
                Columns.VIP_PIC.getName(),
                Columns.FROM_STR.getName(),
                Columns.UID.getName(),
                Columns.CONTENT.getName(),
                Columns.IMAGE_LIST_JSON.getName(),
                Columns.PARENT_LIST_JSON.getName(),
                Columns.IS_FAVOR.getName(),
                Columns.IS_DIG.getName(),
                Columns.CHANNEL.getName(),
                Columns.PAGE.getName(),
                Columns.HEADIMG.getName(),
                Columns.PIC_URL.getName(),
                Columns.IS_SUBSCRIBE.getName(),
                Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName(),
                Columns.IS_SLIDE.getName()
        };

        private topicnews() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "topicnews | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.TID.getName() + " " + Columns.TID.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.THUMB.getName() + " " + Columns.THUMB.getType() + ", " + Columns.TITLE.getName() + " " + Columns.TITLE.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.USERNAME.getName() + " " + Columns.USERNAME.getType() + ", " + Columns.DIGCOUNTS.getName() + " " + Columns.DIGCOUNTS.getType() + ", " + Columns.FORWARDS.getName() + " " + Columns.FORWARDS.getType() + ", " + Columns.LOADSTATE.getName() + " " + Columns.LOADSTATE.getType() + ", " + Columns.REPLYS.getName() + " " + Columns.REPLYS.getType() + ", " + Columns.LEVEL.getName() + " " + Columns.LEVEL.getType() + ", " + Columns.VIP_INFO.getName() + " " + Columns.VIP_INFO.getType() + ", " + Columns.VIP_PIC.getName() + " " + Columns.VIP_PIC.getType() + ", " + Columns.FROM_STR.getName() + " " + Columns.FROM_STR.getType() + ", " + Columns.UID.getName() + " " + Columns.UID.getType() + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", " + Columns.IMAGE_LIST_JSON.getName() + " " + Columns.IMAGE_LIST_JSON.getType() + ", " + Columns.PARENT_LIST_JSON.getName() + " " + Columns.PARENT_LIST_JSON.getType() + ", " + Columns.IS_FAVOR.getName() + " " + Columns.IS_FAVOR.getType() + ", " + Columns.IS_DIG.getName() + " " + Columns.IS_DIG.getType() + ", " + Columns.CHANNEL.getName() + " " + Columns.CHANNEL.getType() + ", " + Columns.PAGE.getName() + " " + Columns.PAGE.getType() + ", " + Columns.HEADIMG.getName() + " " + Columns.HEADIMG.getType() + ", " + Columns.PIC_URL.getName() + " " + Columns.PIC_URL.getType() + ", " + Columns.IS_SUBSCRIBE.getName() + " " + Columns.IS_SUBSCRIBE.getType() + ", " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName() + " " + Columns.SUBSCRIBE_CONTENT_LIST_JSON.getType() + ", " + Columns.IS_SLIDE.getName() + " " + Columns.IS_SLIDE.getType() + ", UNIQUE (" + Columns.TID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "topicnews | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "topicnews | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "topicnews | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.DATELINE.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.TID.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.THUMB.getName()).append(", ").append(Columns.TITLE.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.USERNAME.getName()).append(", ").append(Columns.DIGCOUNTS.getName()).append(", ").append(Columns.FORWARDS.getName()).append(", ").append(Columns.LOADSTATE.getName()).append(", ").append(Columns.REPLYS.getName()).append(", ").append(Columns.LEVEL.getName()).append(", ").append(Columns.VIP_INFO.getName()).append(", ").append(Columns.VIP_PIC.getName()).append(", ").append(Columns.FROM_STR.getName()).append(", ").append(Columns.UID.getName()).append(", ").append(Columns.CONTENT.getName()).append(", ").append(Columns.IMAGE_LIST_JSON.getName()).append(", ").append(Columns.PARENT_LIST_JSON.getName()).append(", ").append(Columns.IS_FAVOR.getName()).append(", ").append(Columns.IS_DIG.getName()).append(", ").append(Columns.CHANNEL.getName()).append(", ").append(Columns.PAGE.getName()).append(", ").append(Columns.HEADIMG.getName()).append(", ").append(Columns.PIC_URL.getName()).append(", ").append(Columns.IS_SUBSCRIBE.getName()).append(", ").append(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName()).append(", ").append(Columns.IS_SLIDE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.TID.getName()));
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THUMB.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TITLE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.USERNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DIGCOUNTS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FORWARDS.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOADSTATE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.REPLYS.getName()));
            value = values.getAsString(Columns.LEVEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_INFO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VIP_PIC.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_STR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.UID.getName()));
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PARENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FAVOR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_DIG.getName()));
            value = values.getAsString(Columns.CHANNEL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PAGE.getName()));
            value = values.getAsString(Columns.HEADIMG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PIC_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SUBSCRIBE.getName()));
            value = values.getAsString(Columns.SUBSCRIBE_CONTENT_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SLIDE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class circle extends dbContent {

        private static final String LOG_TAG = circle.class.getSimpleName();

        public static final String TABLE_NAME = "circle";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-circle";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-circle";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            QID("qid", "text"),
            NAME("name", "text"),
            MEMBER_NUM("member_num", "text"),
            ICON("icon", "text"),
            THREAD_NUM("thread_num", "text"),
            DESC("desc", "text"),
            GVIEW_PERM("gview_perm", "integer"),
            JOIN_TYPE("join_type", "integer"),
            DATELINE("dateline", "text"),
            IS_QUN_MEMBER("is_qun_member", "integer"),
            IS_FOUNDER("is_founder", "integer"),
            FACE("face", "text"),
            NICKNAME("nickname", "text"),
            FOUNDERUID("founderuid", "text"),
            IS_LOCK("is_lock", "integer"),
            TOPIC_LIST_JSON("topic_list_json", "text"),
            LOCAL_TYPE("local_type", "integer"),
            LOCAL_URL("local_url", "text"),
            SHORT_NAME("short_name", "text"),
            POS("pos", "integer"),
            APPLY_TIME("apply_time", "text"),
            ABOUTME("aboutme", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.QID.getName(),
                Columns.NAME.getName(),
                Columns.MEMBER_NUM.getName(),
                Columns.ICON.getName(),
                Columns.THREAD_NUM.getName(),
                Columns.DESC.getName(),
                Columns.GVIEW_PERM.getName(),
                Columns.JOIN_TYPE.getName(),
                Columns.DATELINE.getName(),
                Columns.IS_QUN_MEMBER.getName(),
                Columns.IS_FOUNDER.getName(),
                Columns.FACE.getName(),
                Columns.NICKNAME.getName(),
                Columns.FOUNDERUID.getName(),
                Columns.IS_LOCK.getName(),
                Columns.TOPIC_LIST_JSON.getName(),
                Columns.LOCAL_TYPE.getName(),
                Columns.LOCAL_URL.getName(),
                Columns.SHORT_NAME.getName(),
                Columns.POS.getName(),
                Columns.APPLY_TIME.getName(),
                Columns.ABOUTME.getName()
        };

        private circle() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "circle | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.QID.getName() + " " + Columns.QID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.MEMBER_NUM.getName() + " " + Columns.MEMBER_NUM.getType() + ", " + Columns.ICON.getName() + " " + Columns.ICON.getType() + ", " + Columns.THREAD_NUM.getName() + " " + Columns.THREAD_NUM.getType() + ", " + Columns.DESC.getName() + " " + Columns.DESC.getType() + ", " + Columns.GVIEW_PERM.getName() + " " + Columns.GVIEW_PERM.getType() + ", " + Columns.JOIN_TYPE.getName() + " " + Columns.JOIN_TYPE.getType() + ", " + Columns.DATELINE.getName() + " " + Columns.DATELINE.getType() + ", " + Columns.IS_QUN_MEMBER.getName() + " " + Columns.IS_QUN_MEMBER.getType() + ", " + Columns.IS_FOUNDER.getName() + " " + Columns.IS_FOUNDER.getType() + ", " + Columns.FACE.getName() + " " + Columns.FACE.getType() + ", " + Columns.NICKNAME.getName() + " " + Columns.NICKNAME.getType() + ", " + Columns.FOUNDERUID.getName() + " " + Columns.FOUNDERUID.getType() + ", " + Columns.IS_LOCK.getName() + " " + Columns.IS_LOCK.getType() + ", " + Columns.TOPIC_LIST_JSON.getName() + " " + Columns.TOPIC_LIST_JSON.getType() + ", " + Columns.LOCAL_TYPE.getName() + " " + Columns.LOCAL_TYPE.getType() + ", " + Columns.LOCAL_URL.getName() + " " + Columns.LOCAL_URL.getType() + ", " + Columns.SHORT_NAME.getName() + " " + Columns.SHORT_NAME.getType() + ", " + Columns.POS.getName() + " " + Columns.POS.getType() + ", " + Columns.APPLY_TIME.getName() + " " + Columns.APPLY_TIME.getType() + ", " + Columns.ABOUTME.getName() + " " + Columns.ABOUTME.getType() + ", UNIQUE (" + Columns.QID.getName() + ", " + Columns.MEMBER_NUM.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "circle | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "circle | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "circle | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.QID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.MEMBER_NUM.getName()).append(", ").append(Columns.ICON.getName()).append(", ").append(Columns.THREAD_NUM.getName()).append(", ").append(Columns.DESC.getName()).append(", ").append(Columns.GVIEW_PERM.getName()).append(", ").append(Columns.JOIN_TYPE.getName()).append(", ").append(Columns.DATELINE.getName()).append(", ").append(Columns.IS_QUN_MEMBER.getName()).append(", ").append(Columns.IS_FOUNDER.getName()).append(", ").append(Columns.FACE.getName()).append(", ").append(Columns.NICKNAME.getName()).append(", ").append(Columns.FOUNDERUID.getName()).append(", ").append(Columns.IS_LOCK.getName()).append(", ").append(Columns.TOPIC_LIST_JSON.getName()).append(", ").append(Columns.LOCAL_TYPE.getName()).append(", ").append(Columns.LOCAL_URL.getName()).append(", ").append(Columns.SHORT_NAME.getName()).append(", ").append(Columns.POS.getName()).append(", ").append(Columns.APPLY_TIME.getName()).append(", ").append(Columns.ABOUTME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.QID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MEMBER_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ICON.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THREAD_NUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESC.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.GVIEW_PERM.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.JOIN_TYPE.getName()));
            value = values.getAsString(Columns.DATELINE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_QUN_MEMBER.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.IS_FOUNDER.getName()));
            value = values.getAsString(Columns.FACE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NICKNAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FOUNDERUID.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_LOCK.getName()));
            value = values.getAsString(Columns.TOPIC_LIST_JSON.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCAL_TYPE.getName()));
            value = values.getAsString(Columns.LOCAL_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SHORT_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.POS.getName()));
            value = values.getAsString(Columns.APPLY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ABOUTME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class table_local_state extends dbContent {

        private static final String LOG_TAG = table_local_state.class.getSimpleName();

        public static final String TABLE_NAME = "table_local_state";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/db-table_local_state";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/db-table_local_state";

        public static final Uri CONTENT_URI = Uri.parse(dbContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            _ID(BaseColumns._ID, "integer"),
            ID("id", "text"),
            READ_STATE("read_state", "text"),
            LASTTIME("lasttime", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns._ID.getName(),
                Columns.ID.getName(),
                Columns.READ_STATE.getName(),
                Columns.LASTTIME.getName()
        };

        private table_local_state() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns._ID.getName() + " " + Columns._ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.READ_STATE.getName() + " " + Columns.READ_STATE.getType() + ", " + Columns.LASTTIME.getName() + " " + Columns.LASTTIME.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | createTable end");
            }
        }

        // Version 1 : Creation of the table
        // Version 2 - 3 : No changes
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }

            if (oldVersion < newVersion) {
                // No more changes since version 1 so jump to newVersion
                oldVersion = newVersion;
            }

            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (dbProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "table_local_state | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("REPLACE INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.READ_STATE.getName()).append(", ").append(Columns.LASTTIME.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.ID.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.READ_STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LASTTIME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}


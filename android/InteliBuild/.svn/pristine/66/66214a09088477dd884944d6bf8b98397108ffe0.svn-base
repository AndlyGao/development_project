package com.bibinet.intelibuild.serialport;

import android.os.Handler;
import android.os.Message;
import android.serialport.SerialPort;
import android.util.Log;

import com.bibinet.intelibuild.project.util.LogUtils;
import com.bibinet.intelibuild.project.view.activity.MainActivity;
import com.speedata.libutils.DataConversionUtils;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Timer;
import java.util.TimerTask;

public class SerialPortManager {
    private Timer mReadSerialTimer;
    private SerialPort mSerialPort;

    private static SerialPortManager serialPortManager;

    private SerialPortManager() {
        mSerialPort = new SerialPort();
        mReadSerialTimer = new Timer();
    }

    public static SerialPortManager getInstance() {
        if (serialPortManager == null) {
            serialPortManager = new SerialPortManager();
        }
        return serialPortManager;
    }

    private int fd;

    private boolean isOpenDevice = false;

    public boolean openDevice() {
        try {
            mSerialPort.OpenSerial(SerialPortConfig.PORT, SerialPortConfig.BAUDRATE,
                    8, SerialPortConfig.STOP_BIT, SerialPortConfig.CHECK_BIT);
            // System.out.println(Getstopbit() + "!!!!!!!ceshi");
            LogUtils.e("open", "open " + SerialPortConfig.PORT + " by  " + SerialPortConfig.BAUDRATE
                    + " baurate success");
            LogUtils.e("open", "openSerialPort");
            fd = mSerialPort.getFd();
            LogUtils.e("fd", "open fd=" + fd);
            isOpenDevice = true;
        } catch (SecurityException e) {
            LogUtils.e("throw", "open " + SerialPortConfig.PORT + " by  " + SerialPortConfig.BAUDRATE
                    + " baurate failed");

            e.printStackTrace();
            isOpenDevice = false;
        } catch (IOException e) {
            LogUtils.e("throw", "open " + SerialPortConfig.PORT + " by  " + SerialPortConfig.BAUDRATE
                    + " baurate failed");
            e.printStackTrace();
            isOpenDevice = false;
        }
        return isOpenDevice;
    }

    private OnReadResultListener onReadResultListener;

    public void read(OnReadResultListener listener) {
        onReadResultListener = listener;
        ReadTimerTask readTimerTask = new ReadTimerTask();
        if (mReadSerialTimer == null) {
            mReadSerialTimer = new Timer();
            System.out.println("mReadSerialTimer new  mReadSerialTimer");
        }
        // 清缓存
        // sp.clearPort();
        mReadSerialTimer.schedule(readTimerTask, 10, TIME_TO_READDATA);
        System.out.println("mReadSerialTimer");
    }

    public void pause() {
        mReadSerialTimer.cancel();
        mReadSerialTimer = null;
        System.gc();
    }

    public void closeDevice() {
        if (isOpenDevice) {
            if (mReadSerialTimer != null) {
                mReadSerialTimer.cancel();
                mReadSerialTimer = null;
            }
            mSerialPort.CloseSerial(fd);
            isOpenDevice = false;
            serialPortManager = null;
            System.gc();
        }
    }

    private static final int TIME_TO_READDATA = 500;

    private byte[] temp1 = new byte[1024];
    private byte[] temp2 = new byte[1024];

    private class ReadTimerTask extends TimerTask {
        @Override
        public void run() {
            try {
                fd = mSerialPort.getFd();
                // Log.d(TAG, "read fd=" + fd);
                temp1 = mSerialPort.ReadSerial(fd, 1024);
                if (temp1 != null) {
                    // System.out.println(buff);
                    temp2 = temp1;
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = temp1;
                    handler.sendMessage(msg);
                    // Log.e(TAG, "read");
                }
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

    }

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            if (msg.what == 1) {
                super.handleMessage(msg);
                temp2 = (byte[]) msg.obj;
                Log.d("read", "read len=" + temp2.length);
                if (false) {
                    //String accept_show = bytesToHexString(temp2);
                    //EditTextaccept.append(accept_show + "\n");
                } else {
                    String result = DataConversionUtils
                            .byteArrayToAscii(temp2);
                    if (onReadResultListener != null) {
                        onReadResultListener.onResult(result);
                    }
                }
            }
        }
    };

    public interface OnReadResultListener {
        void onResult(String result);
    }
}

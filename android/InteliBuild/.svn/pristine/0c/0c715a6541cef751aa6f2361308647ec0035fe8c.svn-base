package com.bibinet.intelibuild.project.view.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.bibinet.intelibuild.R;
import com.bibinet.intelibuild.project.bean.ProductInfoBean;
import com.bibinet.intelibuild.project.model.BaseModel;
import com.bibinet.intelibuild.project.model.InspectionModel;
import com.bibinet.intelibuild.project.model.SampleModel;
import com.bibinet.intelibuild.project.model.VideoUploadResultModel;
import com.bibinet.intelibuild.project.net.emit.SetSamplingEmit;
import com.bibinet.intelibuild.project.net.emit.UploadVideoEmit;
import com.bibinet.intelibuild.project.net.firing.SamplingFiring;
import com.bibinet.intelibuild.project.net.firing.UploadVideoFiring;
import com.bibinet.intelibuild.project.util.FileUtils;
import com.bibinet.intelibuild.project.util.LogUtils;
import com.bibinet.intelibuild.project.video.util.VideoMananger;
import com.bibinet.intelibuild.project.view.dialog.HintFailDialog;
import com.bibinet.intelibuild.project.view.dialog.WaitDialog;
import com.bibinet.intelibuild.project.view.expand.LabelWriteActivity;
import com.bibinet.intelibuild.project.view.expand.TitleActivity;

import java.io.Serializable;
import java.util.List;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * 写入采样品标签结果的页面 成功或失败
 * Created by bibinet on 2017-12-23.
 */

public class ProductCheckResultActivity extends TitleActivity implements View.OnClickListener,UploadVideoEmit {

    private static final String DATA_MESSAGE = "DATA_MESSAGE";
    private static final String DATA_SAMPLE = "DATA_SAMPLE";
    private static final String DATA_CURRENT = "DATA_CURRENT";
    //private ProductInfoModel productInfoModel;

    private SamplingFiring samplingFiring;

    @BindView(R.id.act_product_check_write_contract_no)
    TextView contractNoTV;
    @BindView(R.id.act_product_check_write_contract_name)
    TextView contractNameTV;
    @BindView(R.id.act_product_check_write_product_name)
    TextView productNameTV;
    @BindView(R.id.act_product_check_write_sample_no)
    TextView sampleNoTV;
    @BindView(R.id.act_product_check_write_check_project)
    TextView checkProjectTV;
    @BindView(R.id.act_product_check_write_standard_of_execution)
    TextView standardOfExecutionTV;
    @BindView(R.id.act_product_check_write_check_instrument)
    TextView checkInstrumentTV;

    @BindView(R.id.act_product_check_result_confirm)
    Button confirmB;
    private String fileName;
    private WaitDialog mWaitDialog;

    @Override
    protected int getTitleString() {
        return R.string.str_write_data_hint;
    }

    private List<InspectionModel> inspectionModelList;
    private ProductInfoBean productInfoBean;


    //通过计算得到当前需要写入的 采样品和 数据展示的检验品
    private SampleModel sampleModel;
    private InspectionModel inspectionModel;

    private int currentCount;
    private int maxCount;

    @Override
    protected void onTitleCreate(Bundle savedInstanceState) {
        mWaitDialog = new WaitDialog(this);
//        samplingFiring = new SamplingFiring(this);
        productInfoBean = (ProductInfoBean) getIntent().getSerializableExtra(DATA_MESSAGE);
        inspectionModelList = (List<InspectionModel>) getIntent().getSerializableExtra(DATA_SAMPLE);
        currentCount = getIntent().getIntExtra("DATA_CURRENT", 0);
        //得到当前关联的检验品和采样品
        //用来计算到第几个sample了
        int cnt = 0;
        for (int i = 0; i < inspectionModelList.size(); i++) {
            for (int j = 0; j < inspectionModelList.get(i).getSamples().size(); j++) {
                if (cnt == currentCount) {
                    sampleModel = inspectionModelList.get(i).getSamples().get(j);
                    inspectionModel = inspectionModelList.get(i);
                }
                cnt++;
            }
        }
        maxCount = cnt;
        //introTV.setText("第" + (currentCount + 1) + "个样品标签数据（共" + maxCount + "个）");

        //初始化界面展示
        contractNoTV.setText(productInfoBean.getProductInfoModel().getContractCode());
        contractNameTV.setText(productInfoBean.getContractInfoModel().getName());
        productNameTV.setText(productInfoBean.getProductInfoModel().getName());
        sampleNoTV.setText(sampleModel.getName());
        checkProjectTV.setText(inspectionModel.getName());
        standardOfExecutionTV.setText(productInfoBean.getProductInfoModel().getStandard());
        checkInstrumentTV.setText(inspectionModel.getDeviceName());

        //判断是否达到最大值了
        if((currentCount+1) == maxCount){
            confirmB.setText("采样完成");
        }else{
            confirmB.setText("写入下一个样品标签数据");
        }
    }

    @Override
    protected int getTitleLayoutId() {
        return R.layout.activity_product_check_result;
    }



    public static void start(Context context, ProductInfoBean productInfoBean, List<InspectionModel> inspectionModelList, int currentCount) {
        Intent intent = new Intent(context, ProductCheckResultActivity.class);
        intent.putExtra(DATA_MESSAGE, productInfoBean);
        intent.putExtra(DATA_SAMPLE, (Serializable) inspectionModelList);
        intent.putExtra(DATA_CURRENT, currentCount);
        context.startActivity(intent);
    }


    @OnClick(R.id.act_product_check_result_confirm)
    void confirm() {
        if(maxCount == (currentCount+1)){
            //TODO 关闭录像
            closeMonitor(ProductCheckResultActivity.this);
        } else {
            //调用写入 或者终结 目前不做终结页面 直接回首页
            ProductCheckWriteActivity.start(this, productInfoBean, inspectionModelList, ++currentCount);
            finish();
        }
    }

    private void closeMonitor(Activity activity) {
       if (VideoMananger.getInst().stopRecord()) {
           MainActivity.start(this);
       }
//        mWaitDialog.open();
//        UploadVideoFiring firing = new UploadVideoFiring(this);
//        fileName = FileUtils.createInnerAppFile(activity, FileUtils.MONITOR_VIDEO_FILE_NAME);
//        firing.uploadVideo(fileName, System.currentTimeMillis() + "",productInfoBean.getProductInfoModel().get);
    }

    @Override
    public void onClick(View v) {

    }

    @Override
    public void onUploadSuccess(VideoUploadResultModel model) {
        FileUtils.deleteFile(fileName);
//        mWaitDialog.close();
        MainActivity.start(this);
    }

    @Override
    public void onUploadFail(String msg) {
//        mWaitDialog.close();
    }
}

package com.bibinet.intelibuild.project.adapter;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.widget.RecyclerView;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bibinet.intelibuild.R;
import com.bibinet.intelibuild.project.bean.SamplingBean;
import com.bibinet.intelibuild.project.bean.SelectCheckProjectAdapterBean;
import com.bibinet.intelibuild.project.model.InspectionModel;
import com.bibinet.intelibuild.project.model.ProductInfoModel;
import com.bibinet.intelibuild.project.model.SampleModel;
import com.bibinet.intelibuild.project.util.Common;
import com.bibinet.intelibuild.project.util.LogUtils;
import com.bibinet.intelibuild.project.utils.PickerViewUtils;
import com.bibinet.intelibuild.project.view.dialog.ProductCheckSelectDialog;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by bibinet on 2017-12-27.
 */

public class ProductCheckSelectAdapter extends RecyclerView.Adapter<ProductCheckSelectAdapter.ProductCheckSelectHolder> implements View.OnClickListener {
    private int[] image = new int[]{R.drawable.selectcheck_selector1, R.drawable.selectcheck_selector2, R.drawable.selectcheck_selector3,
            R.drawable.selectcheck_selector4, R.drawable.selectcheck_selector5, R.drawable.selectcheck_selector6, R.drawable.selectcheck_selector7,
            R.drawable.selectcheck_selector8, R.drawable.selectcheck_selector9};

    private Context context;

    private SparseBooleanArray sparseBooleanArray;//用于存放选中item的位置
    private SparseIntArray sparseIntArray;//用于存放选中的item的标签个数

    private ProductCheckSelectDialog productCheckSelectDialog;

    private ProductInfoModel productInfoModel;


    private int clickPos = -1;

    public ProductCheckSelectAdapter(Context context, ProductInfoModel productInfoModel) {
        this.context = context;
        this.productInfoModel = productInfoModel;
        this.sparseBooleanArray = new SparseBooleanArray(productInfoModel.getInspectionItems().size());
        this.sparseIntArray = new SparseIntArray(productInfoModel.getInspectionItems().size());
    }

    @Override
    public ProductCheckSelectHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(context).inflate(R.layout.adapter_product_check_select, null);
        ProductCheckSelectHolder productCheckSelectHolder = new ProductCheckSelectHolder(view);
        return productCheckSelectHolder;
    }

    @Override
    public void onBindViewHolder(final ProductCheckSelectHolder holder, final int position) {
        InspectionModel model = productInfoModel.getInspectionItems().get(position);
        model.setIsSampled(Common.isListEmpty(model.getSamples()) ? 0 : 1);
//        holder.imgIV.setImageResource(image[position % image.length]);
        holder.nameTV.setText(model.getName());

        //先更新点击位置变化圈
        if (clickPos == position && sparseBooleanArray.get(position)) {
            holder.mainV.setSelected(true);
        } else {
            holder.mainV.setSelected(false);
        }

        //暂时检测不合格当作已检测处理（后续如果需要改，修改判断条件即可）
        boolean isCheck = (model.getStatus() == InspectionModel.STATE_NOT_CHECK_OR_SAMPLE) ? false : true;
        if (!isCheck) {
            boolean isSampled = model.getIsSampled() == InspectionModel.STATE_YET_SAMPLE  ? true : false;
            holder.signV.setVisibility(isSampled ? View.VISIBLE : View.GONE);
            if (sparseBooleanArray.get(position)) {
                holder.markV.setVisibility(View.VISIBLE);
                holder.tagTV.setVisibility(View.VISIBLE);
                holder.tagTV.setText(sparseIntArray.get(position) + "");
//                holder.mainV.setSelected(true);
            } else {
                holder.markV.setVisibility(View.GONE);
                holder.tagTV.setVisibility(View.GONE);
//                holder.mainV.setSelected(false);
            }
        } else {
            holder.signV.setVisibility(View.GONE);
            holder.markV.setVisibility(View.GONE);
            holder.tagTV.setVisibility(View.GONE);
        }
        holder.mainV.setEnabled(!isCheck);
        holder.imgIV.setSelected(!isCheck);
        holder.nameTV.setSelected(!isCheck);

        //LogUtils.e("sdfasdf", model.getExecutionTimes() + "-" + model.getStatus());
        holder.mainV.setTag(position);
        holder.mainV.setOnClickListener(this);
    }

    @Override
    public int getItemCount() {
        return productInfoModel.getInspectionItems().size();
    }

    @Override
    public void onClick(View v) {
        final int position = (int) v.getTag();
        InspectionModel model = productInfoModel.getInspectionItems().get(position);
        boolean isSampled = model.getIsSampled() == InspectionModel.STATE_YET_SAMPLE ? true : false;
        if (isSampled) {
            final boolean isSelectY = sparseBooleanArray.get(position);
            //取消选择
            if (isSelectY) {
                sparseBooleanArray.put(position, !isSelectY);
            } else {
                if (productCheckSelectDialog == null) {
                    productCheckSelectDialog = new ProductCheckSelectDialog(context);
                }
                productCheckSelectDialog.open(model.getIntExecutionTimes(), new ProductCheckSelectDialog.OnProductCheckSelectDialogListener() {
                    @Override
                    public void onConfirm(String selectText) {
                        sparseBooleanArray.put(position, !isSelectY);
                        sparseIntArray.put(position, Integer.valueOf(selectText));

                        clickPos = position;
                        notifyDataSetChanged();
                    }
                });
            }
        } else {
            boolean isSelect = sparseBooleanArray.get(position);
            sparseBooleanArray.put(position, !isSelect);
            if (!isSelect) {
                sparseIntArray.put(position, Integer.valueOf(model.getIntExecutionTimes()));
                clickPos = position;
            }
        }
        notifyDataSetChanged();
    }

    public List<InspectionModel> getInspectionModelForSampleList() {
        List<InspectionModel> inspectionModelList = new ArrayList<InspectionModel>();
        for (int i = 0; i < productInfoModel.getInspectionItems().size(); i++) {
            if (sparseBooleanArray.get(i)) {
                InspectionModel inspectionModel = productInfoModel.getInspectionItems().get(i);
                //更新状态
                inspectionModel.setIsSampled(InspectionModel.STATE_YET_SAMPLE);
                //拼接采样品
                List<SampleModel> sm = inspectionModel.getSamples();
                //新选择的采样品
                List<SampleModel> newSm = addSampling(i, inspectionModel);
                //sm.addAll(newSm);
                //设置新选择的采样品，原来的不要了
                inspectionModel.setSamples(newSm);
                //添加要更新的检验品
                inspectionModelList.add(inspectionModel);
            }
            LogUtils.e("res", "res=" + sparseBooleanArray.get(i) + "-");
        }
        return inspectionModelList;
    }


    public List<InspectionModel> getInspectionModelList() {
        List<InspectionModel> inspectionModelList = new ArrayList<InspectionModel>();
        for (int i = 0; i < productInfoModel.getInspectionItems().size(); i++) {
            if (sparseBooleanArray.get(i)) {
                InspectionModel inspectionModel = productInfoModel.getInspectionItems().get(i);
                //更新状态
                inspectionModel.setIsSampled(InspectionModel.STATE_YET_SAMPLE);
                //拼接采样品
                List<SampleModel> sm = inspectionModel.getSamples();
                //新选择的采样品
                List<SampleModel> newSm = addSampling(i, inspectionModel);
                sm.addAll(newSm);
                //添加要更新的检验品
                inspectionModelList.add(inspectionModel);
            }
            LogUtils.e("res", "res=" + sparseBooleanArray.get(i) + "-");
        }
        return inspectionModelList;
    }

    private List<SampleModel> addSampling(int i, InspectionModel inspectionItem) {
        List<SampleModel> samplingBeanList = new ArrayList<SampleModel>();
        if (sparseBooleanArray.get(i)) {
            //循环内部标签的次数
            for (int j = 0; j < sparseIntArray.get(i); j++) {
                int countTag = inspectionItem.getSamples().size() + j + 1;
                SampleModel samplingBean = new SampleModel();
                samplingBean.setName(inspectionItem.getName() + "-" + countTag);
                samplingBean.setCode(countTag + "");
                samplingBean.setType(inspectionItem.getType());
                samplingBean.setProductInstanceId(productInfoModel.getObjectId());
                samplingBean.setInspectionInstanceId(inspectionItem.getObjectId());
                samplingBean.setMaterialId(inspectionItem.getMaterialId());
                samplingBean.setProductName(productInfoModel.getName());
                samplingBean.setLength(inspectionItem.getExecutionTimes());
                samplingBean.setExecutionTime(System.currentTimeMillis() + "");
                samplingBeanList.add(samplingBean);
            }
        }
        return samplingBeanList;
    }

    //得到采样品列表 进行一对一上传
    public List<SampleModel> getSampleModelList() {
        List<SampleModel> sampleModelList = new ArrayList<SampleModel>();
        for (int i = 0; i < productInfoModel.getInspectionItems().size(); i++) {
            if (sparseBooleanArray.get(i)) {
                InspectionModel inspectionModel = productInfoModel.getInspectionItems().get(i);
                //更新状态
                inspectionModel.setIsSampled(InspectionModel.STATE_YET_SAMPLE);
                //原数据自带的采样品 不用理会
                List<SampleModel> sm = inspectionModel.getSamples();
                //新选择的采样品
                List<SampleModel> newSm = addSampling(i, inspectionModel);
                //添加要更新的检验品
                sampleModelList.addAll(newSm);
            }
            LogUtils.e("res", "res=" + sparseBooleanArray.get(i) + "-");
        }
        return sampleModelList;
    }

    class ProductCheckSelectHolder extends RecyclerView.ViewHolder {
        @BindView(R.id.ada_product_check_select_img)
        ImageView imgIV;
        @BindView(R.id.ada_product_check_select_name)
        TextView nameTV;
        @BindView(R.id.ada_product_check_select_sign)
        View signV;
        @BindView(R.id.ada_product_check_select_tag)
        TextView tagTV;
        @BindView(R.id.ada_product_check_select_mark)
        View markV;
        @BindView(R.id.ada_product_check_select)
        View mainV;

        public ProductCheckSelectHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
        }
    }
}

package com.bibinet.intelibuild.project.view.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.bibinet.intelibuild.R;
import com.bibinet.intelibuild.ocr.ui.camera.OcrActivity;
import com.bibinet.intelibuild.project.application.IntelBuildApplication;
import com.bibinet.intelibuild.project.bean.SampleInfoBean;
import com.bibinet.intelibuild.project.bean.SamplingModifyBean;
import com.bibinet.intelibuild.project.bean.StatusBean;
import com.bibinet.intelibuild.project.model.BaseModel;
import com.bibinet.intelibuild.project.model.ContractInfoModel;
import com.bibinet.intelibuild.project.model.IsSampleCheckModel;
import com.bibinet.intelibuild.project.model.OcrModel;
import com.bibinet.intelibuild.project.model.ProductInfoModel;
import com.bibinet.intelibuild.project.model.UserModel;
import com.bibinet.intelibuild.project.net.emit.GetOcrProtocolEmit;
import com.bibinet.intelibuild.project.net.emit.IsSamplingCheckEmit;
import com.bibinet.intelibuild.project.net.emit.ModifySamplingEmit;
import com.bibinet.intelibuild.project.net.emit.SetContractStatusEmit;
import com.bibinet.intelibuild.project.net.emit.SetProductStatusEmit;
import com.bibinet.intelibuild.project.net.firing.ContractInfoFiring;
import com.bibinet.intelibuild.project.net.firing.ProductInfoFiring;
import com.bibinet.intelibuild.project.net.firing.ProtocolFiring;
import com.bibinet.intelibuild.project.net.firing.SamplingFiring;
import com.bibinet.intelibuild.project.net.firing.SamplingModifyFiring;
import com.bibinet.intelibuild.project.util.FileUtils;
import com.bibinet.intelibuild.project.util.SPHelper;
import com.bibinet.intelibuild.project.util.ToastUtils;
import com.bibinet.intelibuild.project.video.util.VideoMananger;
import com.bibinet.intelibuild.project.view.activity.OcrDistinguishActivity;
import com.bibinet.intelibuild.project.view.activity.OcrTestActivity;
import com.bibinet.intelibuild.project.view.activity.ProductCheckSelectActivity;
import com.bibinet.intelibuild.project.view.activity.SerialPortActivity;
import com.bibinet.intelibuild.project.view.base.BaseFragment;
import com.bibinet.intelibuild.project.view.dialog.WaitDialog;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * 样品信息确认界面
 * Created by bibinet on 2017-12-22.
 */

public class SampleInfoEnsureFragment extends BaseFragment implements IsSamplingCheckEmit, GetOcrProtocolEmit,ModifySamplingEmit {
    private final String PRODUCT_INFO = "PRODUCT_INFO";
    private final String CONTRACT_INFO = "CONTRACT_INFO";
    private final String TYPE_INSPECT_OCR = "1";

    @BindView(R.id.act_sample_check_select_product_name)
    TextView sampleInfoEnsureTV;

    @BindView(R.id.fra_sample_info_check_hint_rl)
    View sampleInfoHintView;
    @BindView(R.id.fra_sample_info_check_hint_tv)
    TextView sampleInfoHintTV;
    @BindView(R.id.fra_sample_info_check_hint_img)
    ImageView sampleInfoHintImg;
    @BindView(R.id.fra_sample_info_ensure_confirm)
    Button sampleInfoEnsureBtn;

    @BindView(R.id.fra_sample_info_contract_no)
    TextView contractNoTV;
    @BindView(R.id.fra_sample_info_contract_name)
    TextView contractNameTV;
    @BindView(R.id.fra_sample_info_product_name)
    TextView productNameTV;
    @BindView(R.id.fra_sample_info_sample_no)
    TextView sampleNoTV;
    @BindView(R.id.fra_sample_info_check_project)
    TextView checkProjectTV;
    @BindView(R.id.fra_sample_info_standard_of_execution)
    TextView standardOfExecutionTV;
    @BindView(R.id.fra_sample_info_check_instrument)
    TextView checkInstrumentTV;

    @OnClick(R.id.fra_sample_info_ensure_again_scan)
    void againScan() {
        getActivity().finish();
    }

    private boolean isContractCorrect = false;
    private boolean isProductCorrect = false;

    private WaitDialog waitDialog;

    private SamplingFiring samplingFiring;
    private ProtocolFiring protocolFiring;

    @OnClick(R.id.fra_sample_info_ensure_confirm)
    void coinfirm() {

        SamplingModifyBean bean = new SamplingModifyBean();
        bean.setSampleId(getSampleInfoBean().getSampleModel().getObjectId());
        bean.setSnCode(SPHelper.getInst().getString(SPHelper.KEY_CHECK_MONTIOR_SN));
        UserModel model = IntelBuildApplication.getInstance().getUserModel();
        if (model != null) {
            bean.setExecutor(model.getObjectId());
        }
        new SamplingModifyFiring(this).modifySampling(bean);
        waitDialog.open();
        //判断协议是否为空，如果为空，进行请求，否则直接调用
        if(ocrModel == null){
            protocolFiring.getProtocol(getSampleInfoBean().getInspectionModel().getDevices().get(0).getObjectId());
        }else{
            next();
        }
    }

    private void startSerialPort() {
        SerialPortActivity.start(getActivity(), getSampleInfoBean());
    }

    private void startOcr() {
        OcrDistinguishActivity.start(getActivity(), ocrModel, getSampleInfoBean());
    }

    public SampleInfoEnsureFragment setSampleInfoBean(SampleInfoBean sampleInfoBean) {
        setSerializable(PRODUCT_INFO, sampleInfoBean);
        return this;
    }

    public SampleInfoBean getSampleInfoBean() {
        return (SampleInfoBean) getSerializable(PRODUCT_INFO);
    }

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_sample_info_ensure;
    }

    @Override
    protected void onBaseViewCreated(View view, Bundle savedInstanceState) {
        waitDialog = new WaitDialog(getActivity());
        samplingFiring = new SamplingFiring(this);
        protocolFiring = new ProtocolFiring(this);
        //LogUtils.e("xcxcv","-"+contractNoTV+"-"+getProductInfoModel()+"-"+getContractInfoModel());
        contractNoTV.setText(getSampleInfoBean().getProductInfoModel().getContractCode());
        contractNameTV.setText(getSampleInfoBean().getContractInfoModel().getName());
        productNameTV.setText(getSampleInfoBean().getProductInfoModel().getName());
        sampleNoTV.setText(getSampleInfoBean().getSampleModel().getName());
        checkProjectTV.setText(getSampleInfoBean().getInspectionModel().getName());
        standardOfExecutionTV.setText(getSampleInfoBean().getProductInfoModel().getStandard());
        checkInstrumentTV.setText(getSampleInfoBean().getInspectionModel().getDeviceName());
        sampleInfoEnsureBtn.setEnabled(false);
        samplingFiring.isSampleCheck(getSampleInfoBean().getSampleModel().getObjectId());
    }

    @OnClick(R.id.fra_sample_info_check_hint_img)
    void closeHint() {
        sampleInfoHintView.setVisibility(View.GONE);
    }

    private OcrModel ocrModel;
    @Override
    public void onIsSamplingCheckSuccess(final IsSampleCheckModel isSampleCheckModel) {
        waitDialog.close();
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                sampleInfoEnsureBtn.setEnabled(!isSampleCheckModel.isResult());
                if (!TextUtils.isEmpty(isSampleCheckModel.getMessage())) {
                    sampleInfoHintView.setVisibility(View.VISIBLE);
                    sampleInfoHintTV.setText(isSampleCheckModel.getMessage());
                } else {
                    sampleInfoHintView.setVisibility(View.GONE);
                }
            }
        });

//        //判断是否检验过 没检验过提示没检验，检验过判断当前的协议是否为空 不为空直接跳转后续界面 为空 请求得到协议的接口
//        if(isSampleCheckModel.isResult()){
//            ToastUtils.looperShow("该样品已经检测过，请选择未检测过的样品进行检验");
//        }else{
//
//        }
    }

    private void next() {
        //根据检测类型调用 不同的检测方式 ocr或串口
        try{
            //ocr类型为1
            if(getSampleInfoBean().getInspectionModel().getDevices().get(0).getMethod().equals(TYPE_INSPECT_OCR)){
                startOcr();
            }else{
                startSerialPort();
            }
        }catch (Exception e){
            ToastUtils.looperShow("协议出错，请联系客服重新定制协议");
        }
    }

    @Override
    public void onIsSamplingCheckFail(String error) {
        waitDialog.close();
        ToastUtils.looperShow(error);
    }

    @Override
    public void onGetProtocolSuccess(OcrModel ocrModel) {
        this.ocrModel = ocrModel;
        waitDialog.close();
        next();
    }

    @Override
    public void onGetProtocolFail(String error) {
        ToastUtils.looperShow(error);
        waitDialog.close();
    }

    @Override
    public void onModifySamplingSuccess(String str) {

    }

    @Override
    public void onModifytSamplingFail(String error) {

    }
}

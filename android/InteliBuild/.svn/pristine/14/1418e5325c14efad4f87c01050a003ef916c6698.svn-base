package com.bibinet.intelibuild.project.manager;

import android.Manifest;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.util.Log;

import com.bibinet.intelibuild.project.application.Constants;
import com.bibinet.intelibuild.project.util.LogUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by zyl.
 */

public class PermissionManager {

    /*--------------------以下是请求权限所用------------------------------*/
    public static final int CameralPermissson = 0x0001;
    public static final int StoragePermisson = 0x0002;


    private final String TAG = "MPermissions";

    private Activity activity;

    public PermissionManager(Activity activity, OnPermissionManagerListener listener){
        this.activity = activity;
        this.onPermissionManagerListener = listener;
    }

    //是因为哪个页面发起的请求权限
    private int pageId;

    /**
     * 请求权限
     *
     * @param permissions 请求的权限
     * @param requestCode 请求权限的请求码
     */
    public void mRequestPermission(String[] permissions, int requestCode) {
        if (checkPermissions(permissions)) {
            permissionSuccess(requestCode);
        } else {
            List<String> needPermissions = getDeniedPermissions(permissions);
            ActivityCompat.requestPermissions(activity, needPermissions.toArray(new String[needPermissions.size()]), requestCode);
        }
    }


    public void getPermission(int permissionsId, int startId){
        this.pageId = startId;
        switch (permissionsId){
            case CameralPermissson:
                mRequestPermission(new String[]{Manifest.permission.CAMERA}, CameralPermissson);
                break;
        }
    }

    /**
     * 检测所有的权限是否都已授权
     *
     * @param permissions
     * @return
     */
    private boolean checkPermissions(String[] permissions) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            return true;
        }

        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(activity, permission) !=
                    PackageManager.PERMISSION_GRANTED) {
                return false;
            }
        }
        return true;
    }

    /**
     * 获取权限集中需要申请权限的列表
     *
     * @param permissions
     * @return
     */
    private List<String> getDeniedPermissions(String[] permissions) {
        List<String> needRequestPermissionList = new ArrayList<>();
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(activity, permission) !=
                    PackageManager.PERMISSION_GRANTED ||
                    ActivityCompat.shouldShowRequestPermissionRationale(activity, permission)) {
                needRequestPermissionList.add(permission);
            }
        }
        return needRequestPermissionList;
    }


    /**
     * 系统请求权限回调
     *
     * @param requestCode
     * @param permissions
     * @param grantResults
     */

    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case CameralPermissson:
                if (verifyPermissions(grantResults)) {
                    permissionSuccess(requestCode);
                } else {
                    permissionFail(requestCode);
                    showTipsDialog("当前应用缺少摄像头权限，相关功能暂时无法使用。如若需要，请单击【确定】按钮前往设置中心进行权限授权。");
                }
                break;
            case StoragePermisson:
                if (verifyPermissions(grantResults)) {
                    permissionSuccess(requestCode);
                } else {
                    permissionFail(requestCode);
                    showTipsDialog("当前应用缺少存储权限，相关功能暂时无法使用。如若需要，请单击【确定】按钮前往设置中心进行权限授权。");
                }
                break;
            default:
                break;
        }
    }

    private OnPermissionManagerListener onPermissionManagerListener;

    public interface OnPermissionManagerListener{
        void onRequestPermissionSuccess(int requestCode, int pageId);
        void onRequestPermissionFail(int requestCode, int pageId);
    }

    /**
     * 确认所有的权限是否都已授权
     *
     * @param grantResults
     * @return
     */
    private boolean verifyPermissions(int[] grantResults) {
        for (int grantResult : grantResults) {
            if (grantResult != PackageManager.PERMISSION_GRANTED) {
                return false;
            }
        }
        return true;
    }

    /**
     * 显示提示对话框
     */
    private void showTipsDialog(String msg) {
        new AlertDialog.Builder(activity)
                .setTitle("提示信息")
                .setMessage(msg)
                .setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                })
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        startAppSettings();
                    }
                }).show();
    }

    /**
     * 启动当前应用设置页面
     */
    private void startAppSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse("package:" + activity.getPackageName()));
        activity.startActivity(intent);
    }

    /**
     * 获取权限成功
     *
     * @param requestCode
     */
    public void permissionSuccess(int requestCode) {
        LogUtils.e(TAG, "获取权限成功=" + requestCode);
        onPermissionManagerListener.onRequestPermissionSuccess(requestCode, pageId);
    }

    /**
     * 权限获取失败
     * @param requestCode
     */
    public void permissionFail(int requestCode) {
        LogUtils.e(TAG, "获取权限失败=" + requestCode);
        onPermissionManagerListener.onRequestPermissionFail(requestCode, pageId);
    }
}
package com.bibinet.biunion.project.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_MUSIC_DATA".
*/
public class MediaMusicDataDao extends AbstractDao<MediaMusicData, Void> {

    public static final String TABLENAME = "MEDIA_MUSIC_DATA";

    /**
     * Properties of entity MediaMusicData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Code = new Property(0, String.class, "code", false, "CODE");
        public final static Property StudyTime = new Property(1, String.class, "studyTime", false, "STUDY_TIME");
        public final static Property Pitch = new Property(2, int.class, "pitch", false, "PITCH");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
    }


    public MediaMusicDataDao(DaoConfig config) {
        super(config);
    }
    
    public MediaMusicDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_MUSIC_DATA\" (" + //
                "\"CODE\" TEXT UNIQUE ," + // 0: code
                "\"STUDY_TIME\" TEXT," + // 1: studyTime
                "\"PITCH\" INTEGER NOT NULL ," + // 2: pitch
                "\"CONTENT\" TEXT);"); // 3: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_MUSIC_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaMusicData entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String studyTime = entity.getStudyTime();
        if (studyTime != null) {
            stmt.bindString(2, studyTime);
        }
        stmt.bindLong(3, entity.getPitch());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaMusicData entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String studyTime = entity.getStudyTime();
        if (studyTime != null) {
            stmt.bindString(2, studyTime);
        }
        stmt.bindLong(3, entity.getPitch());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MediaMusicData readEntity(Cursor cursor, int offset) {
        MediaMusicData entity = new MediaMusicData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // studyTime
            cursor.getInt(offset + 2), // pitch
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaMusicData entity, int offset) {
        entity.setCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStudyTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPitch(cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MediaMusicData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MediaMusicData entity) {
        return null;
    }

    @Override
    public boolean hasKey(MediaMusicData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

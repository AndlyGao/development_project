package com.bibinet.biunion.project.ui.activity;

import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Typeface;
import android.os.Build;
import android.os.Bundle;
import android.os.PersistableBundle;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.LocalBroadcastManager;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bibinet.biunion.R;
import com.bibinet.biunion.project.application.Constants;
import com.bibinet.biunion.project.bean.LoginResultBean;
import com.bibinet.biunion.project.builder.JPushReciver;
import com.bibinet.biunion.project.event.BannerClickEvent;
import com.bibinet.biunion.project.service.MusicPlayService;
import com.bibinet.biunion.project.ui.base.BaseActivity;
import com.bibinet.biunion.project.ui.fragment.HomeFragment;
import com.bibinet.biunion.project.ui.fragment.InnFragment;
import com.bibinet.biunion.project.ui.fragment.MediaFragment;
import com.bibinet.biunion.project.ui.fragment.MyFragment;
import com.bibinet.biunion.project.ui.manager.VersionUpdateManager;
import com.bibinet.biunion.project.utils.SharedPresUtils;
import com.google.gson.Gson;
import com.umeng.analytics.MobclickAgent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.util.Timer;
import java.util.TimerTask;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class MainActivity extends BaseActivity {
    public static final String MESSAGE_RECEIVED_ACTION = "com.example.jpushdemo.MESSAGE_RECEIVED_ACTION";
    @BindView(R.id.bottomhome)
    RelativeLayout bottomhome;
    @BindView(R.id.act_main_media)
    View mediaV;
    @BindView(R.id.bottomask)
    View bottomask;
    @BindView(R.id.bottomy)
    View bottomy;
    @BindView(R.id.texthome)
    TextView texthome;
    @BindView(R.id.textmedia)
    TextView textmedia;
    @BindView(R.id.textserver)
    TextView textserver;
    @BindView(R.id.textmy)
    TextView textmy;
    @BindView(R.id.imageask_new)
    View askNewV;
    private HomeFragment homeFragment;
    private Fragment[] fragments = new Fragment[3];
    private MediaFragment mediaFragment;
    private InnFragment innFragment;
    private MyFragment myFragment;
    private View[] mTabs;
    private TextView[] mTextviewTabs;
    private int index = 0;
    private VersionUpdateManager versionUpdateManager;
    private JPushReciver mMessageReceiver;
    private boolean isCanExit = false;

    @Override
    protected int getLayoutId() {
        return R.layout.activity_main;
    }

    @Override
    protected void onBaseCreate(Bundle savedInstanceState) {
        MobclickAgent.setDebugMode(true);
//        initStateBarTransparent();
        ButterKnife.bind(this);
        initView();
        registerMessageReceiver();
        versionUpdateManager = new VersionUpdateManager(this);
        versionUpdateManager.versionUpdateCheck();
        EventBus.getDefault().register(this);

    }

    private void initView() {

        SharedPresUtils sharedPresUtils = SharedPresUtils.getsSharedPresUtils(SharedPresUtils.DATA_CONFIG);
        String loginString = sharedPresUtils.getString("loginResultData", null);
        Gson gson = new Gson();
        Constants.loginresultInfo = gson.fromJson(loginString, LoginResultBean.class);
        homeFragment = new HomeFragment();
        mediaFragment = new MediaFragment();
        innFragment = new InnFragment();
        myFragment = new MyFragment();
        fragments = new Fragment[]{homeFragment, mediaFragment, innFragment, myFragment};
        mTabs = new View[]{bottomhome, mediaV, bottomask, bottomy};
        mTextviewTabs = new TextView[]{texthome, textmedia, textserver, textmy};
        mTabs[0].setSelected(true);
        mTextviewTabs[0].setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));

        getSupportFragmentManager().beginTransaction().
                add(R.id.fragementcontainer, homeFragment).show(homeFragment).
                add(R.id.fragementcontainer, mediaFragment).hide(mediaFragment).
                add(R.id.fragementcontainer, innFragment).hide(innFragment).
                add(R.id.fragementcontainer, myFragment).hide(myFragment)
                .commit();
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//            //写入存储卡权限
//            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
//                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 222);
//            } else {
//
//            }
//        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
//        super.onSaveInstanceState(outState, outPersistentState);
    }

    public void registerMessageReceiver() {
//        setStyleBasic();
        JPushReciver jPushReciver = new JPushReciver(texthome);
        IntentFilter filter = new IntentFilter();
        filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
        filter.addAction(MESSAGE_RECEIVED_ACTION);
        LocalBroadcastManager.getInstance(this).registerReceiver(jPushReciver, filter);
    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onResume(this);       //统计时长
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPause(this);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Intent intent = new Intent(MusicPlayService.ACTION_FINISH_SERVICE);
        sendBroadcast(intent);
        EventBus.getDefault().unregister(this);
    }

    public void initStateBarTransparent() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
        }
    }

    @Subscribe
    public void onMainEventBus(BannerClickEvent event) {
        if (event == null) {
            return;
        }
       onViewClicked(mediaV);
    }

    @OnClick({R.id.bottomhome, R.id.act_main_media, R.id.bottomask, R.id.bottomy})
    public void onViewClicked(View view) {
        int lastIndex = index;
        switch (view.getId()) {
            case R.id.bottomhome:
                index = 0;
                break;
            case R.id.act_main_media:
                index = 1;
                break;
            case R.id.bottomask:
                index = 2;
                break;
            case R.id.bottomy:
                index = 3;
                break;
        }
        if(lastIndex == index){
            return;
        }
        FragmentTransaction trx = getSupportFragmentManager().beginTransaction();
        for (int i = 0; i < mTabs.length; i++) {
            if(index == i){
                mTabs[i].setSelected(true);
                mTextviewTabs[i].setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
                trx.show(fragments[i]);
                if(fragments[i] instanceof MyFragment){
                    ((MyFragment)fragments[i]).moveV();
                }
            }else{
                if(!(fragments[index] instanceof MyFragment)){
                    trx.hide(fragments[i]);
                }
                mTabs[i].setSelected(false);
                mTextviewTabs[i].setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
            }
        }
        trx.commit();
    }

    /**
     * 设置通知提示方式 - 基础属性
     */
//    private void setStyleBasic() {
//        BasicPushNotificationBuilder builder = new BasicPushNotificationBuilder(this);
//        builder.statusBarDrawable = R.mipmap.search;
//        builder.notificationFlags = Notification.FLAG_AUTO_CANCEL;  //设置为点击后自动消失
//        builder.notificationDefaults = Notification.DEFAULT_SOUND;  //设置为铃声（ Notification.DEFAULT_SOUND）或者震动（ Notification.DEFAULT_VIBRATE）
//        JPushInterface.setPushNotificationBuilder(1, builder);
//    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
            if (isCanExit) {
                return super.onKeyDown(keyCode, event);
            }
            Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();
            isCanExit = true;
            new Timer().schedule(new TimerTask() {
                @Override
                public void run() {
                    isCanExit = false;
                }
            }, 2000);
        }
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        //头像拍照结果
        if (myFragment != null) {
            myFragment.onActivityResult(requestCode, resultCode, data);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (myFragment != null) {
            myFragment.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

}

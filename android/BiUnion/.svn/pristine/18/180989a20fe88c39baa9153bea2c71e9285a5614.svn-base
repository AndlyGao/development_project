package com.bibinet.biunion.project.ui.activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bibinet.biunion.R;
import com.bibinet.biunion.project.application.Constants;
import com.bibinet.biunion.project.application.PathConfig;
import com.bibinet.biunion.project.ui.expand.TitleActivity;
import com.bibinet.biunion.project.utils.AppUtils;
import com.bibinet.biunion.project.utils.DataCleanManagerUtils;
import com.bibinet.biunion.project.utils.FileUtils;
import com.bibinet.biunion.project.utils.GlideHelper;
import com.bibinet.biunion.project.utils.SharedPresUtils;
import com.bumptech.glide.Glide;
import com.umeng.analytics.MobclickAgent;

import java.io.File;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * Created by bibinet on 2017-6-5.
 */

public class SettingActivity extends TitleActivity {
    @BindView(R.id.advicetalk)
    LinearLayout advicetalk;
    @BindView(R.id.clearCache)
    LinearLayout clearCache;
    @BindView(R.id.act_setting_login_exit)
    Button loginExitB;
    @BindView(R.id.cachesize)
    TextView cachesize;

    @BindView(R.id.act_setting_version_number)
    TextView versionNumberTV;

    @BindView(R.id.act_setting_update_password)
    View updatePasswordV;
    @BindView(R.id.act_setting_update_password_line)
    View updatePasswordLineV;

    private String cachePath = PathConfig.cachePathMain;
    private File cacheFile;

    @Override
    protected void onTitleCreate(@Nullable Bundle savedInstanceState) {
        loginExitB.setSelected(true);
        if (checkLogin()) {
            loginExitB.setVisibility(View.VISIBLE);
            updatePasswordV.setVisibility(View.VISIBLE);
            updatePasswordLineV.setVisibility(View.VISIBLE);
        } else {
            loginExitB.setVisibility(View.GONE);
            updatePasswordV.setVisibility(View.GONE);
            updatePasswordLineV.setVisibility(View.GONE);
        }
        versionNumberTV.append(AppUtils.getAppVersionName());
    }

    @Override
    protected int getTitleLayoutId() {
        return R.layout.activity_setting;
    }

    @Override
    protected int getTitleString() {
        return R.string.str_setting;
    }

    private boolean checkLogin() {
        if (Constants.loginresultInfo != null && Constants.loginresultInfo.getUser() != null && Constants.loginresultInfo.getUser().getUserId() != null && !Constants.loginresultInfo.getUser().getUserId().equals("")) {
            return true;
        }
        return false;
    }


    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("SettingActivity");
        cacheFile = new File(cachePath);
        try {
            String sizeInfo = DataCleanManagerUtils.getCacheSize(this, cacheFile);
            cachesize.setText(sizeInfo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @OnClick({R.id.advicetalk, R.id.clearCache, R.id.act_setting_login_exit})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.advicetalk:
                startActivity(new Intent(this, AdviceSubmitActivity.class));
                break;
            case R.id.clearCache:
                doClearCache();
                Toast.makeText(this, "清除成功", Toast.LENGTH_SHORT).show();
                break;
            case R.id.act_setting_login_exit:
                doLoginOut();
                break;
        }
    }

    private void doLoginOut() {
        Constants.loginresultInfo = null;
        SharedPresUtils sharedPresUtils = SharedPresUtils.getsSharedPresUtils(SharedPresUtils.DATA_CONFIG);
        sharedPresUtils.putString("loginResultData", null);
        finish();
    }

    private void doClearCache() {
        DataCleanManagerUtils.deleteFolderFile(cachePath, false);
        FileUtils.clearDir(Glide.getPhotoCacheDir(this).getPath());
        try {
            GlideHelper.getInst().clearCache(this);
            cachesize.setText(DataCleanManagerUtils.getCacheSize(this, cacheFile));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            PathConfig.createMkdirs();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @OnClick(R.id.act_setting_update_password)
    void updatePassword() {
        if (checkLogin()) {
            startActivityForResult(new Intent(this, PasswordUpdateActivity.class), PasswordUpdateActivity.REQUEST_CODE);
        } else {
            startActivity(new Intent(this, LoginActivity.class));
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PasswordUpdateActivity.REQUEST_CODE && resultCode == PasswordUpdateActivity.RESULT_CODE) {
            finish();
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("SettingActivity");
        MobclickAgent.onPause(this);
    }
}

package com.bibinet.biunion.project.net.firing;

import com.bibinet.biunion.project.application.BiUnionApplication;
import com.bibinet.biunion.project.application.PathConfig;
import com.bibinet.biunion.project.models.MediaMusicModel;
import com.bibinet.biunion.project.models.PageModel;
import com.bibinet.biunion.project.net.RetrofitPageCallBack;
import com.bibinet.biunion.project.net.base.BaseFiring;
import com.bibinet.biunion.project.net.emit.MediaMusicEmit;
import com.bibinet.biunion.project.net.emit.MediaMusicPlayEmit;
import com.bibinet.biunion.project.net.ready.MediaMusicReady;
import com.bibinet.biunion.project.utils.FileUtils;

import java.io.File;
import java.io.InputStream;

import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.schedulers.Schedulers;
import okhttp3.ResponseBody;

/**
 * Created by bibinet on 2017-6-12.
 */

public class MediaMusicFiring extends BaseFiring {
    private MediaMusicReady mediaMusicReady;
    private MediaMusicEmit mediaMusicEmit;
    private MediaMusicPlayEmit mediaMusicPlayEmit;

    public MediaMusicFiring(MediaMusicEmit mediaMusicEmit) {
        super(null);
        this.mediaMusicEmit = mediaMusicEmit;
        mediaMusicReady = new MediaMusicReady();
    }

    public MediaMusicFiring(MediaMusicPlayEmit mediaMusicPlayEmit) {
        super(mediaMusicPlayEmit);
        this.mediaMusicPlayEmit = mediaMusicPlayEmit;
        mediaMusicReady = new MediaMusicReady();
    }

    public void getMusicListData(int pageNumb) {
        mediaMusicReady.getMusicListData(String.valueOf(pageNumb), new RetrofitPageCallBack<MediaMusicModel>() {

            @Override
            protected void onPageRequestFail(String resMessage) {
                mediaMusicEmit.loadMoreFail(resMessage);
            }

            @Override
            protected void onPageRequestSuccess(MediaMusicModel model, PageModel.PageChildModel pageChildModel) {
                mediaMusicEmit.loadMoreSuccess(model.getAlbumList(), pageChildModel);
            }
        });
    }



    public void getMusicFile(String url) {
        //自定义保存路径，Environment.getExternalStorageDirectory()：SD卡的根目录
        final String name = new File(url).getName();
        final String l = PathConfig.cachePathMusic + "/" + name;
        if (new File(l).exists()) {
            //直接返回本地路径
            mediaMusicPlayEmit.onGetMusicFileSuccess(l);
            return;
        }

        Observable<ResponseBody> observable = BiUnionApplication.getInstance().getApiInterface()
                .downloadMusicFile(url);

        observable.subscribeOn(Schedulers.io())
                .unsubscribeOn(Schedulers.io())
                .map(new Function<ResponseBody, InputStream>() {

                    @Override
                    public InputStream apply(ResponseBody responseBody) throws Exception {
                        return responseBody.byteStream();
                    }

                })
                .observeOn(Schedulers.computation()) // 用于计算任务
                .doOnNext(new Consumer<InputStream>() {
                    @Override
                    public void accept(InputStream inputStream) throws Exception {
                        if (FileUtils.writeFile(inputStream, PathConfig.cachePathMusic, name)){
                            mediaMusicPlayEmit.onGetMusicFileSuccess(l);
                        }
                    }
                })
                .doOnError(new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        mediaMusicPlayEmit.onGetMusicFileFail(throwable.getMessage());
                    }
                })
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe();

    }
}

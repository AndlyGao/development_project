package com.bibinet.biunion.project.ui.activity;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.bibinet.biunion.R;
import com.bibinet.biunion.project.application.Constants;
import com.bibinet.biunion.project.bean.FastLoginVerifCodeBean;
import com.bibinet.biunion.project.bean.LoginResultBean;
import com.bibinet.biunion.project.net.emit.LoginFastEmit;
import com.bibinet.biunion.project.net.firing.LoginFiring;
import com.bibinet.biunion.project.ui.expand.TitleActivity;
import com.bibinet.biunion.project.utils.PhoneNumberUtils;
import com.bibinet.biunion.project.utils.SharedPresUtils;
import com.bibinet.biunion.project.utils.SoftKeyboardUtils;
import com.bibinet.biunion.project.utils.TimeUtils;
import com.bibinet.biunion.project.utils.ToastUtils;
import com.bibinet.biunion.project.utils.ViewCheckUtils;
import com.bibinet.biunion.project.utils.cityselectutil.SharedPreferencesUtils;
import com.umeng.analytics.MobclickAgent;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * Created by bibinet on 2017-6-7.
 */

public class LoginFastActivity extends TitleActivity implements LoginFastEmit, TimeUtils.OnTimeUtilsListener {
    public static final int requestCode = 2000;
    public static final int resultCode = 2002;
    private final long AGAINSENDTIME = 60 * 1000;


    @BindView(R.id.act_login_fast_phone)
    EditText phoneET;
    @BindView(R.id.act_login_fast_get_code)
    TextView getCodeTV;
    @BindView(R.id.act_login_fast_code)
    EditText codeET;
    @BindView(R.id.act_fast_login_confirm)
    Button btnLogin;
    private LoginFiring loginFiring;
    private TimeUtils timeUtils;

    @Override
    protected int getTitleLayoutId() {
        return R.layout.activity_login_fast;
    }

    @Override
    protected void onTitleCreate(Bundle savedInstanceState) {
        initView();
        timeUtils = new TimeUtils();
        ViewCheckUtils.inputConfirm(btnLogin, phoneET, codeET);

        long historyTime = SharedPreferencesUtils.getInstence().getCheckCodeAgainSendTime(this);
        long currentTime = System.currentTimeMillis();
        if (currentTime < historyTime) {
            long time = historyTime - currentTime;
            timeUtils.startCountDownTime(time, 1000, this);
            getCodeTV.setEnabled(false);
        } else {
            getCodeTV.setEnabled(true);
        }

        //检测验证码
        ViewCheckUtils.getCodeCheck(getCodeTV, phoneET);
    }

    @Override
    protected int getTitleString() {
        return R.string.str_login_fast;
    }

    private void initView() {
        loginFiring = new LoginFiring(this);
    }

    @OnClick({R.id.act_login_fast_get_code, R.id.act_fast_login_confirm})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.act_login_fast_get_code:
                String phone = phoneET.getText().toString().trim();
                if (PhoneNumberUtils.isMobileNumber(phone)) {
                    loginFiring.getCode(phone);
                } else {
                    Toast.makeText(this, "请输入正确的手机号", Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.act_fast_login_confirm:
                String phoneNumb = phoneET.getText().toString().trim();
                String VerifCode = codeET.getText().toString().trim();
                if (TextUtils.isEmpty(VerifCode)) {
                    Toast.makeText(this, "验证码为空", Toast.LENGTH_SHORT).show();
                } else if (!PhoneNumberUtils.isMobileNumber(phoneNumb)) {
                    Toast.makeText(this, "手机号格式不正确", Toast.LENGTH_SHORT).show();
                } else {
                    loginFiring.loginFast(phoneNumb, VerifCode);
                }
                break;
        }
    }

    @Override
    public void onGetCodeSuccess(FastLoginVerifCodeBean verifCodeInfo) {
        if (verifCodeInfo.getResCode().equals("0000")) {
            Toast.makeText(this, "验证码已发送", Toast.LENGTH_SHORT).show();
            //保存一段时间后的时间点
            long time = System.currentTimeMillis() + AGAINSENDTIME;
            SharedPreferencesUtils.getInstence().setCheckCodeAgainSendTime(this, time);
            //启动倒计时
            timeUtils.startCountDownTime(AGAINSENDTIME, 1000, this);

        } else {
            Toast.makeText(this, verifCodeInfo.getResMessage(), Toast.LENGTH_SHORT).show();
        }


    }

    @Override
    public void onGetCodeFail(String s) {
        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onLoginFastSuccess(LoginResultBean bean, String loginString) {
        if (bean.getResCode().equals("0000")) {
            SoftKeyboardUtils.hintKbTwo(this);
            ToastUtils.showShort("登录成功");
            Constants.loginresultInfo = bean;
            SharedPresUtils sharedPresUtils = SharedPresUtils.getsSharedPresUtils(SharedPresUtils.DATA_CONFIG);
            sharedPresUtils.putString("loginResultData", loginString);
            setResult(resultCode);
            MobclickAgent.onProfileSignIn(bean.getUser().getUserId());//账号登录统计
            finish();
        } else {
            Toast.makeText(this, bean.getResMessage(), Toast.LENGTH_SHORT).show();
        }
    }

    //间隔倒计时
    @Override
    public void onTick(long millisUntilFinished) {
        getCodeTV.setText("（" + (millisUntilFinished / 1000) + "）秒后可重发");
        getCodeTV.setEnabled(false);
    }

    //完成
    @Override
    public void onFinish() {
        getCodeTV.setText("获取验证码");
        getCodeTV.setEnabled(true);
    }

    @Override
    public void onLoginFastFail(String s) {
        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();
    }

}

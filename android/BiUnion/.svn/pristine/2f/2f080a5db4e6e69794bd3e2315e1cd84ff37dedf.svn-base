package com.bibinet.biunion.project.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_VIDEO_DATA".
*/
public class MediaVideoDataDao extends AbstractDao<MediaVideoData, Void> {

    public static final String TABLENAME = "MEDIA_VIDEO_DATA";

    /**
     * Properties of entity MediaVideoData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Code = new Property(0, String.class, "code", false, "CODE");
        public final static Property SectionCode = new Property(1, String.class, "sectionCode", false, "SECTION_CODE");
        public final static Property StudyTime = new Property(2, String.class, "studyTime", false, "STUDY_TIME");
        public final static Property HourNo = new Property(3, String.class, "hourNo", false, "HOUR_NO");
        public final static Property HourName = new Property(4, String.class, "hourName", false, "HOUR_NAME");
        public final static Property HourTime = new Property(5, String.class, "hourTime", false, "HOUR_TIME");
        public final static Property Video = new Property(6, String.class, "video", false, "VIDEO");
    }


    public MediaVideoDataDao(DaoConfig config) {
        super(config);
    }
    
    public MediaVideoDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_VIDEO_DATA\" (" + //
                "\"CODE\" TEXT UNIQUE ," + // 0: code
                "\"SECTION_CODE\" TEXT," + // 1: sectionCode
                "\"STUDY_TIME\" TEXT," + // 2: studyTime
                "\"HOUR_NO\" TEXT," + // 3: hourNo
                "\"HOUR_NAME\" TEXT," + // 4: hourName
                "\"HOUR_TIME\" TEXT," + // 5: hourTime
                "\"VIDEO\" TEXT);"); // 6: video
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_VIDEO_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaVideoData entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String sectionCode = entity.getSectionCode();
        if (sectionCode != null) {
            stmt.bindString(2, sectionCode);
        }
 
        String studyTime = entity.getStudyTime();
        if (studyTime != null) {
            stmt.bindString(3, studyTime);
        }
 
        String hourNo = entity.getHourNo();
        if (hourNo != null) {
            stmt.bindString(4, hourNo);
        }
 
        String hourName = entity.getHourName();
        if (hourName != null) {
            stmt.bindString(5, hourName);
        }
 
        String hourTime = entity.getHourTime();
        if (hourTime != null) {
            stmt.bindString(6, hourTime);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(7, video);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaVideoData entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String sectionCode = entity.getSectionCode();
        if (sectionCode != null) {
            stmt.bindString(2, sectionCode);
        }
 
        String studyTime = entity.getStudyTime();
        if (studyTime != null) {
            stmt.bindString(3, studyTime);
        }
 
        String hourNo = entity.getHourNo();
        if (hourNo != null) {
            stmt.bindString(4, hourNo);
        }
 
        String hourName = entity.getHourName();
        if (hourName != null) {
            stmt.bindString(5, hourName);
        }
 
        String hourTime = entity.getHourTime();
        if (hourTime != null) {
            stmt.bindString(6, hourTime);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(7, video);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MediaVideoData readEntity(Cursor cursor, int offset) {
        MediaVideoData entity = new MediaVideoData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sectionCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studyTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hourNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hourName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hourTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // video
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaVideoData entity, int offset) {
        entity.setCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSectionCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudyTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHourNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHourName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHourTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MediaVideoData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MediaVideoData entity) {
        return null;
    }

    @Override
    public boolean hasKey(MediaVideoData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

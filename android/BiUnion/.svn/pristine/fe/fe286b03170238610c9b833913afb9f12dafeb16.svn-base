package com.bibinet.biunion.project.net.firing;

import android.util.Log;

import com.bibinet.biunion.project.application.BiUnionApplication;
import com.bibinet.biunion.project.application.PathConfig;
import com.bibinet.biunion.project.models.MagazineModel;
import com.bibinet.biunion.project.models.PageModel;
import com.bibinet.biunion.project.net.RetrofitPageCallBack;
import com.bibinet.biunion.project.net.base.BaseFiring;
import com.bibinet.biunion.project.net.emit.MagazineDetailEmit;
import com.bibinet.biunion.project.net.emit.MagazineEmit;
import com.bibinet.biunion.project.net.ready.MagazineReady;
import com.bibinet.biunion.project.utils.FileUtils;
import com.bibinet.biunion.project.utils.NetworkUtils;
import com.bibinet.biunion.project.utils.ToastUtils;

import java.io.File;
import java.io.InputStream;

import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.schedulers.Schedulers;
import okhttp3.ResponseBody;

/**
 * Created by bibinet on 2017-6-26.
 */

public class MagazineFiring extends BaseFiring {
    private MagazineReady magazineReady;
    private MagazineEmit magazineEmit;
    private MagazineDetailEmit magazineDetailEmit;

    public MagazineFiring(MagazineEmit magazineEmit) {
        super(magazineEmit);
        this.magazineEmit = magazineEmit;
        this.magazineReady = new MagazineReady();
    }

    public MagazineFiring(MagazineDetailEmit magazineDetailEmit) {
        super(magazineDetailEmit);
        this.magazineDetailEmit = magazineDetailEmit;
        this.magazineReady = new MagazineReady();
    }

    public void getMagazine(final int pageNum) {
        magazineReady.getMagazine(new RetrofitPageCallBack<MagazineModel>() {

            @Override
            protected void onPageRequestFail(String resMessage) {
                magazineEmit.loadMoreFail(resMessage);
            }

            @Override
            protected void onPageRequestSuccess(MagazineModel model, PageModel.PageChildModel pageChildModel) {
                Log.e("onPageRequestSuccess=", "onPageRequestSuccess=");
                magazineEmit.loadMoreSuccess(model.getItem(), pageChildModel);
                //第一页才回调推荐
                Log.e("page=", "page=" + pageNum);
                if (pageNum == 1) {
                    magazineEmit.onGetMagazineSuccess(model);
                }
            }
        }, String.valueOf(pageNum));
    }

    public void getPdfFile(String url) {

        //自定义保存路径，Environment.getExternalStorageDirectory()：SD卡的根目录
        final String name = new File(url).getName();
        final String l = PathConfig.cachePathPdf + "/" + name;
        if (new File(l).exists()) {
            //直接返回本地路径
            magazineDetailEmit.onGetPdfFileSuccess(new File(l).getAbsolutePath());
            return;
        }
        if (!NetworkUtils.isNetworkAvailable(BiUnionApplication.getInstance())) {
            ToastUtils.showShort("网络已断开，请连网后重试");
            return;
        }
        waitDialog.open();
        Observable<ResponseBody> observable = BiUnionApplication.getInstance().getApiInterface()
                .downloadMusicFile(url);

        observable.subscribeOn(Schedulers.io())
                .unsubscribeOn(Schedulers.io())
                .map(new Function<ResponseBody, InputStream>() {

                    @Override
                    public InputStream apply(ResponseBody responseBody) throws Exception {
                        return responseBody.byteStream();
                    }

                })
                .observeOn(Schedulers.computation()) // 用于计算任务
                .doOnNext(new Consumer<InputStream>() {
                    @Override
                    public void accept(InputStream inputStream) throws Exception {
                        if (FileUtils.writeFile(inputStream, PathConfig.cachePathPdf, name)){
                            magazineDetailEmit.onGetPdfFileSuccess(l);
                        }
                        waitDialog.close();
                    }
                })
                .doOnError(new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        magazineDetailEmit.onGetPdfFileFail(throwable.getMessage());
                    }
                })
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe();



    }
}
